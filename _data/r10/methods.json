{
	"AmplitudeEnvelope": [
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.AmplitudeEnvelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/AmplitudeEnvelope.js#L52"
		},
		{
			"description": "Trigger the attack/decay portion of the ADSR envelope.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the attack should start.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity of the envelope scales the vales.\n                              number between 0-1",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger the attack 0.5 seconds from now with a velocity of 0.2\n env.triggerAttack(\"+0.5\", 0.2);"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/component/Envelope.js#L230",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Triggers the release of the envelope.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the release portion of the envelope should start.",
					"name": "time"
				}
			],
			"examples": [
				"//trigger release immediately\n env.triggerRelease();"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/component/Envelope.js#L276",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Get the scheduled value at the given time. This will\n return the unconverted (raw) value.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time in seconds.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Number"
				],
				"description": "The scheduled value at the given time."
			},
			"scope": "instance",
			"name": "getValueAtTime",
			"lineno": "Tone/component/Envelope.js#L302",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "triggerAttackRelease is shorthand for triggerAttack, then waiting\n some duration, then triggerRelease.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The duration of the sustain.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the attack should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity of the envelope.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger the attack and then the release after 0.6 seconds.\nenv.triggerAttackRelease(0.6);"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/component/Envelope.js#L317",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Cancels all scheduled envelope changes after the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "after"
				}
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/component/Envelope.js#L329",
			"inherits": "Tone.Envelope"
		}
	],
	"AnalyserNode": [
		{
			"scope": "instance",
			"name": "getFloatTimeDomainData",
			"lineno": "Tone/component/Analyser.js#L11"
		}
	],
	"Analyser": [
		{
			"description": "Run the analysis given the current settings and return the \n result as a TypedArray.",
			"returns": {
				"type": [
					"TypedArray"
				]
			},
			"scope": "instance",
			"name": "analyse",
			"lineno": "Tone/component/Analyser.js#L112"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Analyser"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Analyser.js#L238"
		}
	],
	"Compressor": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Compressor"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Compressor.js#L100"
		}
	],
	"CrossFade": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.CrossFade"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/CrossFade.js#L88"
		}
	],
	"Envelope": [
		{
			"description": "Trigger the attack/decay portion of the ADSR envelope.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the attack should start.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity of the envelope scales the vales.\n                              number between 0-1",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger the attack 0.5 seconds from now with a velocity of 0.2\n env.triggerAttack(\"+0.5\", 0.2);"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/component/Envelope.js#L230"
		},
		{
			"description": "Triggers the release of the envelope.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the release portion of the envelope should start.",
					"name": "time"
				}
			],
			"examples": [
				"//trigger release immediately\n env.triggerRelease();"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/component/Envelope.js#L276"
		},
		{
			"description": "Get the scheduled value at the given time. This will\n return the unconverted (raw) value.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time in seconds.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Number"
				],
				"description": "The scheduled value at the given time."
			},
			"scope": "instance",
			"name": "getValueAtTime",
			"lineno": "Tone/component/Envelope.js#L302"
		},
		{
			"description": "triggerAttackRelease is shorthand for triggerAttack, then waiting\n some duration, then triggerRelease.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The duration of the sustain.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the attack should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity of the envelope.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger the attack and then the release after 0.6 seconds.\nenv.triggerAttackRelease(0.6);"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/component/Envelope.js#L317"
		},
		{
			"description": "Cancels all scheduled envelope changes after the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "after"
				}
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/component/Envelope.js#L329"
		},
		{
			"description": "Disconnect and dispose.",
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Envelope.js#L445"
		}
	],
	"EQ3": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.EQ3"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/EQ3.js#L126"
		}
	],
	"FeedbackCombFilter": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.FeedbackCombFilter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/FeedbackCombFilter.js#L68"
		}
	],
	"Filter": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Filter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Filter.js#L169"
		}
	],
	"Follower": [
		{
			"description": "Borrows the connect method from Signal so that the output can be used\n as a Tone.Signal control signal.",
			"scope": "instance",
			"name": "connect",
			"lineno": "Tone/component/Follower.js#L160"
		},
		{
			"description": "dispose",
			"returns": {
				"type": [
					"Tone.Follower"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Follower.js#L166"
		}
	],
	"FrequencyEnvelope": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.FrequencyEnvelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/FrequencyEnvelope.js#L108"
		},
		{
			"description": "Trigger the attack/decay portion of the ADSR envelope.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the attack should start.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity of the envelope scales the vales.\n                              number between 0-1",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger the attack 0.5 seconds from now with a velocity of 0.2\n env.triggerAttack(\"+0.5\", 0.2);"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/component/Envelope.js#L230",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Triggers the release of the envelope.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the release portion of the envelope should start.",
					"name": "time"
				}
			],
			"examples": [
				"//trigger release immediately\n env.triggerRelease();"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/component/Envelope.js#L276",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Get the scheduled value at the given time. This will\n return the unconverted (raw) value.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time in seconds.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Number"
				],
				"description": "The scheduled value at the given time."
			},
			"scope": "instance",
			"name": "getValueAtTime",
			"lineno": "Tone/component/Envelope.js#L302",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "triggerAttackRelease is shorthand for triggerAttack, then waiting\n some duration, then triggerRelease.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The duration of the sustain.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the attack should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity of the envelope.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger the attack and then the release after 0.6 seconds.\nenv.triggerAttackRelease(0.6);"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/component/Envelope.js#L317",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Cancels all scheduled envelope changes after the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "after"
				}
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/component/Envelope.js#L329",
			"inherits": "Tone.Envelope"
		}
	],
	"Gate": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Gate"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Gate.js#L107"
		}
	],
	"LFO": [
		{
			"description": "Start the LFO.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "the time the LFO will start",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.LFO"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/component/LFO.js#L129"
		},
		{
			"description": "Stop the LFO.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "the time the LFO will stop",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.LFO"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/component/LFO.js#L141"
		},
		{
			"description": "Sync the start/stop/pause to the transport \n and the frequency to the bpm of the transport",
			"examples": [
				"lfo.frequency.value = \"8n\";\n lfo.sync().start(0)\n //the rate of the LFO will always be an eighth note, \n //even as the tempo changes"
			],
			"returns": {
				"type": [
					"Tone.LFO"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/component/LFO.js#L158"
		},
		{
			"description": "unsync the LFO from transport control",
			"returns": {
				"type": [
					"Tone.LFO"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/component/LFO.js#L168"
		},
		{
			"description": "disconnect and dispose",
			"returns": {
				"type": [
					"Tone.LFO"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/LFO.js#L327"
		},
		{
			"description": "Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n will also affect the oscillators frequency.",
			"examples": [
				"Tone.Transport.bpm.value = 120;\nosc.frequency.value = 440;\n//the ration between the bpm and the frequency will be maintained\nosc.syncFrequency();\nTone.Transport.bpm.value = 240; \n// the frequency of the oscillator is doubled to 880"
			],
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "syncFrequency",
			"lineno": "Tone/source/Oscillator.js#L164",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Unsync the oscillator's frequency from the Transport. \n See Tone.Oscillator.syncFrequency",
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsyncFrequency",
			"lineno": "Tone/source/Oscillator.js#L174",
			"inherits": "Tone.Oscillator"
		}
	],
	"Limiter": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Limiter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Limiter.js#L60"
		}
	],
	"LowpassCombFilter": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.LowpassCombFilter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/LowpassCombFilter.js#L94"
		}
	],
	"Merge": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Merge"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Merge.js#L62"
		}
	],
	"Meter": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Meter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Meter.js#L116"
		}
	],
	"MidSideCompressor": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.MidSideCompressor"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/MidSideCompressor.js#L78"
		}
	],
	"MidSideMerge": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.MidSideMerge"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/MidSideMerge.js#L74"
		}
	],
	"MidSideSplit": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.MidSideSplit"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/MidSideSplit.js#L56"
		}
	],
	"Mono": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Mono"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Mono.js#L34"
		}
	],
	"MultibandCompressor": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.MultibandCompressor"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/MultibandCompressor.js#L100"
		}
	],
	"MultibandSplit": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.MultibandSplit"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/MultibandSplit.js#L110"
		}
	],
	"Panner": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Panner"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Panner.js#L106"
		}
	],
	"Panner3D": [
		{
			"description": "Sets the position of the source in 3d space.",
			"params": [
				{
					"type": [
						"Number"
					],
					"name": "x"
				},
				{
					"type": [
						"Number"
					],
					"name": "y"
				},
				{
					"type": [
						"Number"
					],
					"name": "z"
				}
			],
			"returns": {
				"type": [
					"Tone.Panner3D"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setPosition",
			"lineno": "Tone/component/Panner3D.js#L100"
		},
		{
			"description": "Sets the orientation of the source in 3d space.",
			"params": [
				{
					"type": [
						"Number"
					],
					"name": "x"
				},
				{
					"type": [
						"Number"
					],
					"name": "y"
				},
				{
					"type": [
						"Number"
					],
					"name": "z"
				}
			],
			"returns": {
				"type": [
					"Tone.Panner3D"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setOrientation",
			"lineno": "Tone/component/Panner3D.js#L120"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Panner3D"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Panner3D.js#L315"
		}
	],
	"PanVol": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.PanVol"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/PanVol.js#L70"
		}
	],
	"ScaledEnvelope": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.ScaledEnvelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/ScaledEnvelope.js#L113"
		},
		{
			"description": "Trigger the attack/decay portion of the ADSR envelope.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the attack should start.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity of the envelope scales the vales.\n                              number between 0-1",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger the attack 0.5 seconds from now with a velocity of 0.2\n env.triggerAttack(\"+0.5\", 0.2);"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/component/Envelope.js#L230",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Triggers the release of the envelope.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the release portion of the envelope should start.",
					"name": "time"
				}
			],
			"examples": [
				"//trigger release immediately\n env.triggerRelease();"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/component/Envelope.js#L276",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Get the scheduled value at the given time. This will\n return the unconverted (raw) value.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time in seconds.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Number"
				],
				"description": "The scheduled value at the given time."
			},
			"scope": "instance",
			"name": "getValueAtTime",
			"lineno": "Tone/component/Envelope.js#L302",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "triggerAttackRelease is shorthand for triggerAttack, then waiting\n some duration, then triggerRelease.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The duration of the sustain.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the attack should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity of the envelope.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger the attack and then the release after 0.6 seconds.\nenv.triggerAttackRelease(0.6);"
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/component/Envelope.js#L317",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Cancels all scheduled envelope changes after the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "after"
				}
			],
			"returns": {
				"type": [
					"Tone.Envelope"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/component/Envelope.js#L329",
			"inherits": "Tone.Envelope"
		}
	],
	"Split": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Split"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Split.js#L49"
		}
	],
	"Volume": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Volume"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/component/Volume.js#L87"
		}
	],
	"CtrlInterpolate": [
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.CtrlInterpolate"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/control/CtrlInterpolate.js#L126"
		}
	],
	"CtrlMarkov": [
		{
			"description": "Returns the next state of the Markov values.",
			"returns": {
				"type": [
					"String"
				]
			},
			"scope": "instance",
			"name": "next",
			"lineno": "Tone/control/CtrlMarkov.js#L57"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.CtrlMarkov"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/control/CtrlMarkov.js#L117"
		}
	],
	"CtrlPattern": [
		{
			"description": "Return the next value given the current position\n and pattern.",
			"returns": {
				"type": [
					"*"
				],
				"description": "The next value"
			},
			"scope": "instance",
			"name": "next",
			"lineno": "Tone/control/CtrlPattern.js#L170"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.CtrlPattern"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/control/CtrlPattern.js#L264"
		}
	],
	"AudioBuffer": [
		{
			"scope": "instance",
			"name": "copyToChannel",
			"lineno": "Tone/core/Buffer.js#L10"
		},
		{
			"scope": "instance",
			"name": "copyFromChannel",
			"lineno": "Tone/core/Buffer.js#L17"
		}
	],
	"Buffer": [
		{
			"description": "Pass in an AudioBuffer or Tone.Buffer to set the value\n of this buffer.",
			"params": [
				{
					"type": [
						"AudioBuffer",
						"Tone.Buffer"
					],
					"description": "the buffer",
					"name": "buffer"
				}
			],
			"returns": {
				"type": [
					"Tone.Buffer"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "set",
			"lineno": "Tone/core/Buffer.js#L101"
		},
		{
			"returns": {
				"type": [
					"AudioBuffer"
				],
				"description": "The audio buffer stored in the object."
			},
			"scope": "instance",
			"name": "get",
			"lineno": "Tone/core/Buffer.js#L113"
		},
		{
			"description": "Makes an xhr reqest for the selected url then decodes\n the file as an audio buffer. Invokes\n the callback once the audio buffer loads.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The url of the buffer to load.\n                     filetype support depends on the\n                     browser.",
					"name": "url"
				}
			],
			"returns": {
				"type": [
					"Promise"
				],
				"description": "returns a Promise which resolves with the Tone.Buffer"
			},
			"scope": "instance",
			"name": "load",
			"lineno": "Tone/core/Buffer.js#L126"
		},
		{
			"description": "dispose and disconnect",
			"returns": {
				"type": [
					"Tone.Buffer"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Buffer.js#L160"
		},
		{
			"description": "Set the audio buffer from the array",
			"params": [
				{
					"type": [
						"Float32Array"
					],
					"description": "The array to fill the audio buffer",
					"name": "array"
				},
				{
					"type": [
						"Number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The number of channels contained in the array. \n                              If the channel is more than 1, the input array\n                              is expected to be a multidimensional array\n                              with dimensions equal to the number of channels.",
					"name": "channels"
				}
			],
			"returns": {
				"type": [
					"Tone.Buffer"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "fromArray",
			"lineno": "Tone/core/Buffer.js#L245"
		},
		{
			"description": "Sums muliple channels into 1 channel",
			"params": [
				{
					"type": [
						"Number"
					],
					"optional": true,
					"description": "Optionally only copy a single channel from the array.",
					"name": "channel"
				}
			],
			"returns": {
				"type": [
					"Array"
				]
			},
			"scope": "instance",
			"name": "toMono",
			"lineno": "Tone/core/Buffer.js#L265"
		},
		{
			"description": "Get the buffer as an array. Single channel buffers will return a 1-dimensional \n\tFloat32Array, and multichannel buffers will return multidimensional arrays.",
			"params": [
				{
					"type": [
						"Number"
					],
					"optional": true,
					"description": "Optionally only copy a single channel from the array.",
					"name": "channel"
				}
			],
			"returns": {
				"type": [
					"Array"
				]
			},
			"scope": "instance",
			"name": "toArray",
			"lineno": "Tone/core/Buffer.js#L292"
		},
		{
			"description": "Returns the Float32Array representing the PCM audio data for the specific channel.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The channel number to return",
					"name": "channel"
				}
			],
			"returns": {
				"type": [
					"Float32Array"
				],
				"description": "The audio as a TypedArray"
			},
			"scope": "instance",
			"name": "getChannelData",
			"lineno": "Tone/core/Buffer.js#L311"
		},
		{
			"description": "Cut a subsection of the array and return a buffer of the\n subsection. Does not modify the original buffer",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The time to start the slice",
					"name": "start"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "The end time to slice. If none is given\n                    will default to the end of the buffer",
					"name": "end"
				}
			],
			"returns": {
				"type": [
					"Tone.Buffer"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "slice",
			"lineno": "Tone/core/Buffer.js#L323"
		},
		{
			"description": "Loads a url using XMLHttpRequest.",
			"params": [
				{
					"type": [
						"String"
					],
					"name": "url"
				},
				{
					"type": [
						"function"
					],
					"name": "onload"
				},
				{
					"type": [
						"function"
					],
					"name": "onerror"
				},
				{
					"type": [
						"function"
					],
					"name": "onprogress"
				}
			],
			"returns": {
				"type": [
					"XMLHttpRequest"
				]
			},
			"scope": "static",
			"name": "load",
			"lineno": "Tone/core/Buffer.js#L403"
		},
		{
			"description": "Stop all of the downloads in progress",
			"returns": {
				"type": [
					"Tone.Buffer"
				]
			},
			"scope": "static",
			"name": "cancelDownloads",
			"lineno": "Tone/core/Buffer.js#L477"
		},
		{
			"description": "Checks a url's extension to see if the current browser can play that file type.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The url/extension to test",
					"name": "url"
				}
			],
			"examples": [
				"Tone.Buffer.supportsType(\"wav\"); //returns true\nTone.Buffer.supportsType(\"path/to/file.wav\"); //returns true"
			],
			"returns": {
				"type": [
					"Boolean"
				],
				"description": "If the file extension can be played"
			},
			"scope": "static",
			"name": "supportsType",
			"lineno": "Tone/core/Buffer.js#L494"
		}
	],
	"load": [
		{
			"params": [],
			"scope": "inner",
			"name": "onError",
			"lineno": "Tone/core/Buffer.js#L407"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "onProgress",
			"lineno": "Tone/core/Buffer.js#L416"
		}
	],
	"Tone": [
		{
			"description": "Returns a Promise which resolves when all of the buffers have loaded",
			"returns": {
				"type": [
					"Promise"
				]
			},
			"scope": "static",
			"name": "loaded",
			"lineno": "Tone/core/Buffer.js#L505"
		},
		{
			"description": "Send this signal to the channel name.",
			"params": [
				{
					"type": [
						"string"
					],
					"description": "A named channel to send the signal to.",
					"name": "channelName"
				},
				{
					"type": [
						"Decibels"
					],
					"description": "The amount of the source to send to the bus.",
					"name": "amount"
				}
			],
			"examples": [
				"source.send(\"reverb\", -12);"
			],
			"returns": {
				"type": [
					"GainNode"
				],
				"description": "The gain node which connects this node to the desired channel. \n                    Can be used to adjust the levels of the send."
			},
			"scope": "instance",
			"name": "send",
			"lineno": "Tone/core/Bus.js#L29"
		},
		{
			"description": "Recieve the input from the desired channelName to the input",
			"params": [
				{
					"type": [
						"string"
					],
					"description": "A named channel to send the signal to.",
					"name": "channelName"
				},
				{
					"type": [
						"AudioNode"
					],
					"optional": true,
					"description": "If no input is selected, the\n                                        input of the current node is\n                                        chosen.",
					"name": "input"
				}
			],
			"examples": [
				"reverbEffect.receive(\"reverb\");"
			],
			"returns": {
				"type": [
					"Tone"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "receive",
			"lineno": "Tone/core/Bus.js#L50"
		},
		{
			"description": "Create input and outputs for this object.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The number of inputs",
					"name": "input"
				},
				{
					"type": [
						"Number"
					],
					"optional": true,
					"description": "The number of outputs",
					"name": "outputs"
				}
			],
			"returns": {
				"type": [
					"Tone"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "createInsOuts",
			"lineno": "Tone/core/Gain.js#L80"
		},
		{
			"description": "Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)",
			"examples": [
				"//connect an oscillator to the master output\nvar osc = new Tone.Oscillator().toMaster();"
			],
			"returns": {
				"type": [
					"Tone"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "toMaster",
			"lineno": "Tone/core/Master.js#L126"
		},
		{
			"description": "Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n The callback function also passes in an offline instance of Tone.Transport which can be used\n to schedule events along the Transport.",
			"params": [
				{
					"type": [
						"function"
					],
					"description": "All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.",
					"name": "callback"
				},
				{
					"type": [
						"Time"
					],
					"description": "the amount of time to record for.",
					"name": "duration"
				}
			],
			"examples": [
				"//render 2 seconds of the oscillator\nTone.Offline(function(){\n\t//only nodes created in this callback will be recorded\n\tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t//schedule their events\n}, 2).then(function(buffer){\n\t//do something with the output buffer\n})",
				"//can also schedule events along the Transport\n//using the passed in Offline Transport\nTone.Offline(function(Transport){\n\tvar osc = new Tone.Oscillator().toMaster()\n\tTransport.schedule(function(time){\n\t\tosc.start(time).stop(time + 0.1)\n\t}, 1)\n\tTransport.start(0.2)\n}, 4).then(function(buffer){\n\t//do something with the output buffer\n})"
			],
			"returns": {
				"type": [
					"Promise"
				],
				"description": "The promise which is invoked with the Tone.Buffer of the recorded output."
			},
			"scope": "static",
			"name": "Offline",
			"lineno": "Tone/core/Offline.js#L34"
		},
		{
			"description": "Set the parameters at once. Either pass in an\n object mapping parameters to values, or to set a\n single parameter, by passing in a string and value.\n The last argument is an optional ramp time which \n will ramp any signal values to their destination value\n over the duration of the rampTime.",
			"params": [
				{
					"type": [
						"Object",
						"string"
					],
					"name": "params"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"name": "rampTime"
				}
			],
			"examples": [
				"//set values using an object\nfilter.set({\n\t\"frequency\" : 300,\n\t\"type\" : highpass\n});\n ",
				"filter.set(\"type\", \"highpass\");\n ",
				"//ramp to the value 220 over 3 seconds. \noscillator.set({\n\t\"frequency\" : 220\n}, 3);"
			],
			"returns": {
				"type": [
					"Tone"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "set",
			"lineno": "Tone/core/Tone.js#L73"
		},
		{
			"description": "Get the object's attributes. Given no arguments get\n will return all available object properties and their corresponding\n values. Pass in a single attribute to retrieve or an array\n of attributes. The attribute strings can also include a \".\"\n to access deeper properties.",
			"params": [
				{
					"type": [
						"Array",
						"string",
						"undefined"
					],
					"description": "the parameters to get, otherwise will return \n \t\t\t\t\t                  all available.",
					"name": "params"
				}
			],
			"examples": [
				"osc.get();\n//returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n ",
				"osc.get(\"type\");\n//returns { \"type\" : \"sine\"}",
				"//use dot notation to access deep properties\nsynth.get([\"envelope.attack\", \"envelope.release\"]);\n//returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n "
			],
			"returns": {
				"type": [
					"Object"
				]
			},
			"scope": "instance",
			"name": "get",
			"lineno": "Tone/core/Tone.js#L145"
		},
		{
			"returns": {
				"type": [
					"string"
				],
				"description": "returns the name of the class as a string"
			},
			"scope": "instance",
			"name": "toString",
			"lineno": "Tone/core/Tone.js#L210"
		},
		{
			"description": "disconnect and dispose",
			"returns": {
				"type": [
					"Tone"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Tone.js#L275"
		},
		{
			"description": "connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode",
			"params": [
				{
					"type": [
						"Tone",
						"AudioParam",
						"AudioNode"
					],
					"name": "unit"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "optionally which output to connect from",
					"name": "outputNum"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "optionally which input to connect to",
					"name": "inputNum"
				}
			],
			"returns": {
				"type": [
					"Tone"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "connect",
			"lineno": "Tone/core/Tone.js#L298"
		},
		{
			"description": "disconnect the output",
			"params": [
				{
					"type": [
						"Number",
						"AudioNode"
					],
					"description": "Either the output index to disconnect\n                                  if the output is an array, or the\n                                  node to disconnect from.",
					"name": "output"
				}
			],
			"returns": {
				"type": [
					"Tone"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "disconnect",
			"lineno": "Tone/core/Tone.js#L315"
		},
		{
			"description": "connect together all of the arguments in series",
			"params": [
				{
					"type": [
						"AudioParam",
						"Tone",
						"AudioNode"
					],
					"name": "nodes"
				}
			],
			"returns": {
				"type": [
					"Tone"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "connectSeries",
			"lineno": "Tone/core/Tone.js#L333"
		},
		{
			"description": "Connect the output of this node to the rest of the nodes in series.",
			"params": [
				{
					"type": [
						"AudioParam",
						"Tone",
						"AudioNode"
					],
					"name": "nodes"
				}
			],
			"examples": [
				"//connect a node to an effect, panVol and then to the master output\n node.chain(effect, panVol, Tone.Master);\n "
			],
			"returns": {
				"type": [
					"Tone"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "chain",
			"lineno": "Tone/core/Tone.js#L353"
		},
		{
			"description": "connect the output of this node to the rest of the nodes in parallel.",
			"params": [
				{
					"type": [
						"AudioParam",
						"Tone",
						"AudioNode"
					],
					"name": "nodes"
				}
			],
			"returns": {
				"type": [
					"Tone"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "fan",
			"lineno": "Tone/core/Tone.js#L370"
		},
		{
			"description": "If the `given` parameter is undefined, use the `fallback`. \n If both `given` and `fallback` are object literals, it will\n return a deep copy which includes all of the parameters from both \n objects. If a parameter is undefined in given, it will return\n the fallback property. \n <br><br>\n WARNING: if object is self referential, it will go into an an \n infinite recursive loop.",
			"params": [
				{
					"type": [
						"*"
					],
					"name": "given"
				},
				{
					"type": [
						"*"
					],
					"name": "fallback"
				}
			],
			"returns": {
				"type": [
					"*"
				]
			},
			"scope": "instance",
			"name": "defaultArg",
			"lineno": "Tone/core/Tone.js#L401"
		},
		{
			"description": "returns the args as an options object with given arguments\n mapped to the names provided. \n\n if the args given is an array containing only one object, it is assumed\n that that's already the options object and will just return it.",
			"params": [
				{
					"type": [
						"Array"
					],
					"description": "the 'arguments' object of the function",
					"name": "values"
				},
				{
					"type": [
						"Array"
					],
					"description": "the names of the arguments as they\n                                should appear in the options object",
					"name": "keys"
				},
				{
					"type": [
						"Object"
					],
					"optional": true,
					"description": "optional defaults to mixin to the returned \n                           options object",
					"name": "defaults"
				}
			],
			"returns": {
				"type": [
					"Object"
				],
				"description": "the options object with the names mapped to the arguments"
			},
			"scope": "instance",
			"name": "optionsObject",
			"lineno": "Tone/core/Tone.js#L431"
		},
		{
			"description": "test if the arg is undefined",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "the argument to test",
					"name": "arg"
				}
			],
			"returns": {
				"type": [
					"boolean"
				],
				"description": "true if the arg is undefined"
			},
			"scope": "instance",
			"name": "isUndef",
			"lineno": "Tone/core/Tone.js#L457"
		},
		{
			"description": "test if the arg is a function",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "the argument to test",
					"name": "arg"
				}
			],
			"returns": {
				"type": [
					"boolean"
				],
				"description": "true if the arg is a function"
			},
			"scope": "instance",
			"name": "isFunction",
			"lineno": "Tone/core/Tone.js#L467"
		},
		{
			"description": "Test if the argument is a number.",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "the argument to test",
					"name": "arg"
				}
			],
			"returns": {
				"type": [
					"boolean"
				],
				"description": "true if the arg is a number"
			},
			"scope": "instance",
			"name": "isNumber",
			"lineno": "Tone/core/Tone.js#L476"
		},
		{
			"description": "Test if the given argument is an object literal (i.e. `{}`);",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "the argument to test",
					"name": "arg"
				}
			],
			"returns": {
				"type": [
					"boolean"
				],
				"description": "true if the arg is an object literal."
			},
			"scope": "instance",
			"name": "isObject",
			"lineno": "Tone/core/Tone.js#L485"
		},
		{
			"description": "Test if the argument is a boolean.",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "the argument to test",
					"name": "arg"
				}
			],
			"returns": {
				"type": [
					"boolean"
				],
				"description": "true if the arg is a boolean"
			},
			"scope": "instance",
			"name": "isBoolean",
			"lineno": "Tone/core/Tone.js#L494"
		},
		{
			"description": "Test if the argument is an Array",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "the argument to test",
					"name": "arg"
				}
			],
			"returns": {
				"type": [
					"boolean"
				],
				"description": "true if the arg is an array"
			},
			"scope": "instance",
			"name": "isArray",
			"lineno": "Tone/core/Tone.js#L503"
		},
		{
			"description": "Test if the argument is a string.",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "the argument to test",
					"name": "arg"
				}
			],
			"returns": {
				"type": [
					"boolean"
				],
				"description": "true if the arg is a string"
			},
			"scope": "instance",
			"name": "isString",
			"lineno": "Tone/core/Tone.js#L512"
		},
		{
			"description": "An empty function.",
			"scope": "static",
			"name": "noOp",
			"lineno": "Tone/core/Tone.js#L520"
		},
		{
			"description": "Equal power gain scale. Good for cross-fading.",
			"params": [
				{
					"type": [
						"NormalRange"
					],
					"description": "(0-1)",
					"name": "percent"
				}
			],
			"returns": {
				"type": [
					"Number"
				],
				"description": "output gain (0-1)"
			},
			"scope": "instance",
			"name": "equalPowerScale",
			"lineno": "Tone/core/Tone.js#L576"
		},
		{
			"description": "Convert decibels into gain.",
			"params": [
				{
					"type": [
						"Decibels"
					],
					"name": "db"
				}
			],
			"returns": {
				"type": [
					"Number"
				]
			},
			"scope": "instance",
			"name": "dbToGain",
			"lineno": "Tone/core/Tone.js#L586"
		},
		{
			"description": "Convert gain to decibels.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "(0-1)",
					"name": "gain"
				}
			],
			"returns": {
				"type": [
					"Decibels"
				]
			},
			"scope": "instance",
			"name": "gainToDb",
			"lineno": "Tone/core/Tone.js#L595"
		},
		{
			"description": "Convert an interval (in semitones) to a frequency ratio.",
			"params": [
				{
					"type": [
						"Interval"
					],
					"description": "the number of semitones above the base note",
					"name": "interval"
				}
			],
			"examples": [
				"tone.intervalToFrequencyRatio(0); // 1\ntone.intervalToFrequencyRatio(12); // 2\ntone.intervalToFrequencyRatio(-12); // 0.5"
			],
			"returns": {
				"type": [
					"number"
				],
				"description": "the frequency ratio"
			},
			"scope": "instance",
			"name": "intervalToFrequencyRatio",
			"lineno": "Tone/core/Tone.js#L608"
		},
		{
			"description": "Return the current time of the AudioContext clock.",
			"returns": {
				"type": [
					"Number"
				],
				"description": "the currentTime from the AudioContext"
			},
			"scope": "instance",
			"name": "now",
			"lineno": "Tone/core/Tone.js#L620"
		},
		{
			"description": "Return the current time of the AudioContext clock.",
			"returns": {
				"type": [
					"Number"
				],
				"description": "the currentTime from the AudioContext"
			},
			"scope": "static",
			"name": "now",
			"lineno": "Tone/core/Tone.js#L629"
		},
		{
			"description": "have a child inherit all of Tone's (or a parent's) prototype\n to inherit the parent's properties, make sure to call \n Parent.call(this) in the child's constructor\n\n based on closure library's inherit function",
			"params": [
				{
					"type": [
						"function"
					],
					"name": "child"
				},
				{
					"type": [
						"function"
					],
					"optional": true,
					"description": "(optional) parent to inherit from\n                            if no parent is supplied, the child\n                            will inherit from Tone",
					"name": "parent"
				}
			],
			"scope": "static",
			"name": "extend",
			"lineno": "Tone/core/Tone.js#L650"
		},
		{
			"description": "Tone automatically creates a context on init, but if you are working\n with other libraries which also create an AudioContext, it can be\n useful to set your own. If you are going to set your own context, \n be sure to do it at the start of your code, before creating any objects.",
			"params": [
				{
					"type": [
						"AudioContext"
					],
					"description": "The new audio context to set",
					"name": "ctx"
				}
			],
			"scope": "static",
			"name": "setContext",
			"lineno": "Tone/core/Tone.js#L717"
		},
		{
			"description": "Convert Time into seconds.\n \n Unlike the method which it overrides, this takes into account \n transporttime and musical notation.\n\n Time : 1.40\n Notation: 4n|1m|2t\n Now Relative: +3n\n Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Seconds"
				]
			},
			"scope": "instance",
			"name": "toSeconds",
			"lineno": "Tone/type/Type.js#L175"
		},
		{
			"description": "Convert a frequency representation into a number.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"name": "freq"
				}
			],
			"returns": {
				"type": [
					"Hertz"
				],
				"description": "the frequency in hertz"
			},
			"scope": "instance",
			"name": "toFrequency",
			"lineno": "Tone/type/Type.js#L192"
		},
		{
			"description": "Convert a time representation into ticks.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Ticks"
				],
				"description": "the time in ticks"
			},
			"scope": "instance",
			"name": "toTicks",
			"lineno": "Tone/type/Type.js#L207"
		}
	],
	"loaded": [
		{
			"params": [],
			"scope": "inner",
			"name": "removeEvents",
			"lineno": "Tone/core/Buffer.js#L507"
		}
	],
	"<anonymous>": [
		{
			"scope": "inner",
			"name": "onload",
			"lineno": "Tone/core/Buffer.js#L513"
		},
		{
			"scope": "inner",
			"name": "onerror",
			"lineno": "Tone/core/Buffer.js#L516"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "applyBinary",
			"lineno": "Tone/signal/Expr.js#L64"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "applyUnary",
			"lineno": "Tone/signal/Expr.js#L70"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "getNumber",
			"lineno": "Tone/signal/Expr.js#L75"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "literalNumber",
			"lineno": "Tone/signal/Expr.js#L78"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "createBuffers",
			"lineno": "Tone/source/Noise.js#L236"
		}
	],
	"Buffers": [
		{
			"description": "True if the buffers object has a buffer by that name.",
			"params": [
				{
					"type": [
						"String",
						"Number"
					],
					"description": "The key or index of the \n                                buffer.",
					"name": "name"
				}
			],
			"returns": {
				"type": [
					"Boolean"
				]
			},
			"scope": "instance",
			"name": "has",
			"lineno": "Tone/core/Buffers.js#L58"
		},
		{
			"description": "Get a buffer by name. If an array was loaded, \n then use the array index.",
			"params": [
				{
					"type": [
						"String",
						"Number"
					],
					"description": "The key or index of the \n                                buffer.",
					"name": "name"
				}
			],
			"returns": {
				"type": [
					"Tone.Buffer"
				]
			},
			"scope": "instance",
			"name": "get",
			"lineno": "Tone/core/Buffers.js#L69"
		},
		{
			"description": "Add a buffer by name and url to the Buffers",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "A unique name to give\n                               the buffer",
					"name": "name"
				},
				{
					"type": [
						"String",
						"Tone.Buffer",
						"Audiobuffer"
					],
					"description": "Either the url of the bufer, \n                                                or a buffer which will be added\n                                                with the given name.",
					"name": "url"
				},
				{
					"type": [
						"function"
					],
					"optional": true,
					"description": "The callback to invoke \n                                when the url is loaded.",
					"name": "callback"
				}
			],
			"scope": "instance",
			"name": "add",
			"lineno": "Tone/core/Buffers.js#L117"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Buffers"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Buffers.js#L159"
		}
	],
	"Clock": [
		{
			"description": "Start the clock at the given time. Optionally pass in an offset\n of where to start the tick counter from.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The time the clock should start",
					"name": "time"
				},
				{
					"type": [
						"Ticks"
					],
					"optional": true,
					"description": "Where the tick counter starts counting from.",
					"name": "offset"
				}
			],
			"returns": {
				"type": [
					"Tone.Clock"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/core/Clock.js#L118"
		},
		{
			"description": "Stop the clock. Stopping the clock resets the tick counter to 0.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the clock should stop.",
					"name": "time"
				}
			],
			"examples": [
				"clock.stop();"
			],
			"returns": {
				"type": [
					"Tone.Clock"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/core/Clock.js#L137"
		},
		{
			"description": "Pause the clock. Pausing does not reset the tick counter.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the clock should stop.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Clock"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "pause",
			"lineno": "Tone/core/Clock.js#L150"
		},
		{
			"description": "Returns the scheduled state at the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"examples": [
				"clock.start(\"+0.1\");\nclock.getStateAtTime(\"+0.1\"); //returns \"started\""
			],
			"returns": {
				"type": [
					"String"
				],
				"description": "The name of the state input in setStateAtTime."
			},
			"scope": "instance",
			"name": "getStateAtTime",
			"lineno": "Tone/core/Clock.js#L212"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.Clock"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Clock.js#L221"
		},
		{
			"description": "Bind a callback to a specific event.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name of the event to listen for.",
					"name": "event"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke when the\n                               event is emitted",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "on",
			"lineno": "Tone/core/Emitter.js#L31",
			"inherits": "Tone.Emitter"
		},
		{
			"description": "Remove the event listener.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The event to stop listening to.",
					"name": "event"
				},
				{
					"type": [
						"function"
					],
					"optional": true,
					"description": "The callback which was bound to \n                               the event with Tone.Emitter.on.\n                               If no callback is given, all callbacks\n                               events are removed.",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "off",
			"lineno": "Tone/core/Emitter.js#L53",
			"inherits": "Tone.Emitter"
		},
		{
			"description": "Invoke all of the callbacks bound to the event\n with any arguments passed in.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name of the event.",
					"name": "event"
				},
				{
					"name": ""
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "emit",
			"lineno": "Tone/core/Emitter.js#L80",
			"inherits": "Tone.Emitter"
		}
	],
	"Context": [
		{
			"description": "The current audio context time",
			"returns": {
				"type": [
					"Number"
				]
			},
			"scope": "instance",
			"name": "now",
			"lineno": "Tone/core/Context.js#L109"
		},
		{
			"description": "Generate a looped buffer at some constant value.",
			"params": [
				{
					"type": [
						"Number"
					],
					"name": "val"
				}
			],
			"returns": {
				"type": [
					"BufferSourceNode"
				]
			},
			"scope": "instance",
			"name": "getConstant",
			"lineno": "Tone/core/Context.js#L165"
		},
		{
			"description": "Bind a callback to a specific event.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name of the event to listen for.",
					"name": "event"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke when the\n                               event is emitted",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "on",
			"lineno": "Tone/core/Emitter.js#L31",
			"inherits": "Tone.Emitter"
		},
		{
			"description": "Remove the event listener.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The event to stop listening to.",
					"name": "event"
				},
				{
					"type": [
						"function"
					],
					"optional": true,
					"description": "The callback which was bound to \n                               the event with Tone.Emitter.on.\n                               If no callback is given, all callbacks\n                               events are removed.",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "off",
			"lineno": "Tone/core/Emitter.js#L53",
			"inherits": "Tone.Emitter"
		},
		{
			"description": "Invoke all of the callbacks bound to the event\n with any arguments passed in.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name of the event.",
					"name": "event"
				},
				{
					"name": ""
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "emit",
			"lineno": "Tone/core/Emitter.js#L80",
			"inherits": "Tone.Emitter"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Emitter.js#L111",
			"inherits": "Tone.Emitter"
		}
	],
	"<anonymous>~shimConnect": [
		{
			"params": [],
			"scope": "inner",
			"name": "toneConnect",
			"lineno": "Tone/core/Context.js#L299"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "toneDisconnect",
			"lineno": "Tone/core/Context.js#L323"
		}
	],
	"Delay": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Delay"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Delay.js#L61"
		}
	],
	"Draw": [
		{
			"description": "Schedule a function at the given time to be invoked\n on the nearest animation frame.",
			"params": [
				{
					"type": [
						"function"
					],
					"description": "Callback is invoked at the given time.",
					"name": "callback"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time relative to the AudioContext time\n                             to invoke the callback.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Draw"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "schedule",
			"lineno": "Tone/core/Draw.js#L65"
		},
		{
			"description": "Cancel events scheduled after the given time",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "Time after which scheduled events will \n                         be removed from the scheduling timeline.",
					"name": "after"
				}
			],
			"returns": {
				"type": [
					"Tone.Draw"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/core/Draw.js#L83"
		}
	],
	"Emitter": [
		{
			"description": "Bind a callback to a specific event.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name of the event to listen for.",
					"name": "event"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke when the\n                               event is emitted",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "on",
			"lineno": "Tone/core/Emitter.js#L31"
		},
		{
			"description": "Remove the event listener.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The event to stop listening to.",
					"name": "event"
				},
				{
					"type": [
						"function"
					],
					"optional": true,
					"description": "The callback which was bound to \n                               the event with Tone.Emitter.on.\n                               If no callback is given, all callbacks\n                               events are removed.",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "off",
			"lineno": "Tone/core/Emitter.js#L53"
		},
		{
			"description": "Invoke all of the callbacks bound to the event\n with any arguments passed in.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name of the event.",
					"name": "event"
				},
				{
					"name": ""
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "emit",
			"lineno": "Tone/core/Emitter.js#L80"
		},
		{
			"description": "Add Emitter functions (on/off/emit) to the object",
			"params": [
				{
					"type": [
						"Object",
						"function"
					],
					"description": "The object or class to extend.",
					"name": "object"
				}
			],
			"scope": "static",
			"name": "mixin",
			"lineno": "Tone/core/Emitter.js#L97"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Emitter.js#L111"
		}
	],
	"Gain": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Gain"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Gain.js#L62"
		}
	],
	"IntervalTimeline": [
		{
			"description": "The event to add to the timeline. All events must \n have a time and duration value",
			"params": [
				{
					"type": [
						"Object"
					],
					"description": "The event to add to the timeline",
					"name": "event"
				}
			],
			"returns": {
				"type": [
					"Tone.IntervalTimeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "add",
			"lineno": "Tone/core/IntervalTimeline.js#L39"
		},
		{
			"description": "Remove an event from the timeline.",
			"params": [
				{
					"type": [
						"Object"
					],
					"description": "The event to remove from the timeline",
					"name": "event"
				}
			],
			"returns": {
				"type": [
					"Tone.IntervalTimeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "remove",
			"lineno": "Tone/core/IntervalTimeline.js#L65"
		},
		{
			"description": "Remove events whose time time is after the given time",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.IntervalTimeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/core/IntervalTimeline.js#L99"
		},
		{
			"description": "Get an event whose time and duration span the give time. Will\n return the match whose \"time\" value is closest to the given time.",
			"params": [
				{
					"type": [
						"Object"
					],
					"description": "The event to add to the timeline",
					"name": "event"
				}
			],
			"returns": {
				"type": [
					"Object"
				],
				"description": "The event which spans the desired time"
			},
			"scope": "instance",
			"name": "get",
			"lineno": "Tone/core/IntervalTimeline.js#L279"
		},
		{
			"description": "Iterate over everything in the timeline.",
			"params": [
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.IntervalTimeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEach",
			"lineno": "Tone/core/IntervalTimeline.js#L301"
		},
		{
			"description": "Iterate over everything in the array in which the given time\n overlaps with the time and duration time of the event.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to check if items are overlapping",
					"name": "time"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.IntervalTimeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEachAtTime",
			"lineno": "Tone/core/IntervalTimeline.js#L326"
		},
		{
			"description": "Iterate over everything in the array in which the time is greater\n than the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to check if items are before",
					"name": "time"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.IntervalTimeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEachAfter",
			"lineno": "Tone/core/IntervalTimeline.js#L347"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.IntervalTimeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/IntervalTimeline.js#L365"
		}
	],
	"<anonymous>~IntervalNode": [
		{
			"description": "Insert a node into the correct spot in the tree",
			"params": [
				{
					"type": [
						"IntervalNode"
					],
					"name": "node"
				}
			],
			"scope": "instance",
			"name": "insert",
			"lineno": "Tone/core/IntervalTimeline.js#L418"
		},
		{
			"description": "Search the tree for nodes which overlap \n with the given point",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The point to query",
					"name": "point"
				},
				{
					"type": [
						"Array"
					],
					"description": "The array to put the results",
					"name": "results"
				}
			],
			"scope": "instance",
			"name": "search",
			"lineno": "Tone/core/IntervalTimeline.js#L440"
		},
		{
			"description": "Search the tree for nodes which are less \n than the given point",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The point to query",
					"name": "point"
				},
				{
					"type": [
						"Array"
					],
					"description": "The array to put the results",
					"name": "results"
				}
			],
			"scope": "instance",
			"name": "searchAfter",
			"lineno": "Tone/core/IntervalTimeline.js#L471"
		},
		{
			"description": "Invoke the callback on this element and both it's branches",
			"params": [
				{
					"type": [
						"function"
					],
					"name": "callback"
				}
			],
			"scope": "instance",
			"name": "traverse",
			"lineno": "Tone/core/IntervalTimeline.js#L489"
		},
		{
			"description": "Update the height of the node",
			"scope": "instance",
			"name": "updateHeight",
			"lineno": "Tone/core/IntervalTimeline.js#L502"
		},
		{
			"description": "Update the height of the node",
			"scope": "instance",
			"name": "updateMax",
			"lineno": "Tone/core/IntervalTimeline.js#L517"
		},
		{
			"description": "The balance is how the leafs are distributed on the node",
			"returns": {
				"type": [
					"Number"
				],
				"description": "Negative numbers are balanced to the right"
			},
			"scope": "instance",
			"name": "getBalance",
			"lineno": "Tone/core/IntervalTimeline.js#L531"
		},
		{
			"returns": {
				"type": [
					"Boolean"
				],
				"description": "true if this node is the left child\n of its parent"
			},
			"scope": "instance",
			"name": "isLeftChild",
			"lineno": "Tone/core/IntervalTimeline.js#L547"
		},
		{
			"description": "null out references.",
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/IntervalTimeline.js#L590"
		}
	],
	"Listener": [
		{
			"description": "Sets the position of the listener in 3d space.",
			"params": [
				{
					"type": [
						"Number"
					],
					"name": "x"
				},
				{
					"type": [
						"Number"
					],
					"name": "y"
				},
				{
					"type": [
						"Number"
					],
					"name": "z"
				}
			],
			"returns": {
				"type": [
					"Tone.Listener"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setPosition",
			"lineno": "Tone/core/Listener.js#L98"
		},
		{
			"description": "Sets the orientation of the listener using two vectors, the forward\n vector (which direction the listener is facing) and the up vector \n (which the up direction of the listener). An up vector\n of 0, 0, 1 is equivalent to the listener standing up in the Z direction.",
			"params": [
				{
					"type": [
						"Number"
					],
					"name": "x"
				},
				{
					"type": [
						"Number"
					],
					"name": "y"
				},
				{
					"type": [
						"Number"
					],
					"name": "z"
				},
				{
					"type": [
						"Number"
					],
					"name": "upX"
				},
				{
					"type": [
						"Number"
					],
					"name": "upY"
				},
				{
					"type": [
						"Number"
					],
					"name": "upZ"
				}
			],
			"returns": {
				"type": [
					"Tone.Listener"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setOrientation",
			"lineno": "Tone/core/Listener.js#L124"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Listener"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Listener.js#L294"
		}
	],
	"Master": [
		{
			"description": "Add a master effects chain. NOTE: this will disconnect any nodes which were previously \n chained in the master effects chain.",
			"params": [
				{
					"name": ""
				}
			],
			"examples": [
				"//some overall compression to keep the levels in check\nvar masterCompressor = new Tone.Compressor({\n\t\"threshold\" : -6,\n\t\"ratio\" : 3,\n\t\"attack\" : 0.5,\n\t\"release\" : 0.1\n});\n//give a little boost to the lows\nvar lowBump = new Tone.Filter(200, \"lowshelf\");\n//route everything through the filter \n//and compressor before going to the speakers\nTone.Master.chain(lowBump, masterCompressor);"
			],
			"returns": {
				"type": [
					"Tone.Master"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "chain",
			"lineno": "Tone/core/Master.js#L97"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.Master"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Master.js#L107"
		}
	],
	"AudioNode": [
		{
			"description": "Also augment AudioNode's prototype to include toMaster\n as a convenience",
			"returns": {
				"type": [
					"AudioNode"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "toMaster",
			"lineno": "Tone/core/Master.js#L136"
		}
	],
	"OfflineContext": [
		{
			"description": "Override the now method to point to the internal clock time",
			"returns": {
				"type": [
					"Number"
				]
			},
			"scope": "instance",
			"name": "now",
			"lineno": "Tone/core/OfflineContext.js#L55"
		},
		{
			"description": "Render the output of the OfflineContext",
			"returns": {
				"type": [
					"Promise"
				]
			},
			"scope": "instance",
			"name": "render",
			"lineno": "Tone/core/OfflineContext.js#L74"
		}
	],
	"OfflineContext#_context": [
		{
			"scope": "static",
			"name": "oncomplete",
			"lineno": "Tone/core/OfflineContext.js#L84"
		}
	],
	"Param": [
		{
			"description": "Schedules a parameter value change at the given time.",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "The value to set the signal.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time when the change should occur.",
					"name": "time"
				}
			],
			"examples": [
				"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueAtTime",
			"lineno": "Tone/core/Param.js#L169"
		},
		{
			"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
			"params": [
				{
					"type": [
						"number"
					],
					"optional": true,
					"description": "(Optionally) pass the now value in.",
					"name": "now"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setRampPoint",
			"lineno": "Tone/core/Param.js#L188"
		},
		{
			"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L208"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L222"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValue",
			"lineno": "Tone/core/Param.js#L243"
		},
		{
			"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValue",
			"lineno": "Tone/core/Param.js#L264"
		},
		{
			"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"number"
					],
					"name": "timeConstant"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setTargetAtTime",
			"lineno": "Tone/core/Param.js#L279"
		},
		{
			"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
			"params": [
				{
					"type": [
						"Array"
					],
					"name": "values"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"Time"
					],
					"name": "duration"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueCurveAtTime",
			"lineno": "Tone/core/Param.js#L299"
		},
		{
			"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancelScheduledValues",
			"lineno": "Tone/core/Param.js#L314"
		},
		{
			"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time that it takes the \n                             value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
				"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "rampTo",
			"lineno": "Tone/core/Param.js#L337"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Param.js#L365"
		}
	],
	"Timeline": [
		{
			"description": "Insert an event object onto the timeline. Events must have a \"time\" attribute.",
			"params": [
				{
					"type": [
						"Object"
					],
					"description": "The event object to insert into the \n                          timeline.",
					"name": "event"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "add",
			"lineno": "Tone/core/Timeline.js#L76"
		},
		{
			"description": "Remove an event from the timeline.",
			"params": [
				{
					"type": [
						"Object"
					],
					"description": "The event object to remove from the list.",
					"name": "event"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "remove",
			"lineno": "Tone/core/Timeline.js#L100"
		},
		{
			"description": "Get the nearest event whose time is less than or equal to the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Object"
				],
				"description": "The event object set after that time."
			},
			"scope": "instance",
			"name": "get",
			"lineno": "Tone/core/Timeline.js#L117"
		},
		{
			"description": "Return the first event in the timeline without removing it",
			"returns": {
				"type": [
					"Object"
				],
				"description": "The first event object"
			},
			"scope": "instance",
			"name": "peek",
			"lineno": "Tone/core/Timeline.js#L130"
		},
		{
			"description": "Return the first event in the timeline and remove it",
			"returns": {
				"type": [
					"Object"
				],
				"description": "The first event object"
			},
			"scope": "instance",
			"name": "shift",
			"lineno": "Tone/core/Timeline.js#L138"
		},
		{
			"description": "Get the event which is scheduled after the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Object"
				],
				"description": "The event object after the given time"
			},
			"scope": "instance",
			"name": "getAfter",
			"lineno": "Tone/core/Timeline.js#L147"
		},
		{
			"description": "Get the event before the event at the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Object"
				],
				"description": "The event object before the given time"
			},
			"scope": "instance",
			"name": "getBefore",
			"lineno": "Tone/core/Timeline.js#L161"
		},
		{
			"description": "Cancel events after the given time",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/core/Timeline.js#L180"
		},
		{
			"description": "Cancel events before or equal to the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to cancel before.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancelBefore",
			"lineno": "Tone/core/Timeline.js#L214"
		},
		{
			"description": "Iterate over everything in the array",
			"params": [
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEach",
			"lineno": "Tone/core/Timeline.js#L299"
		},
		{
			"description": "Iterate over everything in the array at or before the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to check if items are before",
					"name": "time"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEachBefore",
			"lineno": "Tone/core/Timeline.js#L310"
		},
		{
			"description": "Iterate over everything in the array after the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to check if items are before",
					"name": "time"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEachAfter",
			"lineno": "Tone/core/Timeline.js#L325"
		},
		{
			"description": "Iterate over everything in the array at or after the given time. Similar to \n forEachAfter, but includes the item(s) at the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to check if items are before",
					"name": "time"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEachFrom",
			"lineno": "Tone/core/Timeline.js#L339"
		},
		{
			"description": "Iterate over everything in the array at the given time",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to check if items are before",
					"name": "time"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEachAtTime",
			"lineno": "Tone/core/Timeline.js#L356"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Timeline.js#L373"
		}
	],
	"TimelineState": [
		{
			"description": "Returns the scheduled state scheduled before or at\n the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"String"
				],
				"description": "The name of the state input in setStateAtTime."
			},
			"scope": "instance",
			"name": "getValueAtTime",
			"lineno": "Tone/core/TimelineState.js#L33"
		},
		{
			"description": "Returns the scheduled state scheduled before or at\n the given time.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name of the state to set.",
					"name": "state"
				},
				{
					"type": [
						"Number"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"scope": "instance",
			"name": "setStateAtTime",
			"lineno": "Tone/core/TimelineState.js#L48"
		},
		{
			"description": "Insert an event object onto the timeline. Events must have a \"time\" attribute.",
			"params": [
				{
					"type": [
						"Object"
					],
					"description": "The event object to insert into the \n                          timeline.",
					"name": "event"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "add",
			"lineno": "Tone/core/Timeline.js#L76",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Remove an event from the timeline.",
			"params": [
				{
					"type": [
						"Object"
					],
					"description": "The event object to remove from the list.",
					"name": "event"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "remove",
			"lineno": "Tone/core/Timeline.js#L100",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Get the nearest event whose time is less than or equal to the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Object"
				],
				"description": "The event object set after that time."
			},
			"scope": "instance",
			"name": "get",
			"lineno": "Tone/core/Timeline.js#L117",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Return the first event in the timeline without removing it",
			"returns": {
				"type": [
					"Object"
				],
				"description": "The first event object"
			},
			"scope": "instance",
			"name": "peek",
			"lineno": "Tone/core/Timeline.js#L130",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Return the first event in the timeline and remove it",
			"returns": {
				"type": [
					"Object"
				],
				"description": "The first event object"
			},
			"scope": "instance",
			"name": "shift",
			"lineno": "Tone/core/Timeline.js#L138",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Get the event which is scheduled after the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Object"
				],
				"description": "The event object after the given time"
			},
			"scope": "instance",
			"name": "getAfter",
			"lineno": "Tone/core/Timeline.js#L147",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Get the event before the event at the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Object"
				],
				"description": "The event object before the given time"
			},
			"scope": "instance",
			"name": "getBefore",
			"lineno": "Tone/core/Timeline.js#L161",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Cancel events after the given time",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to query.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/core/Timeline.js#L180",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Cancel events before or equal to the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to cancel before.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancelBefore",
			"lineno": "Tone/core/Timeline.js#L214",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Iterate over everything in the array",
			"params": [
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEach",
			"lineno": "Tone/core/Timeline.js#L299",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Iterate over everything in the array at or before the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to check if items are before",
					"name": "time"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEachBefore",
			"lineno": "Tone/core/Timeline.js#L310",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Iterate over everything in the array after the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to check if items are before",
					"name": "time"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEachAfter",
			"lineno": "Tone/core/Timeline.js#L325",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Iterate over everything in the array at or after the given time. Similar to \n forEachAfter, but includes the item(s) at the given time.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to check if items are before",
					"name": "time"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEachFrom",
			"lineno": "Tone/core/Timeline.js#L339",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Iterate over everything in the array at the given time",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time to check if items are before",
					"name": "time"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke with every item",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "forEachAtTime",
			"lineno": "Tone/core/Timeline.js#L356",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Timeline"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/core/Timeline.js#L373",
			"inherits": "Tone.Timeline"
		}
	],
	"extend": [
		{
			"params": [],
			"scope": "inner",
			"name": "TempConstructor",
			"lineno": "Tone/core/Tone.js#L654"
		}
	],
	"Transport": [
		{
			"description": "Schedule an event along the timeline.",
			"params": [
				{
					"type": [
						"function"
					],
					"description": "The callback to be invoked at the time.",
					"name": "callback"
				},
				{
					"type": [
						"TransportTime"
					],
					"description": "The time to invoke the callback at.",
					"name": "time"
				}
			],
			"examples": [
				"//trigger the callback when the Transport reaches the desired time\nTone.Transport.schedule(function(time){\n\tenvelope.triggerAttack(time);\n}, \"128i\");"
			],
			"returns": {
				"type": [
					"Number"
				],
				"description": "The id of the event which can be used for canceling the event."
			},
			"scope": "instance",
			"name": "schedule",
			"lineno": "Tone/core/Transport.js#L256"
		},
		{
			"description": "Schedule a repeated event along the timeline. The event will fire\n at the `interval` starting at the `startTime` and for the specified\n `duration`.",
			"params": [
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke.",
					"name": "callback"
				},
				{
					"type": [
						"Time"
					],
					"description": "The duration between successive\n                              callbacks.",
					"name": "interval"
				},
				{
					"type": [
						"TimelinePosition"
					],
					"optional": true,
					"description": "When along the timeline the events should\n                              start being invoked.",
					"name": "startTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "Infinity",
					"description": "How long the event should repeat.",
					"name": "duration"
				}
			],
			"examples": [
				"//a callback invoked every eighth note after the first measure\nTone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");"
			],
			"returns": {
				"type": [
					"Number"
				],
				"description": "The ID of the scheduled event. Use this to cancel\n                          the event."
			},
			"scope": "instance",
			"name": "scheduleRepeat",
			"lineno": "Tone/core/Transport.js#L286"
		},
		{
			"description": "Schedule an event that will be removed after it is invoked. \n Note that if the given time is less than the current transport time, \n the event will be invoked immediately.",
			"params": [
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke once.",
					"name": "callback"
				},
				{
					"type": [
						"TransportTime"
					],
					"description": "The time the callback should be invoked.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Number"
				],
				"description": "The ID of the scheduled event."
			},
			"scope": "instance",
			"name": "scheduleOnce",
			"lineno": "Tone/core/Transport.js#L313"
		},
		{
			"description": "Clear the passed in event id from the timeline",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The id of the event.",
					"name": "eventId"
				}
			],
			"returns": {
				"type": [
					"Tone.Transport"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "clear",
			"lineno": "Tone/core/Transport.js#L333"
		},
		{
			"description": "Remove scheduled events from the timeline after\n the given time. Repeated events will be removed\n if their startTime is after the given time",
			"params": [
				{
					"type": [
						"TransportTime"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "Clear all events after\n                         this time.",
					"name": "after"
				}
			],
			"returns": {
				"type": [
					"Tone.Transport"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/core/Transport.js#L350"
		},
		{
			"description": "Bind start/stop/pause events from the clock and emit them.",
			"scope": "instance",
			"name": "_bindClockEvents",
			"lineno": "Tone/core/Transport.js#L366"
		},
		{
			"description": "Start the transport and all sources synced to the transport.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the transport should start.",
					"name": "time"
				},
				{
					"type": [
						"TransportTime"
					],
					"optional": true,
					"description": "The timeline offset to start the transport.",
					"name": "offset"
				}
			],
			"examples": [
				"//start the transport in one second starting at beginning of the 5th measure. \nTone.Transport.start(\"+1\", \"4:0:0\");"
			],
			"returns": {
				"type": [
					"Tone.Transport"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/core/Transport.js#L403"
		},
		{
			"description": "Stop the transport and all sources synced to the transport.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the transport should stop.",
					"name": "time"
				}
			],
			"examples": [
				"Tone.Transport.stop();"
			],
			"returns": {
				"type": [
					"Tone.Transport"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/core/Transport.js#L419"
		},
		{
			"description": "Pause the transport and all sources synced to the transport.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Transport"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "pause",
			"lineno": "Tone/core/Transport.js#L429"
		},
		{
			"description": "Set the loop start and stop at the same time.",
			"params": [
				{
					"type": [
						"TransportTime"
					],
					"name": "startPosition"
				},
				{
					"type": [
						"TransportTime"
					],
					"name": "endPosition"
				}
			],
			"examples": [
				"//loop over the first measure\nTone.Transport.setLoopPoints(0, \"1m\");\nTone.Transport.loop = true;"
			],
			"returns": {
				"type": [
					"Tone.Transport"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setLoopPoints",
			"lineno": "Tone/core/Transport.js#L505"
		},
		{
			"description": "Returns the time aligned to the next subdivision\n of the Transport. If the Transport is not started,\n it will return 0.\n Note: this will not work precisely during tempo ramps.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The subdivision to quantize to",
					"name": "subdivision"
				}
			],
			"examples": [
				"Tone.Transport.start(); //the transport must be started\nTone.Transport.nextSubdivision(\"4n\");"
			],
			"returns": {
				"type": [
					"Number"
				],
				"description": "The context time of the next subdivision."
			},
			"scope": "instance",
			"name": "nextSubdivision",
			"lineno": "Tone/core/Transport.js#L701"
		},
		{
			"description": "Attaches the signal to the tempo control signal so that \n any changes in the tempo will change the signal in the same\n ratio.",
			"params": [
				{
					"type": [
						"Tone.Signal"
					],
					"name": "signal"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"description": "Optionally pass in the ratio between\n                        the two signals. Otherwise it will be computed\n                        based on their current values.",
					"name": "ratio"
				}
			],
			"returns": {
				"type": [
					"Tone.Transport"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "syncSignal",
			"lineno": "Tone/core/Transport.js#L729"
		},
		{
			"description": "Unsyncs a previously synced signal from the transport's control. \n See Tone.Transport.syncSignal.",
			"params": [
				{
					"type": [
						"Tone.Signal"
					],
					"name": "signal"
				}
			],
			"returns": {
				"type": [
					"Tone.Transport"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsyncSignal",
			"lineno": "Tone/core/Transport.js#L755"
		},
		{
			"description": "Bind a callback to a specific event.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name of the event to listen for.",
					"name": "event"
				},
				{
					"type": [
						"function"
					],
					"description": "The callback to invoke when the\n                               event is emitted",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "on",
			"lineno": "Tone/core/Emitter.js#L31",
			"inherits": "Tone.Emitter"
		},
		{
			"description": "Remove the event listener.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The event to stop listening to.",
					"name": "event"
				},
				{
					"type": [
						"function"
					],
					"optional": true,
					"description": "The callback which was bound to \n                               the event with Tone.Emitter.on.\n                               If no callback is given, all callbacks\n                               events are removed.",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "off",
			"lineno": "Tone/core/Emitter.js#L53",
			"inherits": "Tone.Emitter"
		},
		{
			"description": "Invoke all of the callbacks bound to the event\n with any arguments passed in.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name of the event.",
					"name": "event"
				},
				{
					"name": ""
				}
			],
			"returns": {
				"type": [
					"Tone.Emitter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "emit",
			"lineno": "Tone/core/Emitter.js#L80",
			"inherits": "Tone.Emitter"
		}
	],
	"AutoFilter": [
		{
			"description": "Start the effect.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the LFO will start.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.AutoFilter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/effect/AutoFilter.js#L99"
		},
		{
			"description": "Stop the effect.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the LFO will stop.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.AutoFilter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/effect/AutoFilter.js#L109"
		},
		{
			"description": "Sync the filter to the transport.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "Delay time before starting the effect after the\n                              Transport has started.",
					"name": "delay"
				}
			],
			"returns": {
				"type": [
					"Tone.AutoFilter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/effect/AutoFilter.js#L120"
		},
		{
			"description": "Unsync the filter from the transport.",
			"returns": {
				"type": [
					"Tone.AutoFilter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/effect/AutoFilter.js#L129"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.AutoFilter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/AutoFilter.js#L187"
		}
	],
	"AutoPanner": [
		{
			"description": "Start the effect.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the LFO will start.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.AutoPanner"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/effect/AutoPanner.js#L83"
		},
		{
			"description": "Stop the effect.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the LFO will stop.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.AutoPanner"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/effect/AutoPanner.js#L93"
		},
		{
			"description": "Sync the panner to the transport.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "Delay time before starting the effect after the\n                              Transport has started.",
					"name": "delay"
				}
			],
			"returns": {
				"type": [
					"Tone.AutoPanner"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/effect/AutoPanner.js#L104"
		},
		{
			"description": "Unsync the panner from the transport",
			"returns": {
				"type": [
					"Tone.AutoPanner"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/effect/AutoPanner.js#L113"
		},
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.AutoPanner"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/AutoPanner.js#L138"
		}
	],
	"AutoWah": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.AutoWah"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/AutoWah.js#L191"
		}
	],
	"BitCrusher": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.BitCrusher"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/BitCrusher.js#L86"
		}
	],
	"Chebyshev": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Chebyshev"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/Chebyshev.js#L129"
		}
	],
	"Chorus": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Chorus"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/Chorus.js#L198"
		}
	],
	"Convolver": [
		{
			"description": "Load an impulse response url as an audio buffer.\n Decodes the audio asynchronously and invokes\n the callback once the audio buffer loads.",
			"params": [
				{
					"type": [
						"string"
					],
					"description": "The url of the buffer to load.\n                     filetype support depends on the\n                     browser.",
					"name": "url"
				},
				{
					"type": [
						"function"
					],
					"optional": true,
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Promise"
				]
			},
			"scope": "instance",
			"name": "load",
			"lineno": "Tone/effect/Convolver.js#L89"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Convolver"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/Convolver.js#L102"
		}
	],
	"Distortion": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Distortion"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/Distortion.js#L98"
		}
	],
	"Effect": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Effect"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/Effect.js#L84"
		}
	],
	"FeedbackDelay": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.FeedbackDelay"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/FeedbackDelay.js#L63"
		}
	],
	"FeedbackEffect": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.FeedbackEffect"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/FeedbackEffect.js#L55"
		}
	],
	"Freeverb": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Freeverb"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/Freeverb.js#L131"
		}
	],
	"JCReverb": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.JCReverb"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/JCReverb.js#L125"
		}
	],
	"MidSideEffect": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.MidSideEffect"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/MidSideEffect.js#L76"
		}
	],
	"Phaser": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Phaser"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/Phaser.js#L180"
		}
	],
	"PingPongDelay": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.PingPongDelay"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/PingPongDelay.js#L83"
		}
	],
	"PitchShift": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.PitchShift"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/PitchShift.js#L210"
		}
	],
	"StereoEffect": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.StereoEffect"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/StereoEffect.js#L91"
		}
	],
	"StereoFeedbackEffect": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.StereoFeedbackEffect"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/StereoFeedbackEffect.js#L52"
		}
	],
	"StereoWidener": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.StereoWidener"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/StereoWidener.js#L81"
		}
	],
	"StereoXFeedbackEffect": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.StereoXFeedbackEffect"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/StereoXFeedbackEffect.js#L54"
		}
	],
	"Tremolo": [
		{
			"description": "Start the tremolo.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the tremolo begins.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Tremolo"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/effect/Tremolo.js#L106"
		},
		{
			"description": "Stop the tremolo.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the tremolo stops.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Tremolo"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/effect/Tremolo.js#L117"
		},
		{
			"description": "Sync the effect to the transport.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "Delay time before starting the effect after the\n                             Transport has started.",
					"name": "delay"
				}
			],
			"returns": {
				"type": [
					"Tone.AutoFilter"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/effect/Tremolo.js#L129"
		},
		{
			"description": "Unsync the filter from the transport",
			"returns": {
				"type": [
					"Tone.Tremolo"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/effect/Tremolo.js#L139"
		},
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Tremolo"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/Tremolo.js#L182"
		}
	],
	"Vibrato": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Vibrato"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/effect/Vibrato.js#L90"
		}
	],
	"Event": [
		{
			"description": "Start the note at the given time.",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"description": "When the note should start.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Event"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/event/Event.js#L210"
		},
		{
			"description": "Stop the Event at the given time.",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"description": "When the note should stop.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Event"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/event/Event.js#L228"
		},
		{
			"description": "Cancel all scheduled events greater than or equal to the given time",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The time after which events will be cancel.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Event"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/event/Event.js#L248"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.Event"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/event/Event.js#L397"
		}
	],
	"Loop": [
		{
			"description": "Start the loop at the specified time along the Transport's\n timeline.",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"optional": true,
					"description": "When to start the Loop.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Loop"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/event/Loop.js#L65"
		},
		{
			"description": "Stop the loop at the given time.",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"optional": true,
					"description": "When to stop the Arpeggio",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Loop"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/event/Loop.js#L75"
		},
		{
			"description": "Cancel all scheduled events greater than or equal to the given time",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The time after which events will be cancel.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Loop"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/event/Loop.js#L85"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.Loop"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/event/Loop.js#L234"
		}
	],
	"Part": [
		{
			"description": "Start the part at the given time.",
			"params": [
				{
					"type": [
						"TransportTime"
					],
					"description": "When to start the part.",
					"name": "time"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "The offset from the start of the part\n                          to begin playing at.",
					"name": "offset"
				}
			],
			"returns": {
				"type": [
					"Tone.Part"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/event/Part.js#L146"
		},
		{
			"description": "Stop the part at the given time.",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"description": "When to stop the part.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Part"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/event/Part.js#L219"
		},
		{
			"description": "Get/Set an Event's value at the given time. \n If a value is passed in and no event exists at\n the given time, one will be created with that value. \n If two events are at the same time, the first one will\n be returned.",
			"params": [
				{
					"type": [
						"TransportTime"
					],
					"description": "The time of the event to get or set.",
					"name": "time"
				},
				{
					"type": [
						"*"
					],
					"optional": true,
					"description": "If a value is passed in, the value of the\n                   event at the given time will be set to it.",
					"name": "value"
				}
			],
			"examples": [
				"part.at(\"1m\"); //returns the part at the first measure\n\npart.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n//if an event didn't exist at that time, it will be created.\n "
			],
			"returns": {
				"type": [
					"Tone.Event"
				],
				"description": "the event at the time"
			},
			"scope": "instance",
			"name": "at",
			"lineno": "Tone/event/Part.js#L245"
		},
		{
			"description": "Add a an event to the part.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The time the note should start.\n                           If an object is passed in, it should\n                           have a 'time' attribute and the rest\n                           of the object will be used as the 'value'.",
					"name": "time"
				},
				{
					"type": [
						"Tone.Event",
						"*"
					],
					"name": "value"
				}
			],
			"examples": [
				"part.add(\"1m\", \"C#+11\");"
			],
			"returns": {
				"type": [
					"Tone.Part"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "add",
			"lineno": "Tone/event/Part.js#L278"
		},
		{
			"description": "Remove an event from the part. Will recursively iterate\n into nested parts to find the event.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The time of the event",
					"name": "time"
				},
				{
					"type": [
						"*"
					],
					"description": "Optionally select only a specific event value",
					"name": "value"
				}
			],
			"returns": {
				"type": [
					"Tone.Part"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "remove",
			"lineno": "Tone/event/Part.js#L338"
		},
		{
			"description": "Remove all of the notes from the group.",
			"returns": {
				"type": [
					"Tone.Part"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "removeAll",
			"lineno": "Tone/event/Part.js#L365"
		},
		{
			"description": "Cancel scheduled state change events: i.e. \"start\" and \"stop\".",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"description": "The time after which to cancel the scheduled events.",
					"name": "after"
				}
			],
			"returns": {
				"type": [
					"Tone.Part"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/event/Part.js#L378"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.Part"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/event/Part.js#L586"
		}
	],
	"Pattern": [
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.Pattern"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/event/Pattern.js#L119"
		},
		{
			"description": "Start the loop at the specified time along the Transport's\n timeline.",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"optional": true,
					"description": "When to start the Loop.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Loop"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/event/Loop.js#L65",
			"inherits": "Tone.Loop"
		},
		{
			"description": "Stop the loop at the given time.",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"optional": true,
					"description": "When to stop the Arpeggio",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Loop"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/event/Loop.js#L75",
			"inherits": "Tone.Loop"
		},
		{
			"description": "Cancel all scheduled events greater than or equal to the given time",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The time after which events will be cancel.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Loop"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/event/Loop.js#L85",
			"inherits": "Tone.Loop"
		}
	],
	"Sequence": [
		{
			"description": "Get/Set an index of the sequence. If the index contains a subarray, \n a Tone.Sequence representing that sub-array will be returned.",
			"params": [
				{
					"type": [
						"Positive"
					],
					"description": "The index to get or set",
					"name": "index"
				},
				{
					"type": [
						"*"
					],
					"description": "Optionally pass in the value to set at the given index.",
					"name": "value"
				}
			],
			"examples": [
				"var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\nsequence.at(0)// => returns \"E4\"\n//set a value\nsequence.at(0, \"G3\");\n//get a nested sequence\nsequence.at(3).at(1)// => returns \"Bb3\""
			],
			"scope": "instance",
			"name": "at",
			"lineno": "Tone/event/Sequence.js#L97"
		},
		{
			"description": "Add an event at an index, if there's already something\n at that index, overwrite it. If `value` is an array, \n it will be parsed as a subsequence.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The index to add the event to",
					"name": "index"
				},
				{
					"type": [
						"*"
					],
					"description": "The value to add at that index",
					"name": "value"
				}
			],
			"returns": {
				"type": [
					"Tone.Sequence"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "add",
			"lineno": "Tone/event/Sequence.js#L115"
		},
		{
			"description": "Remove a value from the sequence by index",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The index of the event to remove",
					"name": "index"
				}
			],
			"returns": {
				"type": [
					"Tone.Sequence"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "remove",
			"lineno": "Tone/event/Sequence.js#L133"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Sequence"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/event/Sequence.js#L156"
		},
		{
			"description": "Start the part at the given time.",
			"params": [
				{
					"type": [
						"TransportTime"
					],
					"description": "When to start the part.",
					"name": "time"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "The offset from the start of the part\n                          to begin playing at.",
					"name": "offset"
				}
			],
			"returns": {
				"type": [
					"Tone.Part"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/event/Part.js#L146",
			"inherits": "Tone.Part"
		},
		{
			"description": "Stop the part at the given time.",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"description": "When to stop the part.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.Part"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/event/Part.js#L219",
			"inherits": "Tone.Part"
		},
		{
			"description": "Remove all of the notes from the group.",
			"returns": {
				"type": [
					"Tone.Part"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "removeAll",
			"lineno": "Tone/event/Part.js#L365",
			"inherits": "Tone.Part"
		},
		{
			"description": "Cancel scheduled state change events: i.e. \"start\" and \"stop\".",
			"params": [
				{
					"type": [
						"TimelinePosition"
					],
					"description": "The time after which to cancel the scheduled events.",
					"name": "after"
				}
			],
			"returns": {
				"type": [
					"Tone.Part"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancel",
			"lineno": "Tone/event/Part.js#L378",
			"inherits": "Tone.Part"
		}
	],
	"AMSynth": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.AMSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/AMSynth.js#L181"
		},
		{
			"description": "Trigger the attack of the note optionally with a given velocity.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should start.",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
					"name": "velocity"
				}
			],
			"examples": [
				"synth.triggerAttack(\"C4\");\n ",
				"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/Monophonic.js#L55",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Trigger the release portion of the envelope",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "If no time is given, the release happens immediatly",
					"name": "time"
				}
			],
			"examples": [
				"synth.triggerRelease();"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/instrument/Monophonic.js#L73",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to change to.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the note should be set.",
					"name": "time"
				}
			],
			"examples": [
				"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
				"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setNote",
			"lineno": "Tone/instrument/Monophonic.js#L110",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Trigger the attack and then the release after the duration.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity the note should be triggered at.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
			],
			"returns": {
				"type": [
					"Tone.Instrument"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/Instrument.js#L71",
			"inherits": "Tone.Instrument"
		}
	],
	"DuoSynth": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.DuoSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/DuoSynth.js#L182"
		},
		{
			"description": "Trigger the attack of the note optionally with a given velocity.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should start.",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
					"name": "velocity"
				}
			],
			"examples": [
				"synth.triggerAttack(\"C4\");\n ",
				"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/Monophonic.js#L55",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Trigger the release portion of the envelope",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "If no time is given, the release happens immediatly",
					"name": "time"
				}
			],
			"examples": [
				"synth.triggerRelease();"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/instrument/Monophonic.js#L73",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to change to.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the note should be set.",
					"name": "time"
				}
			],
			"examples": [
				"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
				"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setNote",
			"lineno": "Tone/instrument/Monophonic.js#L110",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Trigger the attack and then the release after the duration.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity the note should be triggered at.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
			],
			"returns": {
				"type": [
					"Tone.Instrument"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/Instrument.js#L71",
			"inherits": "Tone.Instrument"
		}
	],
	"FMSynth": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.FMSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/FMSynth.js#L187"
		},
		{
			"description": "Trigger the attack of the note optionally with a given velocity.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should start.",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
					"name": "velocity"
				}
			],
			"examples": [
				"synth.triggerAttack(\"C4\");\n ",
				"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/Monophonic.js#L55",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Trigger the release portion of the envelope",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "If no time is given, the release happens immediatly",
					"name": "time"
				}
			],
			"examples": [
				"synth.triggerRelease();"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/instrument/Monophonic.js#L73",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to change to.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the note should be set.",
					"name": "time"
				}
			],
			"examples": [
				"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
				"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setNote",
			"lineno": "Tone/instrument/Monophonic.js#L110",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Trigger the attack and then the release after the duration.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity the note should be triggered at.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
			],
			"returns": {
				"type": [
					"Tone.Instrument"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/Instrument.js#L71",
			"inherits": "Tone.Instrument"
		}
	],
	"Instrument": [
		{
			"description": "Trigger the attack and then the release after the duration.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity the note should be triggered at.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
			],
			"returns": {
				"type": [
					"Tone.Instrument"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/Instrument.js#L71"
		},
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Instrument"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/Instrument.js#L87"
		}
	],
	"MembraneSynth": [
		{
			"description": "Trigger the note at the given time with the given velocity.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "the note",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "the time, if not given is now",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "velocity defaults to 1",
					"name": "velocity"
				}
			],
			"examples": [
				"kick.triggerAttack(60);"
			],
			"returns": {
				"type": [
					"Tone.MembraneSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/MembraneSynth.js#L88"
		},
		{
			"description": "Trigger the release portion of the note.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "the time the note will release",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.MembraneSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/instrument/MembraneSynth.js#L104"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.MembraneSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/MembraneSynth.js#L113"
		},
		{
			"description": "Trigger the attack and then the release after the duration.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity the note should be triggered at.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
			],
			"returns": {
				"type": [
					"Tone.Instrument"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/Instrument.js#L71",
			"inherits": "Tone.Instrument"
		}
	],
	"MetalSynth": [
		{
			"description": "Trigger the attack.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "When the attack should be triggered.",
					"name": "time"
				},
				{
					"name": "vel"
				}
			],
			"returns": {
				"type": [
					"Tone.MetalSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/MetalSynth.js#L145"
		},
		{
			"description": "Trigger the release of the envelope.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "When the release should be triggered.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.MetalSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/instrument/MetalSynth.js#L157"
		},
		{
			"description": "Trigger the attack and release of the envelope after the given \n duration.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The duration before triggering the release",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"description": "When the attack should be triggered.",
					"name": "time"
				},
				{
					"name": "velocity"
				}
			],
			"returns": {
				"type": [
					"Tone.MetalSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/MetalSynth.js#L171"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.MetalSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/MetalSynth.js#L252"
		}
	],
	"Monophonic": [
		{
			"description": "Trigger the attack of the note optionally with a given velocity.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should start.",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
					"name": "velocity"
				}
			],
			"examples": [
				"synth.triggerAttack(\"C4\");\n ",
				"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/Monophonic.js#L55"
		},
		{
			"description": "Trigger the release portion of the envelope",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "If no time is given, the release happens immediatly",
					"name": "time"
				}
			],
			"examples": [
				"synth.triggerRelease();"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/instrument/Monophonic.js#L73"
		},
		{
			"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to change to.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the note should be set.",
					"name": "time"
				}
			],
			"examples": [
				"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
				"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setNote",
			"lineno": "Tone/instrument/Monophonic.js#L110"
		},
		{
			"description": "Trigger the attack and then the release after the duration.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity the note should be triggered at.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
			],
			"returns": {
				"type": [
					"Tone.Instrument"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/Instrument.js#L71",
			"inherits": "Tone.Instrument"
		},
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Instrument"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/Instrument.js#L87",
			"inherits": "Tone.Instrument"
		}
	],
	"MonoSynth": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.MonoSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/MonoSynth.js#L147"
		},
		{
			"description": "Trigger the attack of the note optionally with a given velocity.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should start.",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
					"name": "velocity"
				}
			],
			"examples": [
				"synth.triggerAttack(\"C4\");\n ",
				"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/Monophonic.js#L55",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Trigger the release portion of the envelope",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "If no time is given, the release happens immediatly",
					"name": "time"
				}
			],
			"examples": [
				"synth.triggerRelease();"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/instrument/Monophonic.js#L73",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to change to.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the note should be set.",
					"name": "time"
				}
			],
			"examples": [
				"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
				"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setNote",
			"lineno": "Tone/instrument/Monophonic.js#L110",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Trigger the attack and then the release after the duration.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity the note should be triggered at.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
			],
			"returns": {
				"type": [
					"Tone.Instrument"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/Instrument.js#L71",
			"inherits": "Tone.Instrument"
		}
	],
	"NoiseSynth": [
		{
			"description": "Start the attack portion of the envelopes. Unlike other \n instruments, Tone.NoiseSynth doesn't have a note.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "the time the attack should start",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "the velocity of the note (0-1)",
					"name": "velocity"
				}
			],
			"examples": [
				"noiseSynth.triggerAttack();"
			],
			"returns": {
				"type": [
					"Tone.NoiseSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/NoiseSynth.js#L75"
		},
		{
			"description": "Start the release portion of the envelopes.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "the time the release should start",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.NoiseSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/instrument/NoiseSynth.js#L86"
		},
		{
			"description": "Trigger the attack and then the release.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "the duration of the note",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "the time of the attack",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "the velocity",
					"name": "velocity"
				}
			],
			"returns": {
				"type": [
					"Tone.NoiseSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/NoiseSynth.js#L98"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.NoiseSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/NoiseSynth.js#L110"
		}
	],
	"PluckSynth": [
		{
			"description": "Trigger the note.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should be triggered.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.PluckSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/PluckSynth.js#L84"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.PluckSynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/PluckSynth.js#L98"
		},
		{
			"description": "Trigger the attack and then the release after the duration.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity the note should be triggered at.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
			],
			"returns": {
				"type": [
					"Tone.Instrument"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/Instrument.js#L71",
			"inherits": "Tone.Instrument"
		}
	],
	"PolySynth": [
		{
			"description": "Trigger the attack portion of the note",
			"params": [
				{
					"type": [
						"Frequency",
						"Array"
					],
					"description": "The notes to play. Accepts a single\n                                 Frequency or an array of frequencies.",
					"name": "notes"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The start time of the note.",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity of the note.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger a chord immediately with a velocity of 0.2\npoly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);"
			],
			"returns": {
				"type": [
					"Tone.PolySynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/PolySynth.js#L103"
		},
		{
			"description": "Trigger the attack and release after the specified duration",
			"params": [
				{
					"type": [
						"Frequency",
						"Array"
					],
					"description": "The notes to play. Accepts a single\n                                 Frequency or an array of frequencies.",
					"name": "notes"
				},
				{
					"type": [
						"Time"
					],
					"description": "the duration of the note",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "if no time is given, defaults to now",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "the velocity of the attack (0-1)",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger a chord for a duration of a half note \npoly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n ",
				"//can pass in an array of durations as well\npoly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);"
			],
			"returns": {
				"type": [
					"Tone.PolySynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/PolySynth.js#L142"
		},
		{
			"description": "Trigger the release of the note. Unlike monophonic instruments, \n a note (or array of notes) needs to be passed in as the first argument.",
			"params": [
				{
					"type": [
						"Frequency",
						"Array"
					],
					"description": "The notes to play. Accepts a single\n                                 Frequency or an array of frequencies.",
					"name": "notes"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the release will be triggered.",
					"name": "time"
				}
			],
			"examples": [
				"poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");"
			],
			"returns": {
				"type": [
					"Tone.PolySynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/instrument/PolySynth.js#L166"
		},
		{
			"description": "Set a member/attribute of the voices.",
			"params": [
				{
					"type": [
						"Object",
						"string"
					],
					"name": "params"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"name": "rampTime"
				}
			],
			"examples": [
				"poly.set({\n\t\"filter\" : {\n\t\t\"type\" : \"highpass\"\n\t},\n\t\"envelope\" : {\n\t\t\"attack\" : 0.25\n\t}\n});"
			],
			"returns": {
				"type": [
					"Tone.PolySynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "set",
			"lineno": "Tone/instrument/PolySynth.js#L201"
		},
		{
			"description": "Get the synth's attributes. Given no arguments get\n will return all available object properties and their corresponding\n values. Pass in a single attribute to retrieve or an array\n of attributes. The attribute strings can also include a \".\"\n to access deeper properties.",
			"params": [
				{
					"type": [
						"Array"
					],
					"optional": true,
					"description": "the parameters to get, otherwise will return \n \t\t\t\t\t   all available.",
					"name": "params"
				}
			],
			"scope": "instance",
			"name": "get",
			"lineno": "Tone/instrument/PolySynth.js#L217"
		},
		{
			"description": "Trigger the release portion of all the currently active voices.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the notes should be released.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.PolySynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "releaseAll",
			"lineno": "Tone/instrument/PolySynth.js#L226"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.PolySynth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/PolySynth.js#L242"
		}
	],
	"Sampler": [
		{
			"description": "Trigger the start of the sample.",
			"params": [
				{
					"type": [
						"Interval"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The amount the sample should\n                             be repitched.",
					"name": "pitch"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the sample should start",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity of the note",
					"name": "velocity"
				}
			],
			"examples": [
				"sampler.triggerAttack(0, \"+0.1\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Sampler"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/Sampler.js#L71"
		},
		{
			"description": "Start the release portion of the sample. Will stop the sample once the \n envelope has fully released.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the note should release",
					"name": "time"
				}
			],
			"examples": [
				"sampler.triggerRelease();"
			],
			"returns": {
				"type": [
					"Tone.Sampler"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/instrument/Sampler.js#L89"
		},
		{
			"description": "Trigger the attack and then the release after the duration.",
			"params": [
				{
					"type": [
						"Interval"
					],
					"description": "The interval in half-steps that the\n                                 sample should be pitch shifted.",
					"name": "interval"
				},
				{
					"type": [
						"Time"
					],
					"description": "How long the note should be held for before\n                         triggering the release.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity the note should be triggered at.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger the unpitched note for the duration of an 8th note\nsynth.triggerAttackRelease(0, \"8n\");\n "
			],
			"returns": {
				"type": [
					"Tone.Sampler"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/Sampler.js#L96"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Sampler"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/Sampler.js#L162"
		}
	],
	"Synth": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Synth"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/instrument/Synth.js#L106"
		},
		{
			"description": "Trigger the attack of the note optionally with a given velocity.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should start.",
					"name": "time"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
					"name": "velocity"
				}
			],
			"examples": [
				"synth.triggerAttack(\"C4\");\n ",
				"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttack",
			"lineno": "Tone/instrument/Monophonic.js#L55",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Trigger the release portion of the envelope",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "If no time is given, the release happens immediatly",
					"name": "time"
				}
			],
			"examples": [
				"synth.triggerRelease();"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerRelease",
			"lineno": "Tone/instrument/Monophonic.js#L73",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to change to.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "The time when the note should be set.",
					"name": "time"
				}
			],
			"examples": [
				"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
				"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
			],
			"returns": {
				"type": [
					"Tone.Monophonic"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setNote",
			"lineno": "Tone/instrument/Monophonic.js#L110",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "Trigger the attack and then the release after the duration.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The note to trigger.",
					"name": "note"
				},
				{
					"type": [
						"Time"
					],
					"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
					"name": "duration"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the note should be triggered.",
					"name": "time"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The velocity the note should be triggered at.",
					"name": "velocity"
				}
			],
			"examples": [
				"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
			],
			"returns": {
				"type": [
					"Tone.Instrument"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "triggerAttackRelease",
			"lineno": "Tone/instrument/Instrument.js#L71",
			"inherits": "Tone.Instrument"
		}
	],
	"Abs": [
		{
			"description": "dispose method",
			"returns": {
				"type": [
					"Tone.Abs"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Abs.js#L37"
		}
	],
	"Add": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Add"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Add.js#L54"
		},
		{
			"description": "Schedules a parameter value change at the given time.",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "The value to set the signal.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time when the change should occur.",
					"name": "time"
				}
			],
			"examples": [
				"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueAtTime",
			"lineno": "Tone/core/Param.js#L169",
			"inherits": "Tone.Param"
		},
		{
			"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
			"params": [
				{
					"type": [
						"number"
					],
					"optional": true,
					"description": "(Optionally) pass the now value in.",
					"name": "now"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setRampPoint",
			"lineno": "Tone/core/Param.js#L188",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L208",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L222",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValue",
			"lineno": "Tone/core/Param.js#L243",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValue",
			"lineno": "Tone/core/Param.js#L264",
			"inherits": "Tone.Param"
		},
		{
			"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"number"
					],
					"name": "timeConstant"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setTargetAtTime",
			"lineno": "Tone/core/Param.js#L279",
			"inherits": "Tone.Param"
		},
		{
			"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
			"params": [
				{
					"type": [
						"Array"
					],
					"name": "values"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"Time"
					],
					"name": "duration"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueCurveAtTime",
			"lineno": "Tone/core/Param.js#L299",
			"inherits": "Tone.Param"
		},
		{
			"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancelScheduledValues",
			"lineno": "Tone/core/Param.js#L314",
			"inherits": "Tone.Param"
		},
		{
			"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time that it takes the \n                             value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
				"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "rampTo",
			"lineno": "Tone/core/Param.js#L337",
			"inherits": "Tone.Param"
		}
	],
	"AudioToGain": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.AudioToGain"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/AudioToGain.js#L31"
		}
	],
	"EqualPowerGain": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.EqualPowerGain"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/EqualPowerGain.js#L35"
		}
	],
	"signal": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/signal/Expr.js#L96"
		}
	],
	"input": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/signal/Expr.js#L103"
		}
	],
	"mod": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/signal/Expr.js#L128"
		}
	],
	"pow": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/signal/Expr.js#L137"
		}
	],
	"a2g": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/signal/Expr.js#L146"
		}
	],
	"\"-\"": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/signal/Expr.js#L163"
		},
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L179"
		}
	],
	"Expr#_tokenize": [
		{
			"params": [],
			"scope": "inner",
			"name": "getNextToken",
			"lineno": "Tone/signal/Expr.js#L238"
		}
	],
	"Expr#_parseTree": [
		{
			"params": [],
			"scope": "inner",
			"name": "matchSyntax",
			"lineno": "Tone/signal/Expr.js#L278"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "matchGroup",
			"lineno": "Tone/signal/Expr.js#L284"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "parseExpression",
			"lineno": "Tone/signal/Expr.js#L304"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "parseUnary",
			"lineno": "Tone/signal/Expr.js#L330"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "parsePrimary",
			"lineno": "Tone/signal/Expr.js#L345"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "parseFunctionCall",
			"lineno": "Tone/signal/Expr.js#L374"
		},
		{
			"params": [],
			"scope": "inner",
			"name": "parseArgumentList",
			"lineno": "Tone/signal/Expr.js#L395"
		}
	],
	"Expr": [
		{
			"description": "clean up",
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Expr.js#L451"
		}
	],
	"GainToAudio": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.GainToAudio"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/GainToAudio.js#L31"
		}
	],
	"GreaterThan": [
		{
			"description": "dispose method",
			"returns": {
				"type": [
					"Tone.GreaterThan"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/GreaterThan.js#L47"
		},
		{
			"description": "Schedules a parameter value change at the given time.",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "The value to set the signal.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time when the change should occur.",
					"name": "time"
				}
			],
			"examples": [
				"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueAtTime",
			"lineno": "Tone/core/Param.js#L169",
			"inherits": "Tone.Param"
		},
		{
			"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
			"params": [
				{
					"type": [
						"number"
					],
					"optional": true,
					"description": "(Optionally) pass the now value in.",
					"name": "now"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setRampPoint",
			"lineno": "Tone/core/Param.js#L188",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L208",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L222",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValue",
			"lineno": "Tone/core/Param.js#L243",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValue",
			"lineno": "Tone/core/Param.js#L264",
			"inherits": "Tone.Param"
		},
		{
			"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"number"
					],
					"name": "timeConstant"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setTargetAtTime",
			"lineno": "Tone/core/Param.js#L279",
			"inherits": "Tone.Param"
		},
		{
			"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
			"params": [
				{
					"type": [
						"Array"
					],
					"name": "values"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"Time"
					],
					"name": "duration"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueCurveAtTime",
			"lineno": "Tone/core/Param.js#L299",
			"inherits": "Tone.Param"
		},
		{
			"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancelScheduledValues",
			"lineno": "Tone/core/Param.js#L314",
			"inherits": "Tone.Param"
		},
		{
			"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time that it takes the \n                             value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
				"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "rampTo",
			"lineno": "Tone/core/Param.js#L337",
			"inherits": "Tone.Param"
		}
	],
	"GreaterThanZero": [
		{
			"description": "dispose method",
			"returns": {
				"type": [
					"Tone.GreaterThanZero"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/GreaterThanZero.js#L50"
		}
	],
	"Modulo": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Modulo"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Modulo.js#L92"
		}
	],
	"Multiply": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Multiply"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Multiply.js#L54"
		},
		{
			"description": "Schedules a parameter value change at the given time.",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "The value to set the signal.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time when the change should occur.",
					"name": "time"
				}
			],
			"examples": [
				"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueAtTime",
			"lineno": "Tone/core/Param.js#L169",
			"inherits": "Tone.Param"
		},
		{
			"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
			"params": [
				{
					"type": [
						"number"
					],
					"optional": true,
					"description": "(Optionally) pass the now value in.",
					"name": "now"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setRampPoint",
			"lineno": "Tone/core/Param.js#L188",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L208",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L222",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValue",
			"lineno": "Tone/core/Param.js#L243",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValue",
			"lineno": "Tone/core/Param.js#L264",
			"inherits": "Tone.Param"
		},
		{
			"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"number"
					],
					"name": "timeConstant"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setTargetAtTime",
			"lineno": "Tone/core/Param.js#L279",
			"inherits": "Tone.Param"
		},
		{
			"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
			"params": [
				{
					"type": [
						"Array"
					],
					"name": "values"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"Time"
					],
					"name": "duration"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueCurveAtTime",
			"lineno": "Tone/core/Param.js#L299",
			"inherits": "Tone.Param"
		},
		{
			"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancelScheduledValues",
			"lineno": "Tone/core/Param.js#L314",
			"inherits": "Tone.Param"
		},
		{
			"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time that it takes the \n                             value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
				"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "rampTo",
			"lineno": "Tone/core/Param.js#L337",
			"inherits": "Tone.Param"
		}
	],
	"Negate": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Negate"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Negate.js#L30"
		}
	],
	"Normalize": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Normalize"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Normalize.js#L98"
		}
	],
	"Pow": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Pow"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Pow.js#L68"
		}
	],
	"Scale": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Scale"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Scale.js#L101"
		}
	],
	"ScaleExp": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.ScaleExp"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/ScaleExp.js#L92"
		}
	],
	"Signal": [
		{
			"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
			"params": [
				{
					"type": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					],
					"name": "node"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The output number to connect from.",
					"name": "outputNumber"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The input number to connect to.",
					"name": "inputNumber"
				}
			],
			"returns": {
				"type": [
					"Tone.SignalBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "connect",
			"lineno": "Tone/signal/Signal.js#L73"
		},
		{
			"description": "dispose and disconnect",
			"returns": {
				"type": [
					"Tone.Signal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Signal.js#L79"
		},
		{
			"description": "Schedules a parameter value change at the given time.",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "The value to set the signal.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time when the change should occur.",
					"name": "time"
				}
			],
			"examples": [
				"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueAtTime",
			"lineno": "Tone/core/Param.js#L169",
			"inherits": "Tone.Param"
		},
		{
			"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
			"params": [
				{
					"type": [
						"number"
					],
					"optional": true,
					"description": "(Optionally) pass the now value in.",
					"name": "now"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setRampPoint",
			"lineno": "Tone/core/Param.js#L188",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L208",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L222",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValue",
			"lineno": "Tone/core/Param.js#L243",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValue",
			"lineno": "Tone/core/Param.js#L264",
			"inherits": "Tone.Param"
		},
		{
			"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"number"
					],
					"name": "timeConstant"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setTargetAtTime",
			"lineno": "Tone/core/Param.js#L279",
			"inherits": "Tone.Param"
		},
		{
			"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
			"params": [
				{
					"type": [
						"Array"
					],
					"name": "values"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"Time"
					],
					"name": "duration"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueCurveAtTime",
			"lineno": "Tone/core/Param.js#L299",
			"inherits": "Tone.Param"
		},
		{
			"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancelScheduledValues",
			"lineno": "Tone/core/Param.js#L314",
			"inherits": "Tone.Param"
		},
		{
			"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time that it takes the \n                             value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
				"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "rampTo",
			"lineno": "Tone/core/Param.js#L337",
			"inherits": "Tone.Param"
		}
	],
	"SignalBase": [
		{
			"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
			"params": [
				{
					"type": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					],
					"name": "node"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The output number to connect from.",
					"name": "outputNumber"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The input number to connect to.",
					"name": "inputNumber"
				}
			],
			"returns": {
				"type": [
					"Tone.SignalBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "connect",
			"lineno": "Tone/signal/SignalBase.js#L26"
		}
	],
	"Subtract": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.SignalBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Subtract.js#L61"
		},
		{
			"description": "Schedules a parameter value change at the given time.",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "The value to set the signal.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time when the change should occur.",
					"name": "time"
				}
			],
			"examples": [
				"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueAtTime",
			"lineno": "Tone/core/Param.js#L169",
			"inherits": "Tone.Param"
		},
		{
			"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
			"params": [
				{
					"type": [
						"number"
					],
					"optional": true,
					"description": "(Optionally) pass the now value in.",
					"name": "now"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setRampPoint",
			"lineno": "Tone/core/Param.js#L188",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L208",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValueAtTime",
			"lineno": "Tone/core/Param.js#L222",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValue",
			"lineno": "Tone/core/Param.js#L243",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValue",
			"lineno": "Tone/core/Param.js#L264",
			"inherits": "Tone.Param"
		},
		{
			"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"number"
					],
					"name": "timeConstant"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setTargetAtTime",
			"lineno": "Tone/core/Param.js#L279",
			"inherits": "Tone.Param"
		},
		{
			"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
			"params": [
				{
					"type": [
						"Array"
					],
					"name": "values"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"Time"
					],
					"name": "duration"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueCurveAtTime",
			"lineno": "Tone/core/Param.js#L299",
			"inherits": "Tone.Param"
		},
		{
			"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				}
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancelScheduledValues",
			"lineno": "Tone/core/Param.js#L314",
			"inherits": "Tone.Param"
		},
		{
			"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time that it takes the \n                             value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
				"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "rampTo",
			"lineno": "Tone/core/Param.js#L337",
			"inherits": "Tone.Param"
		}
	],
	"TimelineSignal": [
		{
			"description": "Schedules a parameter value change at the given time.",
			"params": [
				{
					"type": [
						"*"
					],
					"description": "The value to set the signal.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time when the change should occur.",
					"name": "time"
				}
			],
			"examples": [
				"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
			],
			"returns": {
				"type": [
					"Tone.TimelineSignal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueAtTime",
			"lineno": "Tone/signal/TimelineSignal.js#L84"
		},
		{
			"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.TimelineSignal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValueAtTime",
			"lineno": "Tone/signal/TimelineSignal.js#L105"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "endTime"
				}
			],
			"returns": {
				"type": [
					"Tone.TimelineSignal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValueAtTime",
			"lineno": "Tone/signal/TimelineSignal.js#L125"
		},
		{
			"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"number"
					],
					"name": "timeConstant"
				}
			],
			"returns": {
				"type": [
					"Tone.TimelineSignal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setTargetAtTime",
			"lineno": "Tone/signal/TimelineSignal.js#L158"
		},
		{
			"description": "Set an array of arbitrary values starting at the given time for the given duration.",
			"params": [
				{
					"type": [
						"Float32Array"
					],
					"name": "values"
				},
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				},
				{
					"type": [
						"Time"
					],
					"name": "duration"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "If the values in the curve should be scaled by some value",
					"name": "scaling"
				}
			],
			"returns": {
				"type": [
					"Tone.TimelineSignal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setValueCurveAtTime",
			"lineno": "Tone/signal/TimelineSignal.js#L181"
		},
		{
			"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
			"params": [
				{
					"type": [
						"Time"
					],
					"name": "startTime"
				}
			],
			"returns": {
				"type": [
					"Tone.TimelineSignal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "cancelScheduledValues",
			"lineno": "Tone/signal/TimelineSignal.js#L213"
		},
		{
			"description": "Sets the computed value at the given time. This provides\n a point from which a linear or exponential curve\n can be scheduled after. Will cancel events after \n the given time and shorten the currently scheduled\n linear or exponential ramp so that it ends at `time` .\n This is to avoid discontinuities and clicks in envelopes.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "When to set the ramp point",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.TimelineSignal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setRampPoint",
			"lineno": "Tone/signal/TimelineSignal.js#L230"
		},
		{
			"description": "Do a linear ramp to the given value between the start and finish times.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The beginning anchor point to do the linear ramp",
					"name": "start"
				},
				{
					"type": [
						"Time"
					],
					"description": "The ending anchor point by which the value of\n                      the signal will equal the given value.",
					"name": "finish"
				}
			],
			"returns": {
				"type": [
					"Tone.TimelineSignal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValueBetween",
			"lineno": "Tone/signal/TimelineSignal.js#L272"
		},
		{
			"description": "Do a exponential ramp to the given value between the start and finish times.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The beginning anchor point to do the exponential ramp",
					"name": "start"
				},
				{
					"type": [
						"Time"
					],
					"description": "The ending anchor point by which the value of\n                      the signal will equal the given value.",
					"name": "finish"
				}
			],
			"returns": {
				"type": [
					"Tone.TimelineSignal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValueBetween",
			"lineno": "Tone/signal/TimelineSignal.js#L286"
		},
		{
			"description": "Get the scheduled value at the given time. This will\n return the unconverted (raw) value.",
			"params": [
				{
					"type": [
						"Number"
					],
					"description": "The time in seconds.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Number"
				],
				"description": "The scheduled value at the given time."
			},
			"scope": "instance",
			"name": "getValueAtTime",
			"lineno": "Tone/signal/TimelineSignal.js#L322"
		},
		{
			"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
			"params": [
				{
					"type": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					],
					"name": "node"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The output number to connect from.",
					"name": "outputNumber"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The input number to connect to.",
					"name": "inputNumber"
				}
			],
			"returns": {
				"type": [
					"Tone.TimelineSignal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "connect",
			"lineno": "Tone/signal/TimelineSignal.js#L365"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.TimelineSignal"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/TimelineSignal.js#L427"
		},
		{
			"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "exponentialRampToValue",
			"lineno": "Tone/core/Param.js#L243",
			"inherits": "Tone.Param"
		},
		{
			"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
			"params": [
				{
					"type": [
						"number"
					],
					"description": "The value to ramp to.",
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "the time that it takes the \n                              value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "linearRampToValue",
			"lineno": "Tone/core/Param.js#L264",
			"inherits": "Tone.Param"
		},
		{
			"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
			"params": [
				{
					"type": [
						"number"
					],
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"description": "The time that it takes the \n                             value to ramp from it's current value",
					"name": "rampTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the ramp should start.",
					"name": "startTime"
				}
			],
			"examples": [
				"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
				"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
			],
			"returns": {
				"type": [
					"Tone.Param"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "rampTo",
			"lineno": "Tone/core/Param.js#L337",
			"inherits": "Tone.Param"
		}
	],
	"WaveShaper": [
		{
			"description": "Uses a mapping function to set the value of the curve.",
			"params": [
				{
					"type": [
						"function"
					],
					"description": "The function used to define the values. \n                           The mapping function take two arguments: \n                           the first is the value at the current position \n                           which goes from -1 to 1 over the number of elements\n                           in the curve array. The second argument is the array position.",
					"name": "mapping"
				}
			],
			"examples": [
				"//map the input signal from [-1, 1] to [0, 10]\nshaper.setMap(function(val, index){\n\treturn (val + 1) * 5;\n})"
			],
			"returns": {
				"type": [
					"Tone.WaveShaper"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setMap",
			"lineno": "Tone/signal/WaveShaper.js#L71"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.WaveShaper"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/WaveShaper.js#L122"
		}
	],
	"Zero": [
		{
			"description": "clean up",
			"returns": {
				"type": [
					"Tone.Zero"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/signal/Zero.js#L27"
		}
	],
	"AMOscillator": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.AMOscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/AMOscillator.js#L201"
		},
		{
			"description": "Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n will also affect the oscillators frequency.",
			"examples": [
				"Tone.Transport.bpm.value = 120;\nosc.frequency.value = 440;\n//the ration between the bpm and the frequency will be maintained\nosc.syncFrequency();\nTone.Transport.bpm.value = 240; \n// the frequency of the oscillator is doubled to 880"
			],
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "syncFrequency",
			"lineno": "Tone/source/Oscillator.js#L164",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Unsync the oscillator's frequency from the Transport. \n See Tone.Oscillator.syncFrequency",
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsyncFrequency",
			"lineno": "Tone/source/Oscillator.js#L174",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Start the source at the specified time. If no time is given, \n start the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be started.",
					"name": "time"
				}
			],
			"examples": [
				"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/Source.js#L145",
			"inherits": "Tone.Source"
		},
		{
			"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be stopped.",
					"name": "time"
				}
			],
			"examples": [
				"source.stop(); // stops the source immediately"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/Source.js#L179",
			"inherits": "Tone.Source"
		},
		{
			"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
			"examples": [
				"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
				"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/source/Source.js#L215",
			"inherits": "Tone.Source"
		},
		{
			"description": "Unsync the source to the Transport. See Tone.Source.sync",
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/source/Source.js#L245",
			"inherits": "Tone.Source"
		}
	],
	"BufferSource": [
		{
			"description": "Start the buffer",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the player should start.",
					"name": "startTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The offset from the beginning of the sample\n                                to start at.",
					"name": "offset"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "How long the sample should play. If no duration\n                               is given, it will default to the full length \n                               of the sample (minus any offset)",
					"name": "duration"
				},
				{
					"type": [
						"Gain"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The gain to play the buffer back at.",
					"name": "gain"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "The optional fadeIn ramp time.",
					"name": "fadeInTime"
				}
			],
			"returns": {
				"type": [
					"Tone.BufferSource"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/BufferSource.js#L141"
		},
		{
			"description": "Stop the buffer. Optionally add a ramp time to fade the \n buffer out.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "The time the buffer should stop.",
					"name": "time"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "How long the gain should fade out for",
					"name": "fadeOutTime"
				}
			],
			"returns": {
				"type": [
					"Tone.BufferSource"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/BufferSource.js#L197"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.BufferSource"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/BufferSource.js#L316"
		}
	],
	"FatOscillator": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.FatOscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/FatOscillator.js#L266"
		},
		{
			"description": "Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n will also affect the oscillators frequency.",
			"examples": [
				"Tone.Transport.bpm.value = 120;\nosc.frequency.value = 440;\n//the ration between the bpm and the frequency will be maintained\nosc.syncFrequency();\nTone.Transport.bpm.value = 240; \n// the frequency of the oscillator is doubled to 880"
			],
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "syncFrequency",
			"lineno": "Tone/source/Oscillator.js#L164",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Unsync the oscillator's frequency from the Transport. \n See Tone.Oscillator.syncFrequency",
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsyncFrequency",
			"lineno": "Tone/source/Oscillator.js#L174",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Start the source at the specified time. If no time is given, \n start the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be started.",
					"name": "time"
				}
			],
			"examples": [
				"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/Source.js#L145",
			"inherits": "Tone.Source"
		},
		{
			"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be stopped.",
					"name": "time"
				}
			],
			"examples": [
				"source.stop(); // stops the source immediately"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/Source.js#L179",
			"inherits": "Tone.Source"
		},
		{
			"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
			"examples": [
				"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
				"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/source/Source.js#L215",
			"inherits": "Tone.Source"
		},
		{
			"description": "Unsync the source to the Transport. See Tone.Source.sync",
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/source/Source.js#L245",
			"inherits": "Tone.Source"
		}
	],
	"FMOscillator": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.FMOscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/FMOscillator.js#L207"
		},
		{
			"description": "Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n will also affect the oscillators frequency.",
			"examples": [
				"Tone.Transport.bpm.value = 120;\nosc.frequency.value = 440;\n//the ration between the bpm and the frequency will be maintained\nosc.syncFrequency();\nTone.Transport.bpm.value = 240; \n// the frequency of the oscillator is doubled to 880"
			],
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "syncFrequency",
			"lineno": "Tone/source/Oscillator.js#L164",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Unsync the oscillator's frequency from the Transport. \n See Tone.Oscillator.syncFrequency",
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsyncFrequency",
			"lineno": "Tone/source/Oscillator.js#L174",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Start the source at the specified time. If no time is given, \n start the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be started.",
					"name": "time"
				}
			],
			"examples": [
				"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/Source.js#L145",
			"inherits": "Tone.Source"
		},
		{
			"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be stopped.",
					"name": "time"
				}
			],
			"examples": [
				"source.stop(); // stops the source immediately"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/Source.js#L179",
			"inherits": "Tone.Source"
		},
		{
			"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
			"examples": [
				"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
				"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/source/Source.js#L215",
			"inherits": "Tone.Source"
		},
		{
			"description": "Unsync the source to the Transport. See Tone.Source.sync",
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/source/Source.js#L245",
			"inherits": "Tone.Source"
		}
	],
	"GrainPlayer": [
		{
			"description": "Play the buffer at the given startTime. Optionally add an offset\n and/or duration which will play the buffer from a position\n within the buffer for the given duration.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the player should start.",
					"name": "startTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The offset from the beginning of the sample\n                                to start at.",
					"name": "offset"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "How long the sample should play. If no duration\n                               is given, it will default to the full length \n                               of the sample (minus any offset)",
					"name": "duration"
				}
			],
			"returns": {
				"type": [
					"Tone.GrainPlayer"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/GrainPlayer.js#L114"
		},
		{
			"description": "Jump to a specific time and play it.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The offset to jump to.",
					"name": "offset"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "When to make the jump.",
					"name": "time"
				}
			],
			"returns": {},
			"scope": "instance",
			"name": "scrub",
			"lineno": "Tone/source/GrainPlayer.js#L217"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.GrainPlayer"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/GrainPlayer.js#L329"
		}
	],
	"MultiPlayer": [
		{
			"description": "Start a buffer by name. The `start` method allows a number of options\n to be passed in such as offset, interval, and gain. This is good for multi-sampled \n instruments and sound sprites where samples are repitched played back at different velocities.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name of the buffer to start.",
					"name": "bufferName"
				},
				{
					"type": [
						"Time"
					],
					"description": "When to start the buffer.",
					"name": "time"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The offset into the buffer to play from.",
					"name": "offset"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "How long to play the buffer for.",
					"name": "duration"
				},
				{
					"type": [
						"Interval"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The interval to repitch the buffer.",
					"name": "pitch"
				},
				{
					"type": [
						"Gain"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The gain to play the sample at.",
					"name": "gain"
				}
			],
			"returns": {
				"type": [
					"Tone.MultiPlayer"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/MultiPlayer.js#L133"
		},
		{
			"description": "Start a looping buffer by name. Similar to `start`, but the buffer\n is looped instead of played straight through. Can still be stopped with `stop`.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name of the buffer to start.",
					"name": "bufferName"
				},
				{
					"type": [
						"Time"
					],
					"description": "When to start the buffer.",
					"name": "time"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The offset into the buffer to play from.",
					"name": "offset"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "The start of the loop.",
					"name": "loopStart"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "The end of the loop.",
					"name": "loopEnd"
				},
				{
					"type": [
						"Interval"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The interval to repitch the buffer.",
					"name": "pitch"
				},
				{
					"type": [
						"Gain"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "The gain to play the sample at.",
					"name": "gain"
				}
			],
			"returns": {
				"type": [
					"Tone.MultiPlayer"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "startLoop",
			"lineno": "Tone/source/MultiPlayer.js#L157"
		},
		{
			"description": "Stop the first played instance of the buffer name.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The buffer to stop.",
					"name": "bufferName"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "When to stop the buffer",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.MultiPlayer"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/MultiPlayer.js#L175"
		},
		{
			"description": "Stop all currently playing buffers at the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "When to stop the buffers.",
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Tone.MultiPlayer"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stopAll",
			"lineno": "Tone/source/MultiPlayer.js#L190"
		},
		{
			"description": "Add another buffer to the available buffers.",
			"params": [
				{
					"type": [
						"String"
					],
					"description": "The name to that the buffer is refered\n                      to in start/stop methods.",
					"name": "name"
				},
				{
					"type": [
						"String",
						"Tone.Buffer"
					],
					"description": "The url of the buffer to load\n                                 or the buffer.",
					"name": "url"
				},
				{
					"type": [
						"function"
					],
					"description": "The function to invoke after the buffer is loaded.",
					"name": "callback"
				}
			],
			"scope": "instance",
			"name": "add",
			"lineno": "Tone/source/MultiPlayer.js#L209"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.MultiPlayer"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/MultiPlayer.js#L250"
		}
	],
	"Noise": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Noise"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/Noise.js#L149"
		},
		{
			"description": "Start the source at the specified time. If no time is given, \n start the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be started.",
					"name": "time"
				}
			],
			"examples": [
				"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/Source.js#L145",
			"inherits": "Tone.Source"
		},
		{
			"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be stopped.",
					"name": "time"
				}
			],
			"examples": [
				"source.stop(); // stops the source immediately"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/Source.js#L179",
			"inherits": "Tone.Source"
		},
		{
			"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
			"examples": [
				"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
				"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/source/Source.js#L215",
			"inherits": "Tone.Source"
		},
		{
			"description": "Unsync the source to the Transport. See Tone.Source.sync",
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/source/Source.js#L245",
			"inherits": "Tone.Source"
		}
	],
	"OmniOscillator": [
		{
			"description": "Set a member/attribute of the oscillator.",
			"params": [
				{
					"type": [
						"Object",
						"String"
					],
					"name": "params"
				},
				{
					"type": [
						"number"
					],
					"optional": true,
					"name": "value"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"name": "rampTime"
				}
			],
			"returns": {
				"type": [
					"Tone.OmniOscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "set",
			"lineno": "Tone/source/OmniOscillator.js#L192"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.OmniOscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/OmniOscillator.js#L390"
		},
		{
			"description": "Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n will also affect the oscillators frequency.",
			"examples": [
				"Tone.Transport.bpm.value = 120;\nosc.frequency.value = 440;\n//the ration between the bpm and the frequency will be maintained\nosc.syncFrequency();\nTone.Transport.bpm.value = 240; \n// the frequency of the oscillator is doubled to 880"
			],
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "syncFrequency",
			"lineno": "Tone/source/Oscillator.js#L164",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Unsync the oscillator's frequency from the Transport. \n See Tone.Oscillator.syncFrequency",
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsyncFrequency",
			"lineno": "Tone/source/Oscillator.js#L174",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Start the source at the specified time. If no time is given, \n start the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be started.",
					"name": "time"
				}
			],
			"examples": [
				"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/Source.js#L145",
			"inherits": "Tone.Source"
		},
		{
			"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be stopped.",
					"name": "time"
				}
			],
			"examples": [
				"source.stop(); // stops the source immediately"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/Source.js#L179",
			"inherits": "Tone.Source"
		},
		{
			"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
			"examples": [
				"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
				"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/source/Source.js#L215",
			"inherits": "Tone.Source"
		},
		{
			"description": "Unsync the source to the Transport. See Tone.Source.sync",
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/source/Source.js#L245",
			"inherits": "Tone.Source"
		}
	],
	"Oscillator": [
		{
			"description": "Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n will also affect the oscillators frequency.",
			"examples": [
				"Tone.Transport.bpm.value = 120;\nosc.frequency.value = 440;\n//the ration between the bpm and the frequency will be maintained\nosc.syncFrequency();\nTone.Transport.bpm.value = 240; \n// the frequency of the oscillator is doubled to 880"
			],
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "syncFrequency",
			"lineno": "Tone/source/Oscillator.js#L164"
		},
		{
			"description": "Unsync the oscillator's frequency from the Transport. \n See Tone.Oscillator.syncFrequency",
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsyncFrequency",
			"lineno": "Tone/source/Oscillator.js#L174"
		},
		{
			"description": "Dispose and disconnect.",
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/Oscillator.js#L363"
		},
		{
			"description": "Start the source at the specified time. If no time is given, \n start the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be started.",
					"name": "time"
				}
			],
			"examples": [
				"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/Source.js#L145",
			"inherits": "Tone.Source"
		},
		{
			"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be stopped.",
					"name": "time"
				}
			],
			"examples": [
				"source.stop(); // stops the source immediately"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/Source.js#L179",
			"inherits": "Tone.Source"
		},
		{
			"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
			"examples": [
				"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
				"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/source/Source.js#L215",
			"inherits": "Tone.Source"
		},
		{
			"description": "Unsync the source to the Transport. See Tone.Source.sync",
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/source/Source.js#L245",
			"inherits": "Tone.Source"
		}
	],
	"Player": [
		{
			"description": "Load the audio file as an audio buffer.\n Decodes the audio asynchronously and invokes\n the callback once the audio buffer loads. \n Note: this does not need to be called if a url\n was passed in to the constructor. Only use this\n if you want to manually load a new url.",
			"params": [
				{
					"type": [
						"string"
					],
					"description": "The url of the buffer to load.\n                    Filetype support depends on the\n                    browser.",
					"name": "url"
				},
				{
					"type": [
						"function"
					],
					"optional": true,
					"description": "The function to invoke once\n                              the sample is loaded.",
					"name": "callback"
				}
			],
			"returns": {
				"type": [
					"Promise"
				]
			},
			"scope": "instance",
			"name": "load",
			"lineno": "Tone/source/Player.js#L134"
		},
		{
			"description": "Play the buffer at the given startTime. Optionally add an offset\n and/or duration which will play the buffer from a position\n within the buffer for the given duration.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the player should start.",
					"name": "startTime"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": 0,
					"description": "The offset from the beginning of the sample\n                                to start at.",
					"name": "offset"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "How long the sample should play. If no duration\n                               is given, it will default to the full length \n                               of the sample (minus any offset)",
					"name": "duration"
				}
			],
			"returns": {
				"type": [
					"Tone.Player"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/Player.js#L150"
		},
		{
			"description": "Seek to a specific time in the player's buffer. If the \n source is no longer playing at that time, it will stop.\n If you seek to a time that",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The time to seek to.",
					"name": "offset"
				},
				{
					"type": [
						"Time"
					],
					"optional": true,
					"description": "The time for the seek event to occur.",
					"name": "time"
				}
			],
			"examples": [
				"source.start(0.2);\nsource.stop(0.4);"
			],
			"returns": {
				"type": [
					"Tone.Player"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "seek",
			"lineno": "Tone/source/Player.js#L250"
		},
		{
			"description": "Set the loop start and end. Will only loop if loop is \n set to true.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The loop end time",
					"name": "loopStart"
				},
				{
					"type": [
						"Time"
					],
					"description": "The loop end time",
					"name": "loopEnd"
				}
			],
			"examples": [
				"//loop 0.1 seconds of the file. \nplayer.setLoopPoints(0.2, 0.3);\nplayer.loop = true;"
			],
			"returns": {
				"type": [
					"Tone.Player"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "setLoopPoints",
			"lineno": "Tone/source/Player.js#L273"
		},
		{
			"description": "Dispose and disconnect.",
			"returns": {
				"type": [
					"Tone.Player"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/Player.js#L386"
		},
		{
			"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be stopped.",
					"name": "time"
				}
			],
			"examples": [
				"source.stop(); // stops the source immediately"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/Source.js#L179",
			"inherits": "Tone.Source"
		},
		{
			"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
			"examples": [
				"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
				"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/source/Source.js#L215",
			"inherits": "Tone.Source"
		},
		{
			"description": "Unsync the source to the Transport. See Tone.Source.sync",
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/source/Source.js#L245",
			"inherits": "Tone.Source"
		}
	],
	"PulseOscillator": [
		{
			"description": "Clean up method.",
			"returns": {
				"type": [
					"Tone.PulseOscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/PulseOscillator.js#L169"
		},
		{
			"description": "Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n will also affect the oscillators frequency.",
			"examples": [
				"Tone.Transport.bpm.value = 120;\nosc.frequency.value = 440;\n//the ration between the bpm and the frequency will be maintained\nosc.syncFrequency();\nTone.Transport.bpm.value = 240; \n// the frequency of the oscillator is doubled to 880"
			],
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "syncFrequency",
			"lineno": "Tone/source/Oscillator.js#L164",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Unsync the oscillator's frequency from the Transport. \n See Tone.Oscillator.syncFrequency",
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsyncFrequency",
			"lineno": "Tone/source/Oscillator.js#L174",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Start the source at the specified time. If no time is given, \n start the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be started.",
					"name": "time"
				}
			],
			"examples": [
				"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/Source.js#L145",
			"inherits": "Tone.Source"
		},
		{
			"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be stopped.",
					"name": "time"
				}
			],
			"examples": [
				"source.stop(); // stops the source immediately"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/Source.js#L179",
			"inherits": "Tone.Source"
		},
		{
			"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
			"examples": [
				"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
				"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/source/Source.js#L215",
			"inherits": "Tone.Source"
		},
		{
			"description": "Unsync the source to the Transport. See Tone.Source.sync",
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/source/Source.js#L245",
			"inherits": "Tone.Source"
		}
	],
	"PWMOscillator": [
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.PWMOscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/PWMOscillator.js#L160"
		},
		{
			"description": "Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n will also affect the oscillators frequency.",
			"examples": [
				"Tone.Transport.bpm.value = 120;\nosc.frequency.value = 440;\n//the ration between the bpm and the frequency will be maintained\nosc.syncFrequency();\nTone.Transport.bpm.value = 240; \n// the frequency of the oscillator is doubled to 880"
			],
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "syncFrequency",
			"lineno": "Tone/source/Oscillator.js#L164",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Unsync the oscillator's frequency from the Transport. \n See Tone.Oscillator.syncFrequency",
			"returns": {
				"type": [
					"Tone.Oscillator"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsyncFrequency",
			"lineno": "Tone/source/Oscillator.js#L174",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "Start the source at the specified time. If no time is given, \n start the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be started.",
					"name": "time"
				}
			],
			"examples": [
				"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/Source.js#L145",
			"inherits": "Tone.Source"
		},
		{
			"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be stopped.",
					"name": "time"
				}
			],
			"examples": [
				"source.stop(); // stops the source immediately"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/Source.js#L179",
			"inherits": "Tone.Source"
		},
		{
			"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
			"examples": [
				"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
				"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/source/Source.js#L215",
			"inherits": "Tone.Source"
		},
		{
			"description": "Unsync the source to the Transport. See Tone.Source.sync",
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/source/Source.js#L245",
			"inherits": "Tone.Source"
		}
	],
	"Source": [
		{
			"description": "Start the source at the specified time. If no time is given, \n start the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be started.",
					"name": "time"
				}
			],
			"examples": [
				"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "start",
			"lineno": "Tone/source/Source.js#L145"
		},
		{
			"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
			"params": [
				{
					"type": [
						"Time"
					],
					"optional": true,
					"defaultvalue": "now",
					"description": "When the source should be stopped.",
					"name": "time"
				}
			],
			"examples": [
				"source.stop(); // stops the source immediately"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "stop",
			"lineno": "Tone/source/Source.js#L179"
		},
		{
			"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
			"examples": [
				"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
				"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
			],
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sync",
			"lineno": "Tone/source/Source.js#L215"
		},
		{
			"description": "Unsync the source to the Transport. See Tone.Source.sync",
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "unsync",
			"lineno": "Tone/source/Source.js#L245"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.Source"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/Source.js#L262"
		}
	],
	"UserMedia": [
		{
			"description": "Open the media stream. If a string is passed in, it is assumed\n to be the label or id of the stream, if a number is passed in,\n it is the input number of the stream.",
			"params": [
				{
					"type": [
						"String",
						"Number"
					],
					"optional": true,
					"defaultvalue": "\"default\"",
					"description": "The label or id of the audio input media device. \n                                               With no argument, the default stream is opened.",
					"name": "labelOrId"
				}
			],
			"returns": {
				"type": [
					"Promise"
				],
				"description": "The promise is resolved when the stream is open."
			},
			"scope": "instance",
			"name": "open",
			"lineno": "Tone/source/UserMedia.js#L91"
		},
		{
			"description": "Close the media stream",
			"returns": {
				"type": [
					"Tone.UserMedia"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "close",
			"lineno": "Tone/source/UserMedia.js#L137"
		},
		{
			"description": "Returns a promise which resolves with the list of audio input devices available.",
			"examples": [
				"extInput.enumerateDevices().then(function(devices){\n\tconsole.log(devices)\n})"
			],
			"returns": {
				"type": [
					"Promise"
				],
				"description": "The promise that is resolved with the devices"
			},
			"scope": "instance",
			"name": "enumerateDevices",
			"lineno": "Tone/source/UserMedia.js#L159"
		},
		{
			"description": "Clean up.",
			"returns": {
				"type": [
					"Tone.UserMedia"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/source/UserMedia.js#L257"
		}
	],
	"midi": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/Frequency.js#L43"
		}
	],
	"note": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/Frequency.js#L55"
		}
	],
	"tr": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/Frequency.js#L69"
		},
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L129"
		}
	],
	"Frequency": [
		{
			"description": "Transposes the frequency by the given number of semitones.",
			"params": [
				{
					"type": [
						"Interval"
					],
					"name": "interval"
				}
			],
			"examples": [
				"Tone.Frequency(\"A4\").transpose(3); //\"C5\""
			],
			"returns": {
				"type": [
					"Tone.Frequency"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "transpose",
			"lineno": "Tone/type/Frequency.js#L95"
		},
		{
			"description": "Takes an array of semitone intervals and returns\n an array of frequencies transposed by those intervals.",
			"params": [
				{
					"type": [
						"Array"
					],
					"name": "intervals"
				}
			],
			"examples": [
				"Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]"
			],
			"returns": {
				"type": [
					"Tone.Frequency"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "harmonize",
			"lineno": "Tone/type/Frequency.js#L111"
		},
		{
			"description": "Return the value of the frequency as a MIDI note",
			"examples": [
				"Tone.Frequency(\"C4\").toMidi(); //60"
			],
			"returns": {
				"type": [
					"MIDI"
				]
			},
			"scope": "instance",
			"name": "toMidi",
			"lineno": "Tone/type/Frequency.js#L133"
		},
		{
			"description": "Return the value of the frequency in Scientific Pitch Notation",
			"examples": [
				"Tone.Frequency(69, \"midi\").toNote(); //\"A4\""
			],
			"returns": {
				"type": [
					"Note"
				]
			},
			"scope": "instance",
			"name": "toNote",
			"lineno": "Tone/type/Frequency.js#L143"
		},
		{
			"description": "Return the duration of one cycle in seconds.",
			"returns": {
				"type": [
					"Seconds"
				]
			},
			"scope": "instance",
			"name": "toSeconds",
			"lineno": "Tone/type/Frequency.js#L159"
		},
		{
			"description": "Return the value in Hertz",
			"returns": {
				"type": [
					"Frequency"
				]
			},
			"scope": "instance",
			"name": "toFrequency",
			"lineno": "Tone/type/Frequency.js#L167"
		},
		{
			"description": "Return the duration of one cycle in ticks",
			"returns": {
				"type": [
					"Ticks"
				]
			},
			"scope": "instance",
			"name": "toTicks",
			"lineno": "Tone/type/Frequency.js#L175"
		},
		{
			"description": "Convert a MIDI note to frequency value.",
			"params": [
				{
					"type": [
						"MIDI"
					],
					"description": "The midi number to convert.",
					"name": "midi"
				}
			],
			"examples": [
				"tone.midiToFrequency(69); // returns 440"
			],
			"returns": {
				"type": [
					"Frequency"
				],
				"description": "the corresponding frequency value"
			},
			"scope": "instance",
			"name": "midiToFrequency",
			"lineno": "Tone/type/Frequency.js#L270"
		},
		{
			"description": "Convert a frequency value to a MIDI note.",
			"params": [
				{
					"type": [
						"Frequency"
					],
					"description": "The value to frequency value to convert.",
					"name": "frequency"
				}
			],
			"examples": [
				"tone.midiToFrequency(440); // returns 69"
			],
			"returns": {
				"type": [
					"MIDI"
				]
			},
			"scope": "instance",
			"name": "frequencyToMidi",
			"lineno": "Tone/type/Frequency.js#L281"
		},
		{
			"description": "Repalce the current time value with the value\n given by the expression string.",
			"params": [
				{
					"type": [
						"String"
					],
					"name": "exprString"
				}
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "set",
			"lineno": "Tone/type/TimeBase.js#L56",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Return a clone of the TimeBase object.",
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "The new cloned Tone.TimeBase"
			},
			"scope": "instance",
			"name": "clone",
			"lineno": "Tone/type/TimeBase.js#L65",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Copies the value of time to this Time",
			"params": [
				{
					"type": [
						"Tone.TimeBase"
					],
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"TimeBase"
				]
			},
			"scope": "instance",
			"name": "copy",
			"lineno": "Tone/type/TimeBase.js#L76",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Add to the current value.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to add",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "add",
			"lineno": "Tone/type/TimeBase.js#L495",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Subtract the value from the current time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to subtract",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sub",
			"lineno": "Tone/type/TimeBase.js#L507",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Multiply the current value by the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to multiply",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "mult",
			"lineno": "Tone/type/TimeBase.js#L519",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Divide the current value by the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to divide by",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").div(2); //\"1m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "div",
			"lineno": "Tone/type/TimeBase.js#L531",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Evaluate the time value. Returns the time\n in seconds.",
			"returns": {
				"type": [
					"Seconds"
				]
			},
			"scope": "instance",
			"name": "valueOf",
			"lineno": "Tone/type/TimeBase.js#L540",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/type/TimeBase.js#L548",
			"inherits": "Tone.TimeBase"
		}
	],
	"quantize": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/Time.js#L50"
		},
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TransportTime.js#L37"
		}
	],
	"now": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/Time.js#L63"
		}
	],
	"Time": [
		{
			"description": "Quantize the time by the given subdivision. Optionally add a\n percentage which will move the time value towards the ideal\n quantized value by that percentage.",
			"params": [
				{
					"type": [
						"Number",
						"Time"
					],
					"description": "The subdivision to quantize to",
					"name": "val"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "Move the time value\n                                  towards the quantized value by\n                                  a percentage.",
					"name": "percent"
				}
			],
			"examples": [
				"Tone.Time(21).quantize(2) //returns 22\nTone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55"
			],
			"returns": {
				"type": [
					"Tone.Time"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "quantize",
			"lineno": "Tone/type/Time.js#L82"
		},
		{
			"description": "Adds the clock time to the time expression at the \n moment of evaluation.",
			"returns": {
				"type": [
					"Tone.Time"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "addNow",
			"lineno": "Tone/type/Time.js#L100"
		},
		{
			"description": "Copies the value of time to this Time",
			"params": [
				{
					"type": [
						"Tone.Time"
					],
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Time"
				]
			},
			"scope": "instance",
			"name": "copy",
			"lineno": "Tone/type/Time.js#L121"
		},
		{
			"description": "Convert a Time to Notation. Values will be thresholded to the nearest 128th note.",
			"examples": [
				"//if the Transport is at 120bpm:\nTone.Time(2).toNotation();//returns \"1m\""
			],
			"returns": {
				"type": [
					"Notation"
				]
			},
			"scope": "instance",
			"name": "toNotation",
			"lineno": "Tone/type/Time.js#L136"
		},
		{
			"description": "Return the time encoded as Bars:Beats:Sixteenths.",
			"returns": {
				"type": [
					"BarsBeatsSixteenths"
				]
			},
			"scope": "instance",
			"name": "toBarsBeatsSixteenths",
			"lineno": "Tone/type/Time.js#L213"
		},
		{
			"description": "Return the time in ticks.",
			"returns": {
				"type": [
					"Ticks"
				]
			},
			"scope": "instance",
			"name": "toTicks",
			"lineno": "Tone/type/Time.js#L231"
		},
		{
			"description": "Return the time in samples",
			"returns": {
				"type": [
					"Samples"
				]
			},
			"scope": "instance",
			"name": "toSamples",
			"lineno": "Tone/type/Time.js#L241"
		},
		{
			"description": "Return the time as a frequency value",
			"examples": [
				"Tone.Time(2).toFrequency(); //0.5"
			],
			"returns": {
				"type": [
					"Frequency"
				]
			},
			"scope": "instance",
			"name": "toFrequency",
			"lineno": "Tone/type/Time.js#L251"
		},
		{
			"description": "Return the time in seconds.",
			"returns": {
				"type": [
					"Seconds"
				]
			},
			"scope": "instance",
			"name": "toSeconds",
			"lineno": "Tone/type/Time.js#L259"
		},
		{
			"description": "Return the time in milliseconds.",
			"returns": {
				"type": [
					"Milliseconds"
				]
			},
			"scope": "instance",
			"name": "toMilliseconds",
			"lineno": "Tone/type/Time.js#L267"
		},
		{
			"description": "Return the time in seconds.",
			"returns": {
				"type": [
					"Seconds"
				]
			},
			"scope": "instance",
			"name": "valueOf",
			"lineno": "Tone/type/Time.js#L275"
		},
		{
			"description": "Repalce the current time value with the value\n given by the expression string.",
			"params": [
				{
					"type": [
						"String"
					],
					"name": "exprString"
				}
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "set",
			"lineno": "Tone/type/TimeBase.js#L56",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Return a clone of the TimeBase object.",
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "The new cloned Tone.TimeBase"
			},
			"scope": "instance",
			"name": "clone",
			"lineno": "Tone/type/TimeBase.js#L65",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Add to the current value.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to add",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "add",
			"lineno": "Tone/type/TimeBase.js#L495",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Subtract the value from the current time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to subtract",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sub",
			"lineno": "Tone/type/TimeBase.js#L507",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Multiply the current value by the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to multiply",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "mult",
			"lineno": "Tone/type/TimeBase.js#L519",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Divide the current value by the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to divide by",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").div(2); //\"1m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "div",
			"lineno": "Tone/type/TimeBase.js#L531",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/type/TimeBase.js#L548",
			"inherits": "Tone.TimeBase"
		}
	],
	"TimeBase": [
		{
			"description": "Repalce the current time value with the value\n given by the expression string.",
			"params": [
				{
					"type": [
						"String"
					],
					"name": "exprString"
				}
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "set",
			"lineno": "Tone/type/TimeBase.js#L56"
		},
		{
			"description": "Return a clone of the TimeBase object.",
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "The new cloned Tone.TimeBase"
			},
			"scope": "instance",
			"name": "clone",
			"lineno": "Tone/type/TimeBase.js#L65"
		},
		{
			"description": "Copies the value of time to this Time",
			"params": [
				{
					"type": [
						"Tone.TimeBase"
					],
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"TimeBase"
				]
			},
			"scope": "instance",
			"name": "copy",
			"lineno": "Tone/type/TimeBase.js#L76"
		},
		{
			"description": "Add to the current value.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to add",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "add",
			"lineno": "Tone/type/TimeBase.js#L495"
		},
		{
			"description": "Subtract the value from the current time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to subtract",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sub",
			"lineno": "Tone/type/TimeBase.js#L507"
		},
		{
			"description": "Multiply the current value by the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to multiply",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "mult",
			"lineno": "Tone/type/TimeBase.js#L519"
		},
		{
			"description": "Divide the current value by the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to divide by",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").div(2); //\"1m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "div",
			"lineno": "Tone/type/TimeBase.js#L531"
		},
		{
			"description": "Evaluate the time value. Returns the time\n in seconds.",
			"returns": {
				"type": [
					"Seconds"
				]
			},
			"scope": "instance",
			"name": "valueOf",
			"lineno": "Tone/type/TimeBase.js#L540"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/type/TimeBase.js#L548"
		}
	],
	"n": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L93"
		}
	],
	"t": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L104"
		}
	],
	"m": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L111"
		}
	],
	"i": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L117"
		}
	],
	"hz": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L123"
		}
	],
	"s": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L145"
		}
	],
	"samples": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L151"
		}
	],
	"default": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L157"
		}
	],
	"\"+\"": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L172"
		}
	],
	"\"*\"": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L186"
		}
	],
	"\"/\"": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L193"
		}
	],
	"neg": [
		{
			"scope": "static",
			"name": "method",
			"lineno": "Tone/type/TimeBase.js#L207"
		}
	],
	"TimeBase#_tokenize": [
		{
			"params": [],
			"scope": "inner",
			"name": "getNextToken",
			"lineno": "Tone/type/TimeBase.js#L244"
		}
	],
	"TransportTime": [
		{
			"description": "Evaluate the time expression. Returns values in ticks",
			"returns": {
				"type": [
					"Ticks"
				]
			},
			"scope": "instance",
			"name": "valueOf",
			"lineno": "Tone/type/TransportTime.js#L60"
		},
		{
			"description": "Return the time in ticks.",
			"returns": {
				"type": [
					"Ticks"
				]
			},
			"scope": "instance",
			"name": "toTicks",
			"lineno": "Tone/type/TransportTime.js#L69"
		},
		{
			"description": "Return the time in seconds.",
			"returns": {
				"type": [
					"Seconds"
				]
			},
			"scope": "instance",
			"name": "toSeconds",
			"lineno": "Tone/type/TransportTime.js#L77"
		},
		{
			"description": "Return the time as a frequency value",
			"returns": {
				"type": [
					"Frequency"
				]
			},
			"scope": "instance",
			"name": "toFrequency",
			"lineno": "Tone/type/TransportTime.js#L86"
		},
		{
			"description": "Quantize the time by the given subdivision. Optionally add a\n percentage which will move the time value towards the ideal\n quantized value by that percentage.",
			"params": [
				{
					"type": [
						"Number",
						"Time"
					],
					"description": "The subdivision to quantize to",
					"name": "val"
				},
				{
					"type": [
						"NormalRange"
					],
					"optional": true,
					"defaultvalue": 1,
					"description": "Move the time value\n                                  towards the quantized value by\n                                  a percentage.",
					"name": "percent"
				}
			],
			"examples": [
				"Tone.Time(21).quantize(2) //returns 22\nTone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55"
			],
			"returns": {
				"type": [
					"Tone.Time"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "quantize",
			"lineno": "Tone/type/Time.js#L82",
			"inherits": "Tone.Time"
		},
		{
			"description": "Adds the clock time to the time expression at the \n moment of evaluation.",
			"returns": {
				"type": [
					"Tone.Time"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "addNow",
			"lineno": "Tone/type/Time.js#L100",
			"inherits": "Tone.Time"
		},
		{
			"description": "Copies the value of time to this Time",
			"params": [
				{
					"type": [
						"Tone.Time"
					],
					"name": "time"
				}
			],
			"returns": {
				"type": [
					"Time"
				]
			},
			"scope": "instance",
			"name": "copy",
			"lineno": "Tone/type/Time.js#L121",
			"inherits": "Tone.Time"
		},
		{
			"description": "Convert a Time to Notation. Values will be thresholded to the nearest 128th note.",
			"examples": [
				"//if the Transport is at 120bpm:\nTone.Time(2).toNotation();//returns \"1m\""
			],
			"returns": {
				"type": [
					"Notation"
				]
			},
			"scope": "instance",
			"name": "toNotation",
			"lineno": "Tone/type/Time.js#L136",
			"inherits": "Tone.Time"
		},
		{
			"description": "Return the time encoded as Bars:Beats:Sixteenths.",
			"returns": {
				"type": [
					"BarsBeatsSixteenths"
				]
			},
			"scope": "instance",
			"name": "toBarsBeatsSixteenths",
			"lineno": "Tone/type/Time.js#L213",
			"inherits": "Tone.Time"
		},
		{
			"description": "Return the time in samples",
			"returns": {
				"type": [
					"Samples"
				]
			},
			"scope": "instance",
			"name": "toSamples",
			"lineno": "Tone/type/Time.js#L241",
			"inherits": "Tone.Time"
		},
		{
			"description": "Return the time in milliseconds.",
			"returns": {
				"type": [
					"Milliseconds"
				]
			},
			"scope": "instance",
			"name": "toMilliseconds",
			"lineno": "Tone/type/Time.js#L267",
			"inherits": "Tone.Time"
		},
		{
			"description": "Repalce the current time value with the value\n given by the expression string.",
			"params": [
				{
					"type": [
						"String"
					],
					"name": "exprString"
				}
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "set",
			"lineno": "Tone/type/TimeBase.js#L56",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Return a clone of the TimeBase object.",
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "The new cloned Tone.TimeBase"
			},
			"scope": "instance",
			"name": "clone",
			"lineno": "Tone/type/TimeBase.js#L65",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Add to the current value.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to add",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "add",
			"lineno": "Tone/type/TimeBase.js#L495",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Subtract the value from the current time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to subtract",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "sub",
			"lineno": "Tone/type/TimeBase.js#L507",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Multiply the current value by the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to multiply",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "mult",
			"lineno": "Tone/type/TimeBase.js#L519",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Divide the current value by the given time.",
			"params": [
				{
					"type": [
						"Time"
					],
					"description": "The value to divide by",
					"name": "val"
				},
				{
					"type": [
						"String"
					],
					"optional": true,
					"description": "Optional units to use with the value.",
					"name": "units"
				}
			],
			"examples": [
				"Tone.TimeBase(\"2m\").div(2); //\"1m\""
			],
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "div",
			"lineno": "Tone/type/TimeBase.js#L531",
			"inherits": "Tone.TimeBase"
		},
		{
			"description": "Clean up",
			"returns": {
				"type": [
					"Tone.TimeBase"
				],
				"description": "this"
			},
			"scope": "instance",
			"name": "dispose",
			"lineno": "Tone/type/TimeBase.js#L548",
			"inherits": "Tone.TimeBase"
		}
	]
}