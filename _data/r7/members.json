{
	"Analyser": [
		{
			"description": "The size of analysis. This must be a power of two in the range 32 to 32768.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "size",
			"lineno": "Tone/component/Analyser.js#L123"
		},
		{
			"description": "The return type of Tone.Analyser.analyse(), either \"byte\" or \"float\". \n When the type is set to \"byte\" the range of values returned in the array\n are between 0-255. \"float\" values are between \n [-1, 1] when the type is set to \"waveform\" and between \n [minDecibels,maxDecibels] when the type is \"fft\".",
			"type": [
				"String"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/component/Analyser.js#L139"
		},
		{
			"description": "The analysis function returned by Tone.Analyser.analyse(), either \"fft\" or \"waveform\".",
			"type": [
				"String"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/component/Analyser.js#L165"
		},
		{
			"description": "0 represents no time averaging with the last analysis frame.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "smoothing",
			"lineno": "Tone/component/Analyser.js#L183"
		},
		{
			"description": "The smallest decibel value which is analysed by the FFT.",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "minDecibels",
			"lineno": "Tone/component/Analyser.js#L198"
		},
		{
			"description": "The largest decibel value which is analysed by the FFT.",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "maxDecibels",
			"lineno": "Tone/component/Analyser.js#L213"
		}
	],
	"Compressor": [
		{
			"description": "the threshold vaue",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "threshold",
			"lineno": "Tone/component/Compressor.js#L35",
			"signal": true
		},
		{
			"description": "The attack parameter",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "attack",
			"lineno": "Tone/component/Compressor.js#L42",
			"signal": true
		},
		{
			"description": "The release parameter",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "release",
			"lineno": "Tone/component/Compressor.js#L49",
			"signal": true
		},
		{
			"description": "The knee parameter",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "knee",
			"lineno": "Tone/component/Compressor.js#L56",
			"signal": true
		},
		{
			"description": "The ratio value",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "ratio",
			"lineno": "Tone/component/Compressor.js#L63",
			"signal": true
		}
	],
	"CrossFade": [
		{
			"description": "Alias for <code>input[0]</code>.",
			"type": [
				"GainNode"
			],
			"scope": "instance",
			"name": "a",
			"lineno": "Tone/component/CrossFade.js#L35"
		},
		{
			"description": "Alias for <code>input[1]</code>.",
			"type": [
				"GainNode"
			],
			"scope": "instance",
			"name": "b",
			"lineno": "Tone/component/CrossFade.js#L41"
		},
		{
			"description": "The mix between the two inputs. A fade value of 0\n\twill output 100% <code>input[0]</code> and \n\ta value of 1 will output 100% <code>input[1]</code>.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "fade",
			"lineno": "Tone/component/CrossFade.js#L50",
			"signal": true
		}
	],
	"Envelope": [
		{
			"description": "When triggerAttack is called, the attack time is the amount of\n time it takes for the envelope to reach it's maximum value.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "attack",
			"lineno": "Tone/component/Envelope.js#L42"
		},
		{
			"description": "After the attack portion of the envelope, the value will fall\n over the duration of the decay time to it's sustain value.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "decay",
			"lineno": "Tone/component/Envelope.js#L49"
		},
		{
			"description": "The sustain value is the value \n\twhich the envelope rests at after triggerAttack is\n\tcalled, but before triggerRelease is invoked.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "sustain",
			"lineno": "Tone/component/Envelope.js#L57"
		},
		{
			"description": "After triggerRelease is called, the envelope's\n value will fall to it's miminum value over the\n duration of the release time.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "release",
			"lineno": "Tone/component/Envelope.js#L65"
		},
		{
			"description": "Read the current value of the envelope. Useful for \nsyncronizing visual output to the envelope.",
			"type": [
				"Number"
			],
			"readonly": true,
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/component/Envelope.js#L110"
		},
		{
			"description": "The shape of the attack. \nCan be any of these strings:\n<ul>\n  <li>linear</li>\n  <li>exponential</li>\n  <li>sine</li>\n  <li>ease</li>\n  <li>bounce</li>\n  <li>ripple</li>\n  <li>step</li>\n</ul>\nCan also be an array which describes the curve. Values\nin the array are evenly subdivided and linearly\ninterpolated over the duration of the attack.",
			"type": [
				"String",
				"Array"
			],
			"examples": [
				"env.attackCurve = \"linear\";",
				"//can also be an array\nenv.attackCurve = [0, 0.2, 0.3, 0.4, 1]"
			],
			"scope": "instance",
			"name": "attackCurve",
			"lineno": "Tone/component/Envelope.js#L124"
		},
		{
			"description": "The shape of the release. See the attack curve types.",
			"type": [
				"String",
				"Array"
			],
			"examples": [
				"env.releaseCurve = \"linear\";"
			],
			"scope": "instance",
			"name": "releaseCurve",
			"lineno": "Tone/component/Envelope.js#L180"
		}
	],
	"EQ3": [
		{
			"description": "The gain in decibels of the low part",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "low",
			"lineno": "Tone/component/EQ3.js#L65",
			"signal": true
		},
		{
			"description": "The gain in decibels of the mid part",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "mid",
			"lineno": "Tone/component/EQ3.js#L72",
			"signal": true
		},
		{
			"description": "The gain in decibels of the high part",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "high",
			"lineno": "Tone/component/EQ3.js#L79",
			"signal": true
		},
		{
			"description": "The Q value for all of the filters.",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "Q",
			"lineno": "Tone/component/EQ3.js#L86",
			"signal": true
		},
		{
			"description": "The low/mid crossover frequency.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "lowFrequency",
			"lineno": "Tone/component/EQ3.js#L93",
			"signal": true
		},
		{
			"description": "The mid/high crossover frequency.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "highFrequency",
			"lineno": "Tone/component/EQ3.js#L100",
			"signal": true
		}
	],
	"FeedbackCombFilter": [
		{
			"description": "The amount of delay of the comb filter.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "delayTime",
			"lineno": "Tone/component/FeedbackCombFilter.js#L31",
			"signal": true
		},
		{
			"description": "The amount of feedback of the delayed signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "resonance",
			"lineno": "Tone/component/FeedbackCombFilter.js#L49",
			"signal": true
		}
	],
	"Filter": [
		{
			"description": "The cutoff frequency of the filter.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/component/Filter.js#L37",
			"signal": true
		},
		{
			"description": "The detune parameter",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/component/Filter.js#L44",
			"signal": true
		},
		{
			"description": "The gain of the filter, only used in certain filter types",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "gain",
			"lineno": "Tone/component/Filter.js#L51",
			"signal": true
		},
		{
			"description": "The Q or Quality of the filter",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "Q",
			"lineno": "Tone/component/Filter.js#L61",
			"signal": true
		},
		{
			"description": "The type of the filter. Types: \"lowpass\", \"highpass\", \n\"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/component/Filter.js#L98"
		},
		{
			"description": "The rolloff of the filter which is the drop in db\nper octave. Implemented internally by cascading filters.\nOnly accepts the values -12, -24, -48 and -96.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "rolloff",
			"lineno": "Tone/component/Filter.js#L121"
		}
	],
	"Follower": [
		{
			"description": "The attack time.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "attack",
			"lineno": "Tone/component/Follower.js#L124"
		},
		{
			"description": "The release time.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "release",
			"lineno": "Tone/component/Follower.js#L140"
		}
	],
	"FrequencyEnvelope": [
		{
			"description": "The envelope's mininum output value. This is the value which it\nstarts at.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "baseFrequency",
			"lineno": "Tone/component/FrequencyEnvelope.js#L54"
		},
		{
			"description": "The number of octaves above the baseFrequency that the\nenvelope will scale to.",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "octaves",
			"lineno": "Tone/component/FrequencyEnvelope.js#L70"
		},
		{
			"description": "The envelope's exponent value.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "exponent",
			"lineno": "Tone/component/FrequencyEnvelope.js#L87"
		},
		{
			"description": "When triggerAttack is called, the attack time is the amount of\n time it takes for the envelope to reach it's maximum value.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "attack",
			"lineno": "Tone/component/Envelope.js#L42",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "After the attack portion of the envelope, the value will fall\n over the duration of the decay time to it's sustain value.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "decay",
			"lineno": "Tone/component/Envelope.js#L49",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "The sustain value is the value \n\twhich the envelope rests at after triggerAttack is\n\tcalled, but before triggerRelease is invoked.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "sustain",
			"lineno": "Tone/component/Envelope.js#L57",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "After triggerRelease is called, the envelope's\n value will fall to it's miminum value over the\n duration of the release time.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "release",
			"lineno": "Tone/component/Envelope.js#L65",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Read the current value of the envelope. Useful for \nsyncronizing visual output to the envelope.",
			"type": [
				"Number"
			],
			"readonly": true,
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/component/Envelope.js#L110",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "The shape of the attack. \nCan be any of these strings:\n<ul>\n  <li>linear</li>\n  <li>exponential</li>\n  <li>sine</li>\n  <li>ease</li>\n  <li>bounce</li>\n  <li>ripple</li>\n  <li>step</li>\n</ul>\nCan also be an array which describes the curve. Values\nin the array are evenly subdivided and linearly\ninterpolated over the duration of the attack.",
			"type": [
				"String",
				"Array"
			],
			"examples": [
				"env.attackCurve = \"linear\";",
				"//can also be an array\nenv.attackCurve = [0, 0.2, 0.3, 0.4, 1]"
			],
			"scope": "instance",
			"name": "attackCurve",
			"lineno": "Tone/component/Envelope.js#L124",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "The shape of the release. See the attack curve types.",
			"type": [
				"String",
				"Array"
			],
			"examples": [
				"env.releaseCurve = \"linear\";"
			],
			"scope": "instance",
			"name": "releaseCurve",
			"lineno": "Tone/component/Envelope.js#L180",
			"inherits": "Tone.Envelope"
		}
	],
	"Gate": [
		{
			"description": "The threshold of the gate in decibels",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "threshold",
			"lineno": "Tone/component/Gate.js#L58"
		},
		{
			"description": "The attack speed of the gate",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "attack",
			"lineno": "Tone/component/Gate.js#L73"
		},
		{
			"description": "The release speed of the gate",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "release",
			"lineno": "Tone/component/Gate.js#L88"
		}
	],
	"LFO": [
		{
			"description": "the lfo's frequency",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/component/LFO.js#L42",
			"signal": true
		},
		{
			"description": "The amplitude of the LFO, which controls the output range between\nthe min and max output. For example if the min is -10 and the max \nis 10, setting the amplitude to 0.5 would make the LFO modulate\nbetween -5 and 5.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "amplitude",
			"lineno": "Tone/component/LFO.js#L52",
			"signal": true
		},
		{
			"description": "The miniumum output of the LFO.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "min",
			"lineno": "Tone/component/LFO.js#L177"
		},
		{
			"description": "The maximum output of the LFO.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "max",
			"lineno": "Tone/component/LFO.js#L193"
		},
		{
			"description": "The type of the oscillator: sine, square, sawtooth, triangle.",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/component/LFO.js#L209"
		},
		{
			"description": "The phase of the LFO.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "phase",
			"lineno": "Tone/component/LFO.js#L226"
		},
		{
			"description": "The output units of the LFO.",
			"type": [
				"Tone.Type"
			],
			"scope": "instance",
			"name": "units",
			"lineno": "Tone/component/LFO.js#L243"
		},
		{
			"description": "Mute the output.",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/component/LFO.js#L263"
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/component/LFO.js#L278"
		},
		{
			"description": "The detune control signal.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/source/Oscillator.js#L43",
			"inherits": "Tone.Oscillator",
			"signal": true
		},
		{
			"description": "The partials of the waveform. A partial represents \nthe amplitude at a harmonic. The first harmonic is the \nfundamental frequency, the second is the octave and so on\nfollowing the harmonic series. \nSetting this value will automatically set the type to \"custom\". \nThe value is an empty array when the type is not \"custom\".",
			"type": [
				"Array"
			],
			"examples": [
				"osc.partials = [1, 0.2, 0.01];"
			],
			"scope": "instance",
			"name": "partials",
			"lineno": "Tone/source/Oscillator.js#L298",
			"inherits": "Tone.Oscillator"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		}
	],
	"Limiter": [
		{
			"description": "The threshold of of the limiter",
			"type": [
				"Decibel"
			],
			"scope": "instance",
			"name": "threshold",
			"lineno": "Tone/component/Limiter.js#L39",
			"signal": true
		}
	],
	"LowpassCombFilter": [
		{
			"description": "The delayTime of the comb filter.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "delayTime",
			"lineno": "Tone/component/LowpassCombFilter.js#L34",
			"signal": true
		},
		{
			"description": "The dampening control of the feedback",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "dampening",
			"lineno": "Tone/component/LowpassCombFilter.js#L50",
			"signal": true
		},
		{
			"description": "The amount of feedback of the delayed signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "resonance",
			"lineno": "Tone/component/LowpassCombFilter.js#L68",
			"signal": true
		}
	],
	"Merge": [
		{
			"description": "The left input channel.\n Alias for <code>input[0]</code>",
			"type": [
				"GainNode"
			],
			"scope": "instance",
			"name": "left",
			"lineno": "Tone/component/Merge.js#L30"
		},
		{
			"description": "The right input channel.\n Alias for <code>input[1]</code>.",
			"type": [
				"GainNode"
			],
			"scope": "instance",
			"name": "right",
			"lineno": "Tone/component/Merge.js#L37"
		}
	],
	"Meter": [
		{
			"description": "The type of the meter, either \"level\" or \"signal\". \n A \"level\" meter will return the volume level (rms) of the \n input signal and a \"signal\" meter will return\n the signal value of the input.",
			"type": [
				"String"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/component/Meter.js#L33"
		},
		{
			"description": "The amount of carryover between the current and last frame. \n Only applied meter for \"level\" type.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "smoothing",
			"lineno": "Tone/component/Meter.js#L48"
		},
		{
			"description": "The current value of the meter. A value of 1 is\n\"unity\".",
			"type": [
				"Number"
			],
			"readonly": true,
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/component/Meter.js#L80"
		}
	],
	"MidSideCompressor": [
		{
			"description": "The compressor applied to the mid signal",
			"type": [
				"Tone.Compressor"
			],
			"scope": "instance",
			"name": "mid",
			"lineno": "Tone/component/MidSideCompressor.js#L37"
		},
		{
			"description": "The compressor applied to the side signal",
			"type": [
				"Tone.Compressor"
			],
			"scope": "instance",
			"name": "side",
			"lineno": "Tone/component/MidSideCompressor.js#L43"
		}
	],
	"MidSideMerge": [
		{
			"description": "The mid signal input. Alias for\n <code>input[0]</code>",
			"type": [
				"GainNode"
			],
			"scope": "instance",
			"name": "mid",
			"lineno": "Tone/component/MidSideMerge.js#L28"
		},
		{
			"description": "The side signal input. Alias for\n <code>input[1]</code>",
			"type": [
				"GainNode"
			],
			"scope": "instance",
			"name": "side",
			"lineno": "Tone/component/MidSideMerge.js#L42"
		},
		{
			"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/StereoEffect.js#L32",
			"inherits": "Tone.StereoEffect",
			"signal": true
		}
	],
	"MidSideSplit": [
		{
			"description": "The mid send. Connect to mid processing. Alias for\n <code>output[0]</code>",
			"type": [
				"Tone.Expr"
			],
			"scope": "instance",
			"name": "mid",
			"lineno": "Tone/component/MidSideSplit.js#L33"
		},
		{
			"description": "The side output. Connect to side processing. Alias for\n <code>output[1]</code>",
			"type": [
				"Tone.Expr"
			],
			"scope": "instance",
			"name": "side",
			"lineno": "Tone/component/MidSideSplit.js#L40"
		}
	],
	"MultibandCompressor": [
		{
			"description": "low/mid crossover frequency.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "lowFrequency",
			"lineno": "Tone/component/MultibandCompressor.js#L39",
			"signal": true
		},
		{
			"description": "mid/high crossover frequency.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "highFrequency",
			"lineno": "Tone/component/MultibandCompressor.js#L46",
			"signal": true
		},
		{
			"description": "The compressor applied to the low frequencies.",
			"type": [
				"Tone.Compressor"
			],
			"scope": "instance",
			"name": "low",
			"lineno": "Tone/component/MultibandCompressor.js#L59"
		},
		{
			"description": "The compressor applied to the mid frequencies.",
			"type": [
				"Tone.Compressor"
			],
			"scope": "instance",
			"name": "mid",
			"lineno": "Tone/component/MultibandCompressor.js#L65"
		},
		{
			"description": "The compressor applied to the high frequencies.",
			"type": [
				"Tone.Compressor"
			],
			"scope": "instance",
			"name": "high",
			"lineno": "Tone/component/MultibandCompressor.js#L71"
		}
	],
	"MultibandSplit": [
		{
			"description": "The low band. Alias for <code>output[0]</code>",
			"type": [
				"Tone.Filter"
			],
			"scope": "instance",
			"name": "low",
			"lineno": "Tone/component/MultibandSplit.js#L35"
		},
		{
			"description": "The mid band output. Alias for <code>output[1]</code>",
			"type": [
				"Tone.Filter"
			],
			"scope": "instance",
			"name": "mid",
			"lineno": "Tone/component/MultibandSplit.js#L48"
		},
		{
			"description": "The high band output. Alias for <code>output[2]</code>",
			"type": [
				"Tone.Filter"
			],
			"scope": "instance",
			"name": "high",
			"lineno": "Tone/component/MultibandSplit.js#L54"
		},
		{
			"description": "The low/mid crossover frequency.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "lowFrequency",
			"lineno": "Tone/component/MultibandSplit.js#L61",
			"signal": true
		},
		{
			"description": "The mid/high crossover frequency.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "highFrequency",
			"lineno": "Tone/component/MultibandSplit.js#L68",
			"signal": true
		},
		{
			"description": "The quality of all the filters",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "Q",
			"lineno": "Tone/component/MultibandSplit.js#L75",
			"signal": true
		}
	],
	"Panner": [
		{
			"description": "The pan control. -1 = hard left, 1 = hard right.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "pan",
			"lineno": "Tone/component/Panner.js#L36",
			"signal": true
		},
		{
			"description": "The pan control. -1 = hard left, 1 = hard right.",
			"type": [
				"AudioRange"
			],
			"scope": "instance",
			"name": "pan",
			"lineno": "Tone/component/Panner.js#L64",
			"signal": true
		}
	],
	"PanVol": [
		{
			"description": "The L/R panning control.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "pan",
			"lineno": "Tone/component/PanVol.js#L32",
			"signal": true
		},
		{
			"description": "The volume node",
			"type": [
				"Tone.Volume"
			],
			"scope": "instance",
			"name": "_volume",
			"lineno": "Tone/component/PanVol.js#L38"
		},
		{
			"description": "The volume control in decibels.",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/component/PanVol.js#L45",
			"signal": true
		}
	],
	"ScaledEnvelope": [
		{
			"description": "The envelope's min output value. This is the value which it\nstarts at.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "min",
			"lineno": "Tone/component/ScaledEnvelope.js#L62"
		},
		{
			"description": "The envelope's max output value. In other words, the value\nat the peak of the attack portion of the envelope.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "max",
			"lineno": "Tone/component/ScaledEnvelope.js#L78"
		},
		{
			"description": "The envelope's exponent value.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "exponent",
			"lineno": "Tone/component/ScaledEnvelope.js#L94"
		},
		{
			"description": "When triggerAttack is called, the attack time is the amount of\n time it takes for the envelope to reach it's maximum value.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "attack",
			"lineno": "Tone/component/Envelope.js#L42",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "After the attack portion of the envelope, the value will fall\n over the duration of the decay time to it's sustain value.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "decay",
			"lineno": "Tone/component/Envelope.js#L49",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "The sustain value is the value \n\twhich the envelope rests at after triggerAttack is\n\tcalled, but before triggerRelease is invoked.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "sustain",
			"lineno": "Tone/component/Envelope.js#L57",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "After triggerRelease is called, the envelope's\n value will fall to it's miminum value over the\n duration of the release time.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "release",
			"lineno": "Tone/component/Envelope.js#L65",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Read the current value of the envelope. Useful for \nsyncronizing visual output to the envelope.",
			"type": [
				"Number"
			],
			"readonly": true,
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/component/Envelope.js#L110",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "The shape of the attack. \nCan be any of these strings:\n<ul>\n  <li>linear</li>\n  <li>exponential</li>\n  <li>sine</li>\n  <li>ease</li>\n  <li>bounce</li>\n  <li>ripple</li>\n  <li>step</li>\n</ul>\nCan also be an array which describes the curve. Values\nin the array are evenly subdivided and linearly\ninterpolated over the duration of the attack.",
			"type": [
				"String",
				"Array"
			],
			"examples": [
				"env.attackCurve = \"linear\";",
				"//can also be an array\nenv.attackCurve = [0, 0.2, 0.3, 0.4, 1]"
			],
			"scope": "instance",
			"name": "attackCurve",
			"lineno": "Tone/component/Envelope.js#L124",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "The shape of the release. See the attack curve types.",
			"type": [
				"String",
				"Array"
			],
			"examples": [
				"env.releaseCurve = \"linear\";"
			],
			"scope": "instance",
			"name": "releaseCurve",
			"lineno": "Tone/component/Envelope.js#L180",
			"inherits": "Tone.Envelope"
		}
	],
	"Split": [
		{
			"description": "Left channel output. \n Alias for <code>output[0]</code>",
			"type": [
				"GainNode"
			],
			"scope": "instance",
			"name": "left",
			"lineno": "Tone/component/Split.js#L29"
		},
		{
			"description": "Right channel output.\n Alias for <code>output[1]</code>",
			"type": [
				"GainNode"
			],
			"scope": "instance",
			"name": "right",
			"lineno": "Tone/component/Split.js#L36"
		}
	],
	"Volume": [
		{
			"description": "The volume control in decibels.",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/component/Volume.js#L45",
			"signal": true
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nvolume.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/component/Volume.js#L66"
		}
	],
	"CtrlInterpolate": [
		{
			"description": "The values to interpolate between",
			"type": [
				"Array"
			],
			"scope": "instance",
			"name": "values",
			"lineno": "Tone/control/CtrlInterpolate.js#L33"
		},
		{
			"description": "The interpolated index between values. For example: a value of 1.5\n would interpolate equally between the value at index 1\n and the value at index 2.",
			"type": [
				"Positive"
			],
			"examples": [
				"interp.index = 0; \ninterp.value; //returns the value at 0\ninterp.index = 0.5;\ninterp.value; //returns the value between indices 0 and 1. \n "
			],
			"scope": "instance",
			"name": "index",
			"lineno": "Tone/control/CtrlInterpolate.js#L46"
		},
		{
			"description": "The current interpolated value based on the index",
			"type": [
				"*"
			],
			"readonly": true,
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/control/CtrlInterpolate.js#L61"
		}
	],
	"CtrlMarkov": [
		{
			"description": "The Markov values with states as the keys\n and next state(s) as the values.",
			"type": [
				"Object"
			],
			"scope": "instance",
			"name": "values",
			"lineno": "Tone/control/CtrlMarkov.js#L40"
		},
		{
			"description": "The current state of the Markov values. The next\n state will be evaluated and returned when Tone.CtrlMarkov.next\n is invoked.",
			"type": [
				"String"
			],
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/control/CtrlMarkov.js#L48"
		}
	],
	"CtrlPattern": [
		{
			"description": "The array of values to arpeggiate over",
			"type": [
				"Array"
			],
			"scope": "instance",
			"name": "values",
			"lineno": "Tone/control/CtrlPattern.js#L32"
		},
		{
			"description": "The current position in the values array",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "index",
			"lineno": "Tone/control/CtrlPattern.js#L38"
		},
		{
			"description": "The value at the current index of the pattern.",
			"type": [
				"*"
			],
			"readonly": true,
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/control/CtrlPattern.js#L92"
		},
		{
			"description": "The pattern used to select the next\n item from the values array",
			"type": [
				"Tone.CtrlPattern.Type"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/control/CtrlPattern.js#L120"
		}
	],
	"CtrlRandom": [
		{
			"description": "The minimum return value",
			"type": [
				"Number",
				"Time"
			],
			"scope": "instance",
			"name": "min",
			"lineno": "Tone/control/CtrlRandom.js#L27"
		},
		{
			"description": "The maximum return value",
			"type": [
				"Number",
				"Time"
			],
			"scope": "instance",
			"name": "max",
			"lineno": "Tone/control/CtrlRandom.js#L33"
		},
		{
			"description": "If the return value should be an integer",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "integer",
			"lineno": "Tone/control/CtrlRandom.js#L39"
		},
		{
			"description": "Return a random value between min and max.",
			"type": [
				"*"
			],
			"readonly": true,
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/control/CtrlRandom.js#L55"
		}
	],
	"Buffer": [
		{
			"description": "The url of the buffer. <code>undefined</code> if it was \n constructed with a buffer",
			"type": [
				"string"
			],
			"readonly": true,
			"scope": "instance",
			"name": "url",
			"lineno": "Tone/core/Buffer.js#L51"
		},
		{
			"description": "Indicates if the buffer is loaded or not.",
			"type": [
				"boolean"
			],
			"readonly": true,
			"scope": "instance",
			"name": "loaded",
			"lineno": "Tone/core/Buffer.js#L58"
		},
		{
			"description": "The callback to invoke when everything is loaded.",
			"type": [
				"function"
			],
			"scope": "instance",
			"name": "onload",
			"lineno": "Tone/core/Buffer.js#L64"
		},
		{
			"description": "The duration of the buffer.",
			"type": [
				"number"
			],
			"readonly": true,
			"scope": "instance",
			"name": "duration",
			"lineno": "Tone/core/Buffer.js#L137"
		},
		{
			"description": "Reverse the buffer.",
			"type": [
				"boolean"
			],
			"scope": "instance",
			"name": "reverse",
			"lineno": "Tone/core/Buffer.js#L168"
		}
	],
	"Buffers": [
		{
			"description": "A path which is prefixed before every url.",
			"type": [
				"String"
			],
			"scope": "instance",
			"name": "baseUrl",
			"lineno": "Tone/core/Buffers.js#L39"
		}
	],
	"Clock": [
		{
			"description": "The callback function to invoke at the scheduled tick.",
			"type": [
				"function"
			],
			"scope": "instance",
			"name": "callback",
			"lineno": "Tone/core/Clock.js#L31"
		},
		{
			"description": "The time which the clock will schedule events in advance\n of the current time. Scheduling notes in advance improves\n performance and decreases the chance for clicks caused\n by scheduling events in the past. If set to \"auto\",\n this value will be automatically computed based on the \n rate of requestAnimationFrame (0.016 seconds). Larger values\n will yeild better performance, but at the cost of latency. \n Values less than 0.016 are not recommended.",
			"type": [
				"Number",
				"String"
			],
			"scope": "instance",
			"name": "_lookAhead",
			"lineno": "Tone/core/Clock.js#L44"
		},
		{
			"description": "The rate the callback function should be invoked.",
			"type": [
				"BPM"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/core/Clock.js#L80",
			"signal": true
		},
		{
			"description": "The number of times the callback was invoked. Starts counting at 0\n and increments after the callback was invoked.",
			"type": [
				"Ticks"
			],
			"readonly": true,
			"scope": "instance",
			"name": "ticks",
			"lineno": "Tone/core/Clock.js#L88"
		},
		{
			"description": "Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/core/Clock.js#L124"
		},
		{
			"description": "The time which the clock will schedule events in advance\n of the current time. Scheduling notes in advance improves\n performance and decreases the chance for clicks caused\n by scheduling events in the past. If set to \"auto\",\n this value will be automatically computed based on the \n rate of requestAnimationFrame (0.016 seconds). Larger values\n will yeild better performance, but at the cost of latency. \n Values less than 0.016 are not recommended.",
			"type": [
				"Number",
				"String"
			],
			"scope": "instance",
			"name": "lookAhead",
			"lineno": "Tone/core/Clock.js#L137"
		}
	],
	"Delay": [
		{
			"description": "The amount of time the incoming signal is\n delayed.",
			"type": [
				"Tone.Param"
			],
			"scope": "instance",
			"name": "delayTime",
			"lineno": "Tone/core/Delay.js#L28",
			"signal": true
		}
	],
	"Gain": [
		{
			"description": "The gain parameter of the gain node.",
			"type": [
				"AudioParam"
			],
			"scope": "instance",
			"name": "gain",
			"lineno": "Tone/core/Gain.js#L29",
			"signal": true
		}
	],
	"IntervalTimeline": [
		{
			"description": "The number of items in the timeline.",
			"type": [
				"Number"
			],
			"readonly": true,
			"scope": "instance",
			"name": "length",
			"lineno": "Tone/core/IntervalTimeline.js#L81"
		}
	],
	"Master": [
		{
			"description": "The volume of the master output.",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/core/Master.js#L40",
			"signal": true
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nTone.Master.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/core/Master.js#L58"
		}
	],
	"Param": [
		{
			"description": "The units of the parameter",
			"type": [
				"Tone.Type"
			],
			"scope": "instance",
			"name": "units",
			"lineno": "Tone/core/Param.js#L30"
		},
		{
			"description": "If the value should be converted or not",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "convert",
			"lineno": "Tone/core/Param.js#L36"
		},
		{
			"description": "The current value of the parameter.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/core/Param.js#L65"
		}
	],
	"Timeline": [
		{
			"description": "The memory of the timeline, i.e.\n how many events in the past it will retain",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "memory",
			"lineno": "Tone/core/Timeline.js#L43"
		},
		{
			"description": "The number of items in the timeline.",
			"type": [
				"Number"
			],
			"readonly": true,
			"scope": "instance",
			"name": "length",
			"lineno": "Tone/core/Timeline.js#L57"
		}
	],
	"Tone": [
		{
			"description": "The audio context.",
			"type": [
				"AudioContext"
			],
			"scope": "instance",
			"name": "context",
			"lineno": "Tone/core/Tone.js#L311"
		}
	],
	"Transport": [
		{
			"description": "If the transport loops or not.",
			"type": [
				"boolean"
			],
			"scope": "instance",
			"name": "loop",
			"lineno": "Tone/core/Transport.js#L43"
		},
		{
			"description": "The Beats Per Minute of the Transport.",
			"type": [
				"BPM"
			],
			"examples": [
				"Tone.Transport.bpm.value = 80;\n//ramp the bpm to 120 over 10 seconds\nTone.Transport.bpm.rampTo(120, 10);"
			],
			"scope": "instance",
			"name": "bpm",
			"lineno": "Tone/core/Transport.js#L89",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/core/Transport.js#L355"
		},
		{
			"description": "The time signature as just the numerator over 4. \n For example 4/4 would be just 4 and 6/8 would be 3.",
			"type": [
				"Number",
				"Array"
			],
			"examples": [
				"//common time\nTone.Transport.timeSignature = 4;\n// 7/8\nTone.Transport.timeSignature = [7, 8];\n//this will be reduced to a single number\nTone.Transport.timeSignature; //returns 3.5"
			],
			"scope": "instance",
			"name": "timeSignature",
			"lineno": "Tone/core/Transport.js#L420"
		},
		{
			"description": "When the Tone.Transport.loop = true, this is the starting position of the loop.",
			"type": [
				"TransportTime"
			],
			"scope": "instance",
			"name": "loopStart",
			"lineno": "Tone/core/Transport.js#L447"
		},
		{
			"description": "When the Tone.Transport.loop = true, this is the ending position of the loop.",
			"type": [
				"TransportTime"
			],
			"scope": "instance",
			"name": "loopEnd",
			"lineno": "Tone/core/Transport.js#L462"
		},
		{
			"description": "The swing value. Between 0-1 where 1 equal to \n the note + half the subdivision.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "swing",
			"lineno": "Tone/core/Transport.js#L493"
		},
		{
			"description": "Set the subdivision which the swing will be applied to. \n The default values is a 16th note. Value must be less \n than a quarter note.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "swingSubdivision",
			"lineno": "Tone/core/Transport.js#L510"
		},
		{
			"description": "The Transport's position in Bars:Beats:Sixteenths.\n Setting the value will jump to that position right away.",
			"type": [
				"BarsBeatsSixteenths"
			],
			"scope": "instance",
			"name": "position",
			"lineno": "Tone/core/Transport.js#L528"
		},
		{
			"description": "The Transport's loop position as a normalized value. Always\n returns 0 if the transport if loop is not true.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "progress",
			"lineno": "Tone/core/Transport.js#L545"
		},
		{
			"description": "The transports current tick position.",
			"type": [
				"Ticks"
			],
			"scope": "instance",
			"name": "ticks",
			"lineno": "Tone/core/Transport.js#L562"
		},
		{
			"description": "Pulses Per Quarter note. This is the smallest resolution\n the Transport timing supports. This should be set once\n on initialization and not set again. Changing this value \n after other objects have been created can cause problems.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "PPQ",
			"lineno": "Tone/core/Transport.js#L578"
		}
	],
	"AutoFilter": [
		{
			"description": "The range of the filter modulating between the min and max frequency. \n0 = no modulation. 1 = full modulation.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "depth",
			"lineno": "Tone/effect/AutoFilter.js#L42",
			"signal": true
		},
		{
			"description": "How fast the filter modulates between min and max.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/effect/AutoFilter.js#L49",
			"signal": true
		},
		{
			"description": "The filter node",
			"type": [
				"Tone.Filter"
			],
			"scope": "instance",
			"name": "filter",
			"lineno": "Tone/effect/AutoFilter.js#L55"
		},
		{
			"description": "Type of oscillator attached to the AutoFilter. \nPossible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/effect/AutoFilter.js#L134"
		},
		{
			"description": "The minimum value of the filter's cutoff frequency.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "min",
			"lineno": "Tone/effect/AutoFilter.js#L150"
		},
		{
			"description": "The maximum value of the filter's cutoff frequency.",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "octaves",
			"lineno": "Tone/effect/AutoFilter.js#L165"
		},
		{
			"description": "Type of oscillator attached to the AutoFilter. \nPossible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/effect/AutoPanner.js#L118"
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"AutoPanner": [
		{
			"description": "The amount of panning between left and right. \n0 = always center. 1 = full range between left and right.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "depth",
			"lineno": "Tone/effect/AutoPanner.js#L41",
			"signal": true
		},
		{
			"description": "How fast the panner modulates between left and right.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/effect/AutoPanner.js#L55",
			"signal": true
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"AutoWah": [
		{
			"description": "The gain of the filter.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "gain",
			"lineno": "Tone/effect/AutoWah.js#L90",
			"signal": true
		},
		{
			"description": "The quality of the filter.",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "Q",
			"lineno": "Tone/effect/AutoWah.js#L97",
			"signal": true
		},
		{
			"description": "The number of octaves that the filter will sweep above the \nbaseFrequency.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "octaves",
			"lineno": "Tone/effect/AutoWah.js#L130"
		},
		{
			"description": "The base frequency from which the sweep will start from.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "baseFrequency",
			"lineno": "Tone/effect/AutoWah.js#L147"
		},
		{
			"description": "The sensitivity to control how responsive to the input signal the filter is.",
			"type": [
				"Decibels"
			],
			"scope": "instance",
			"name": "sensitivity",
			"lineno": "Tone/effect/AutoWah.js#L163"
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"BitCrusher": [
		{
			"description": "The bit depth of the effect. Nominal range of 1-8.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "bits",
			"lineno": "Tone/effect/BitCrusher.js#L65"
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"Chebyshev": [
		{
			"description": "The order of the Chebyshev polynomial which creates\nthe equation which is applied to the incoming \nsignal through a Tone.WaveShaper. The equations\nare in the form:<br>\norder 2: 2x^2 + 1<br>\norder 3: 4x^3 + 3x <br>",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "order",
			"lineno": "Tone/effect/Chebyshev.js#L78"
		},
		{
			"description": "The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "oversample",
			"lineno": "Tone/effect/Chebyshev.js#L110"
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"Chorus": [
		{
			"description": "The frequency of the LFO which modulates the delayTime.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/effect/Chorus.js#L83",
			"signal": true
		},
		{
			"description": "The depth of the effect. A depth of 1 makes the delayTime\nmodulate between 0 and 2*delayTime (centered around the delayTime).",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "depth",
			"lineno": "Tone/effect/Chorus.js#L122"
		},
		{
			"description": "The delayTime in milliseconds of the chorus. A larger delayTime\nwill give a more pronounced effect. Nominal range a delayTime\nis between 2 and 20ms.",
			"type": [
				"Milliseconds"
			],
			"scope": "instance",
			"name": "delayTime",
			"lineno": "Tone/effect/Chorus.js#L143"
		},
		{
			"description": "The oscillator type of the LFO.",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/effect/Chorus.js#L161"
		},
		{
			"description": "Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\nWhen set to 180, LFO's will be panned hard left and right respectively.",
			"type": [
				"Degrees"
			],
			"scope": "instance",
			"name": "spread",
			"lineno": "Tone/effect/Chorus.js#L177"
		},
		{
			"description": "The amount of feedback from the output\n back into the input of the effect (routed\n across left and right channels).",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "feedback",
			"lineno": "Tone/effect/StereoXFeedbackEffect.js#L25",
			"inherits": "Tone.StereoXFeedbackEffect",
			"signal": true
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"Convolver": [
		{
			"description": "The convolver's buffer",
			"type": [
				"AudioBuffer"
			],
			"scope": "instance",
			"name": "buffer",
			"lineno": "Tone/effect/Convolver.js#L63"
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"Distortion": [
		{
			"description": "The amount of distortion.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "distortion",
			"lineno": "Tone/effect/Distortion.js#L54"
		},
		{
			"description": "The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "oversample",
			"lineno": "Tone/effect/Distortion.js#L79"
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"Effect": [
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"signal": true
		}
	],
	"FeedbackDelay": [
		{
			"description": "The delayTime of the DelayNode.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "delayTime",
			"lineno": "Tone/effect/FeedbackDelay.js#L32",
			"signal": true
		},
		{
			"description": "The amount of signal which is fed back into the effect input.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "feedback",
			"lineno": "Tone/effect/FeedbackEffect.js#L26",
			"inherits": "Tone.FeedbackEffect",
			"signal": true
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"FeedbackEffect": [
		{
			"description": "The amount of signal which is fed back into the effect input.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "feedback",
			"lineno": "Tone/effect/FeedbackEffect.js#L26",
			"signal": true
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"Freeverb": [
		{
			"description": "The roomSize value between. A larger roomSize\n will result in a longer decay.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "roomSize",
			"lineno": "Tone/effect/Freeverb.js#L49",
			"signal": true
		},
		{
			"description": "The amount of dampening of the reverberant signal.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "dampening",
			"lineno": "Tone/effect/Freeverb.js#L56",
			"signal": true
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"JCReverb": [
		{
			"description": "room size control values between [0,1]",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "roomSize",
			"lineno": "Tone/effect/JCReverb.js#L56",
			"signal": true
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"Phaser": [
		{
			"description": "The quality factor of the filters",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "Q",
			"lineno": "Tone/effect/Phaser.js#L66",
			"signal": true
		},
		{
			"description": "the frequency of the effect",
			"type": [
				"Tone.Signal"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/effect/Phaser.js#L86"
		},
		{
			"description": "The number of octaves the phase goes above\nthe baseFrequency",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "octaves",
			"lineno": "Tone/effect/Phaser.js#L139"
		},
		{
			"description": "The the base frequency of the filters.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "baseFrequency",
			"lineno": "Tone/effect/Phaser.js#L158"
		},
		{
			"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/StereoEffect.js#L32",
			"inherits": "Tone.StereoEffect",
			"signal": true
		}
	],
	"PingPongDelay": [
		{
			"description": "the delay time signal",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "delayTime",
			"lineno": "Tone/effect/PingPongDelay.js#L56",
			"signal": true
		},
		{
			"description": "The amount of feedback from the output\n back into the input of the effect (routed\n across left and right channels).",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "feedback",
			"lineno": "Tone/effect/StereoXFeedbackEffect.js#L25",
			"inherits": "Tone.StereoXFeedbackEffect",
			"signal": true
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"PitchShift": [
		{
			"description": "The amount of delay on the input signal",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "delayTime",
			"lineno": "Tone/effect/PitchShift.js#L102",
			"signal": true
		},
		{
			"description": "Repitch the incoming signal by some interval (measured\nin semi-tones).",
			"type": [
				"Interval"
			],
			"examples": [
				"pitchShift.pitch = -12; //down one octave\npitchShift.pitch = 7; //up a fifth"
			],
			"scope": "instance",
			"name": "pitch",
			"lineno": "Tone/effect/PitchShift.js#L151"
		},
		{
			"description": "The window size corresponds roughly to the sample length in a looping sampler. \nSmaller values are desirable for a less noticeable delay time of the pitch shifted\nsignal, but larger values will result in smoother pitch shifting for larger intervals. \nA nominal range of 0.03 to 0.1 is recommended.",
			"type": [
				"Time"
			],
			"examples": [
				"pitchShift.windowSize = 0.1;"
			],
			"scope": "instance",
			"name": "windowSize",
			"lineno": "Tone/effect/PitchShift.js#L185"
		},
		{
			"description": "The amount of signal which is fed back into the effect input.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "feedback",
			"lineno": "Tone/effect/FeedbackEffect.js#L26",
			"inherits": "Tone.FeedbackEffect",
			"signal": true
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"StereoEffect": [
		{
			"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/StereoEffect.js#L32",
			"signal": true
		}
	],
	"StereoFeedbackEffect": [
		{
			"description": "controls the amount of feedback",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "feedback",
			"lineno": "Tone/effect/StereoFeedbackEffect.js#L23",
			"signal": true
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"StereoWidener": [
		{
			"description": "The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "width",
			"lineno": "Tone/effect/StereoWidener.js#L31",
			"signal": true
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"StereoXFeedbackEffect": [
		{
			"description": "The amount of feedback from the output\n back into the input of the effect (routed\n across left and right channels).",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "feedback",
			"lineno": "Tone/effect/StereoXFeedbackEffect.js#L25",
			"signal": true
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"Tremolo": [
		{
			"description": "The frequency of the tremolo.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/effect/Tremolo.js#L65",
			"signal": true
		},
		{
			"description": "The depth of the effect. A depth of 0, has no effect\n on the amplitude, and a depth of 1 makes the amplitude\n modulate fully between 0 and 1.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "depth",
			"lineno": "Tone/effect/Tremolo.js#L74",
			"signal": true
		},
		{
			"description": "The Tremolo's oscillator type.",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/effect/Tremolo.js#L145"
		},
		{
			"description": "Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\nWhen set to 180, LFO's will be panned hard left and right respectively.",
			"type": [
				"Degrees"
			],
			"scope": "instance",
			"name": "spread",
			"lineno": "Tone/effect/Tremolo.js#L161"
		},
		{
			"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/StereoEffect.js#L32",
			"inherits": "Tone.StereoEffect",
			"signal": true
		}
	],
	"Vibrato": [
		{
			"description": "The frequency of the vibrato",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/effect/Vibrato.js#L43",
			"signal": true
		},
		{
			"description": "The depth of the vibrato.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "depth",
			"lineno": "Tone/effect/Vibrato.js#L50",
			"signal": true
		},
		{
			"description": "Type of oscillator attached to the Vibrato.",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/effect/Vibrato.js#L71"
		},
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"Event": [
		{
			"description": "The callback to invoke.",
			"type": [
				"function"
			],
			"scope": "instance",
			"name": "callback",
			"lineno": "Tone/event/Event.js#L39"
		},
		{
			"description": "The probability that the callback will be invoked\n at the scheduled time.",
			"type": [
				"NormalRange"
			],
			"examples": [
				"//the callback will be invoked 50% of the time\nevent.probability = 0.5;"
			],
			"scope": "instance",
			"name": "probability",
			"lineno": "Tone/event/Event.js#L93"
		},
		{
			"description": "If set to true, will apply small (+/-0.02 seconds) random variation\n to the callback time. If the value is given as a time, it will randomize\n by that amount.",
			"type": [
				"Boolean",
				"Time"
			],
			"examples": [
				"event.humanize = true;\n "
			],
			"scope": "instance",
			"name": "humanize",
			"lineno": "Tone/event/Event.js#L103"
		},
		{
			"description": "If mute is true, the callback won't be\n invoked.",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/event/Event.js#L110"
		},
		{
			"description": "Returns the playback state of the note, either \"started\" or \"stopped\".",
			"type": [
				"String"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/event/Event.js#L176"
		},
		{
			"description": "If the note should loop or not\n between Tone.Event.loopStart and \n Tone.Event.loopEnd. An integer\n value corresponds to the number of\n loops the Event does after it starts.",
			"type": [
				"Boolean",
				"Positive"
			],
			"scope": "instance",
			"name": "loop",
			"lineno": "Tone/event/Event.js#L289"
		},
		{
			"description": "The playback rate of the note. Defaults to 1.",
			"type": [
				"Positive"
			],
			"examples": [
				"note.loop = true;\n//repeat the note twice as fast\nnote.playbackRate = 2;"
			],
			"scope": "instance",
			"name": "playbackRate",
			"lineno": "Tone/event/Event.js#L309"
		},
		{
			"description": "The loopEnd point is the time the event will loop\n if Tone.Event.loop is true.",
			"type": [
				"TransportTime"
			],
			"scope": "instance",
			"name": "loopEnd",
			"lineno": "Tone/event/Event.js#L329"
		},
		{
			"description": "The time when the loop should start.",
			"type": [
				"TransportTime"
			],
			"scope": "instance",
			"name": "loopStart",
			"lineno": "Tone/event/Event.js#L348"
		},
		{
			"description": "The current progress of the loop interval.\n Returns 0 if the event is not started yet or\n it is not set to loop.",
			"type": [
				"NormalRange"
			],
			"readonly": true,
			"scope": "instance",
			"name": "progress",
			"lineno": "Tone/event/Event.js#L366"
		}
	],
	"Loop": [
		{
			"description": "The callback to invoke with the next event in the pattern",
			"type": [
				"function"
			],
			"scope": "instance",
			"name": "callback",
			"lineno": "Tone/event/Loop.js#L37"
		},
		{
			"description": "The state of the Loop, either started or stopped.",
			"type": [
				"String"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/event/Loop.js#L99"
		},
		{
			"description": "The progress of the loop as a value between 0-1. 0, when\n the loop is stopped or done iterating.",
			"type": [
				"NormalRange"
			],
			"readonly": true,
			"scope": "instance",
			"name": "progress",
			"lineno": "Tone/event/Loop.js#L112"
		},
		{
			"description": "The time between successive callbacks.",
			"type": [
				"Time"
			],
			"examples": [
				"loop.interval = \"8n\"; //loop every 8n\n "
			],
			"scope": "instance",
			"name": "interval",
			"lineno": "Tone/event/Loop.js#L126"
		},
		{
			"description": "The playback rate of the loop. The normal playback rate is 1 (no change). \n A `playbackRate` of 2 would be twice as fast.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "playbackRate",
			"lineno": "Tone/event/Loop.js#L143"
		},
		{
			"description": "Random variation +/-0.01s to the scheduled time. \n Or give it a time value which it will randomize by.",
			"type": [
				"Boolean",
				"Time"
			],
			"scope": "instance",
			"name": "humanize",
			"lineno": "Tone/event/Loop.js#L159"
		},
		{
			"description": "The probably of the callback being invoked.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "probability",
			"lineno": "Tone/event/Loop.js#L175"
		},
		{
			"description": "Muting the Loop means that no callbacks are invoked.",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/event/Loop.js#L190"
		},
		{
			"description": "The number of iterations of the loop. The default\n value is Infinity (loop forever).",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "iterations",
			"lineno": "Tone/event/Loop.js#L205"
		}
	],
	"Part": [
		{
			"description": "The callback to invoke at all the scheduled events.",
			"type": [
				"function"
			],
			"scope": "instance",
			"name": "callback",
			"lineno": "Tone/event/Part.js#L99"
		},
		{
			"description": "If mute is true, the callback won't be\n invoked.",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/event/Part.js#L106"
		},
		{
			"description": "The probability of the notes being triggered.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "probability",
			"lineno": "Tone/event/Part.js#L441"
		},
		{
			"description": "If the part should loop or not\n between Tone.Part.loopStart and \n Tone.Part.loopEnd. An integer\n value corresponds to the number of\n loops the Part does after it starts.",
			"type": [
				"Boolean",
				"Positive"
			],
			"examples": [
				"//loop the part 8 times\npart.loop = 8;"
			],
			"scope": "instance",
			"name": "loop",
			"lineno": "Tone/event/Part.js#L476"
		},
		{
			"description": "The loopEnd point determines when it will \n loop if Tone.Part.loop is true.",
			"type": [
				"TransportTime"
			],
			"scope": "instance",
			"name": "loopEnd",
			"lineno": "Tone/event/Part.js#L504"
		},
		{
			"description": "The loopStart point determines when it will \n loop if Tone.Part.loop is true.",
			"type": [
				"TransportTime"
			],
			"scope": "instance",
			"name": "loopStart",
			"lineno": "Tone/event/Part.js#L526"
		},
		{
			"description": "The playback rate of the part",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "playbackRate",
			"lineno": "Tone/event/Part.js#L548"
		},
		{
			"description": "The number of scheduled notes in the part.",
			"type": [
				"Positive"
			],
			"readonly": true,
			"scope": "instance",
			"name": "length",
			"lineno": "Tone/event/Part.js#L564"
		},
		{
			"description": "If set to true, will apply small (+/-0.02 seconds) random variation\n to the callback time. If the value is given as a time, it will randomize\n by that amount.",
			"type": [
				"Boolean",
				"Time"
			],
			"examples": [
				"event.humanize = true;\n "
			],
			"scope": "instance",
			"name": "humanize",
			"lineno": "Tone/event/Event.js#L103",
			"inherits": "Tone.Event"
		},
		{
			"description": "Returns the playback state of the note, either \"started\" or \"stopped\".",
			"type": [
				"String"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/event/Event.js#L176",
			"inherits": "Tone.Event"
		},
		{
			"description": "The current progress of the loop interval.\n Returns 0 if the event is not started yet or\n it is not set to loop.",
			"type": [
				"NormalRange"
			],
			"readonly": true,
			"scope": "instance",
			"name": "progress",
			"lineno": "Tone/event/Event.js#L366",
			"inherits": "Tone.Event"
		}
	],
	"Pattern": [
		{
			"description": "The current index in the values array.",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "index",
			"lineno": "Tone/event/Pattern.js#L57"
		},
		{
			"description": "The array of events.",
			"type": [
				"Array"
			],
			"scope": "instance",
			"name": "values",
			"lineno": "Tone/event/Pattern.js#L72"
		},
		{
			"description": "The current value of the pattern.",
			"type": [
				"*"
			],
			"readonly": true,
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/event/Pattern.js#L87"
		},
		{
			"description": "The pattern type. See Tone.CtrlPattern for the full list of patterns.",
			"type": [
				"String"
			],
			"scope": "instance",
			"name": "pattern",
			"lineno": "Tone/event/Pattern.js#L100"
		},
		{
			"description": "The callback to invoke with the next event in the pattern",
			"type": [
				"function"
			],
			"scope": "instance",
			"name": "callback",
			"lineno": "Tone/event/Loop.js#L37",
			"inherits": "Tone.Loop"
		},
		{
			"description": "The state of the Loop, either started or stopped.",
			"type": [
				"String"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/event/Loop.js#L99",
			"inherits": "Tone.Loop"
		},
		{
			"description": "The progress of the loop as a value between 0-1. 0, when\n the loop is stopped or done iterating.",
			"type": [
				"NormalRange"
			],
			"readonly": true,
			"scope": "instance",
			"name": "progress",
			"lineno": "Tone/event/Loop.js#L112",
			"inherits": "Tone.Loop"
		},
		{
			"description": "The time between successive callbacks.",
			"type": [
				"Time"
			],
			"examples": [
				"loop.interval = \"8n\"; //loop every 8n\n "
			],
			"scope": "instance",
			"name": "interval",
			"lineno": "Tone/event/Loop.js#L126",
			"inherits": "Tone.Loop"
		},
		{
			"description": "The playback rate of the loop. The normal playback rate is 1 (no change). \n A `playbackRate` of 2 would be twice as fast.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "playbackRate",
			"lineno": "Tone/event/Loop.js#L143",
			"inherits": "Tone.Loop"
		},
		{
			"description": "Random variation +/-0.01s to the scheduled time. \n Or give it a time value which it will randomize by.",
			"type": [
				"Boolean",
				"Time"
			],
			"scope": "instance",
			"name": "humanize",
			"lineno": "Tone/event/Loop.js#L159",
			"inherits": "Tone.Loop"
		},
		{
			"description": "The probably of the callback being invoked.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "probability",
			"lineno": "Tone/event/Loop.js#L175",
			"inherits": "Tone.Loop"
		},
		{
			"description": "Muting the Loop means that no callbacks are invoked.",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/event/Loop.js#L190",
			"inherits": "Tone.Loop"
		},
		{
			"description": "The number of iterations of the loop. The default\n value is Infinity (loop forever).",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "iterations",
			"lineno": "Tone/event/Loop.js#L205",
			"inherits": "Tone.Loop"
		}
	],
	"Sequence": [
		{
			"description": "The subdivision of the sequence. This can only be \n set in the constructor. The subdivision is the \n interval between successive steps.",
			"type": [
				"Time"
			],
			"readonly": true,
			"scope": "instance",
			"name": "subdivision",
			"lineno": "Tone/event/Sequence.js#L69"
		},
		{
			"description": "The callback to invoke at all the scheduled events.",
			"type": [
				"function"
			],
			"scope": "instance",
			"name": "callback",
			"lineno": "Tone/event/Part.js#L99",
			"inherits": "Tone.Part"
		},
		{
			"description": "If mute is true, the callback won't be\n invoked.",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/event/Part.js#L106",
			"inherits": "Tone.Part"
		},
		{
			"description": "The probability of the notes being triggered.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "probability",
			"lineno": "Tone/event/Part.js#L441",
			"inherits": "Tone.Part"
		},
		{
			"description": "If the part should loop or not\n between Tone.Part.loopStart and \n Tone.Part.loopEnd. An integer\n value corresponds to the number of\n loops the Part does after it starts.",
			"type": [
				"Boolean",
				"Positive"
			],
			"examples": [
				"//loop the part 8 times\npart.loop = 8;"
			],
			"scope": "instance",
			"name": "loop",
			"lineno": "Tone/event/Part.js#L476",
			"inherits": "Tone.Part"
		},
		{
			"description": "The loopEnd point determines when it will \n loop if Tone.Part.loop is true.",
			"type": [
				"TransportTime"
			],
			"scope": "instance",
			"name": "loopEnd",
			"lineno": "Tone/event/Part.js#L504",
			"inherits": "Tone.Part"
		},
		{
			"description": "The loopStart point determines when it will \n loop if Tone.Part.loop is true.",
			"type": [
				"TransportTime"
			],
			"scope": "instance",
			"name": "loopStart",
			"lineno": "Tone/event/Part.js#L526",
			"inherits": "Tone.Part"
		},
		{
			"description": "The playback rate of the part",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "playbackRate",
			"lineno": "Tone/event/Part.js#L548",
			"inherits": "Tone.Part"
		},
		{
			"description": "The number of scheduled notes in the part.",
			"type": [
				"Positive"
			],
			"readonly": true,
			"scope": "instance",
			"name": "length",
			"lineno": "Tone/event/Part.js#L564",
			"inherits": "Tone.Part"
		},
		{
			"description": "If set to true, will apply small (+/-0.02 seconds) random variation\n to the callback time. If the value is given as a time, it will randomize\n by that amount.",
			"type": [
				"Boolean",
				"Time"
			],
			"examples": [
				"event.humanize = true;\n "
			],
			"scope": "instance",
			"name": "humanize",
			"lineno": "Tone/event/Event.js#L103",
			"inherits": "Tone.Event"
		},
		{
			"description": "Returns the playback state of the note, either \"started\" or \"stopped\".",
			"type": [
				"String"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/event/Event.js#L176",
			"inherits": "Tone.Event"
		},
		{
			"description": "The current progress of the loop interval.\n Returns 0 if the event is not started yet or\n it is not set to loop.",
			"type": [
				"NormalRange"
			],
			"readonly": true,
			"scope": "instance",
			"name": "progress",
			"lineno": "Tone/event/Event.js#L366",
			"inherits": "Tone.Event"
		}
	],
	"AMSynth": [
		{
			"description": "The carrier voice.",
			"type": [
				"Tone.Synth"
			],
			"scope": "instance",
			"name": "_carrier",
			"lineno": "Tone/instrument/AMSynth.js#L32"
		},
		{
			"description": "The carrier's oscillator",
			"type": [
				"Tone.Oscillator"
			],
			"scope": "instance",
			"name": "oscillator",
			"lineno": "Tone/instrument/AMSynth.js#L39"
		},
		{
			"description": "The carrier's envelope",
			"type": [
				"Tone.Oscillator"
			],
			"scope": "instance",
			"name": "envelope",
			"lineno": "Tone/instrument/AMSynth.js#L45"
		},
		{
			"description": "The modulator voice.",
			"type": [
				"Tone.Synth"
			],
			"scope": "instance",
			"name": "_modulator",
			"lineno": "Tone/instrument/AMSynth.js#L51"
		},
		{
			"description": "The modulator's oscillator which is applied\n to the amplitude of the oscillator",
			"type": [
				"Tone.Oscillator"
			],
			"scope": "instance",
			"name": "modulation",
			"lineno": "Tone/instrument/AMSynth.js#L59"
		},
		{
			"description": "The modulator's envelope",
			"type": [
				"Tone.Oscillator"
			],
			"scope": "instance",
			"name": "modulationEnvelope",
			"lineno": "Tone/instrument/AMSynth.js#L65"
		},
		{
			"description": "The frequency.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/instrument/AMSynth.js#L72",
			"signal": true
		},
		{
			"description": "The detune in cents",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/instrument/AMSynth.js#L79",
			"signal": true
		},
		{
			"description": "Harmonicity is the ratio between the two voices. A harmonicity of\n 1 is no change. Harmonicity = 2 means a change of an octave.",
			"type": [
				"Positive"
			],
			"examples": [
				"//pitch voice1 an octave below voice0\nsynth.harmonicity.value = 0.5;"
			],
			"scope": "instance",
			"name": "harmonicity",
			"lineno": "Tone/instrument/AMSynth.js#L90",
			"signal": true
		},
		{
			"description": "The glide time between notes.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "portamento",
			"lineno": "Tone/instrument/Monophonic.js#L25",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"DuoSynth": [
		{
			"description": "the first voice",
			"type": [
				"Tone.MonoSynth"
			],
			"scope": "instance",
			"name": "voice0",
			"lineno": "Tone/instrument/DuoSynth.js#L30"
		},
		{
			"description": "the second voice",
			"type": [
				"Tone.MonoSynth"
			],
			"scope": "instance",
			"name": "voice1",
			"lineno": "Tone/instrument/DuoSynth.js#L37"
		},
		{
			"description": "the vibrato frequency",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "vibratoRate",
			"lineno": "Tone/instrument/DuoSynth.js#L53",
			"signal": true
		},
		{
			"description": "The amount of vibrato",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "vibratoAmount",
			"lineno": "Tone/instrument/DuoSynth.js#L67",
			"signal": true
		},
		{
			"description": "the frequency control",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/instrument/DuoSynth.js#L78",
			"signal": true
		},
		{
			"description": "Harmonicity is the ratio between the two voices. A harmonicity of\n 1 is no change. Harmonicity = 2 means a change of an octave.",
			"type": [
				"Positive"
			],
			"examples": [
				"//pitch voice1 an octave below voice0\nduoSynth.harmonicity.value = 0.5;"
			],
			"scope": "instance",
			"name": "harmonicity",
			"lineno": "Tone/instrument/DuoSynth.js#L89",
			"signal": true
		},
		{
			"description": "The glide time between notes.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "portamento",
			"lineno": "Tone/instrument/Monophonic.js#L25",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"FMSynth": [
		{
			"description": "The carrier voice.",
			"type": [
				"Tone.Synth"
			],
			"scope": "instance",
			"name": "_carrier",
			"lineno": "Tone/instrument/FMSynth.js#L30"
		},
		{
			"description": "The carrier's oscillator",
			"type": [
				"Tone.Oscillator"
			],
			"scope": "instance",
			"name": "oscillator",
			"lineno": "Tone/instrument/FMSynth.js#L38"
		},
		{
			"description": "The carrier's envelope",
			"type": [
				"Tone.Oscillator"
			],
			"scope": "instance",
			"name": "envelope",
			"lineno": "Tone/instrument/FMSynth.js#L44"
		},
		{
			"description": "The modulator voice.",
			"type": [
				"Tone.Synth"
			],
			"scope": "instance",
			"name": "_modulator",
			"lineno": "Tone/instrument/FMSynth.js#L50"
		},
		{
			"description": "The modulator's oscillator which is applied\n to the amplitude of the oscillator",
			"type": [
				"Tone.Oscillator"
			],
			"scope": "instance",
			"name": "modulation",
			"lineno": "Tone/instrument/FMSynth.js#L59"
		},
		{
			"description": "The modulator's envelope",
			"type": [
				"Tone.Oscillator"
			],
			"scope": "instance",
			"name": "modulationEnvelope",
			"lineno": "Tone/instrument/FMSynth.js#L65"
		},
		{
			"description": "The frequency control.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/instrument/FMSynth.js#L72",
			"signal": true
		},
		{
			"description": "The detune in cents",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/instrument/FMSynth.js#L79",
			"signal": true
		},
		{
			"description": "Harmonicity is the ratio between the two voices. A harmonicity of\n 1 is no change. Harmonicity = 2 means a change of an octave.",
			"type": [
				"Positive"
			],
			"examples": [
				"//pitch voice1 an octave below voice0\nsynth.harmonicity.value = 0.5;"
			],
			"scope": "instance",
			"name": "harmonicity",
			"lineno": "Tone/instrument/FMSynth.js#L90",
			"signal": true
		},
		{
			"description": "The modulation index which essentially the depth or amount of the modulation. It is the \n ratio of the frequency of the modulating signal (mf) to the amplitude of the \n modulating signal (ma) -- as in ma/mf.",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "modulationIndex",
			"lineno": "Tone/instrument/FMSynth.js#L100",
			"signal": true
		},
		{
			"description": "The glide time between notes.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "portamento",
			"lineno": "Tone/instrument/Monophonic.js#L25",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"Instrument": [
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"signal": true
		}
	],
	"MembraneSynth": [
		{
			"description": "The oscillator.",
			"type": [
				"Tone.Oscillator"
			],
			"scope": "instance",
			"name": "oscillator",
			"lineno": "Tone/instrument/MembraneSynth.js#L33"
		},
		{
			"description": "The amplitude envelope.",
			"type": [
				"Tone.AmplitudeEnvelope"
			],
			"scope": "instance",
			"name": "envelope",
			"lineno": "Tone/instrument/MembraneSynth.js#L39"
		},
		{
			"description": "The number of octaves the pitch envelope ramps.",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "octaves",
			"lineno": "Tone/instrument/MembraneSynth.js#L45"
		},
		{
			"description": "The amount of time the frequency envelope takes.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "pitchDecay",
			"lineno": "Tone/instrument/MembraneSynth.js#L51"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"MetalSynth": [
		{
			"description": "The frequency of the cymbal",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/instrument/MetalSynth.js#L35",
			"signal": true
		},
		{
			"description": "The envelope which is connected both to the \n amplitude and highpass filter's cutoff frequency",
			"type": [
				"Tone.Envelope"
			],
			"scope": "instance",
			"name": "envelope",
			"lineno": "Tone/instrument/MetalSynth.js#L89"
		},
		{
			"description": "The modulationIndex of the oscillators which make up the source.\n see Tone.FMOscillator.modulationIndex",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "modulationIndex",
			"lineno": "Tone/instrument/MetalSynth.js#L180"
		},
		{
			"description": "The harmonicity of the oscillators which make up the source.\n see Tone.FMOscillator.harmonicity",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "harmonicity",
			"lineno": "Tone/instrument/MetalSynth.js#L198"
		},
		{
			"description": "The frequency of the highpass filter attached to the envelope",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "resonance",
			"lineno": "Tone/instrument/MetalSynth.js#L216"
		},
		{
			"description": "The number of octaves above the \"resonance\" frequency\n that the filter ramps during the attack/decay envelope",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "octaves",
			"lineno": "Tone/instrument/MetalSynth.js#L232"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"Monophonic": [
		{
			"description": "The glide time between notes.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "portamento",
			"lineno": "Tone/instrument/Monophonic.js#L25"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"MonoSynth": [
		{
			"description": "The oscillator.",
			"type": [
				"Tone.OmniOscillator"
			],
			"scope": "instance",
			"name": "oscillator",
			"lineno": "Tone/instrument/MonoSynth.js#L38"
		},
		{
			"description": "The frequency control.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/instrument/MonoSynth.js#L45",
			"signal": true
		},
		{
			"description": "The detune control.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/instrument/MonoSynth.js#L52",
			"signal": true
		},
		{
			"description": "The filter.",
			"type": [
				"Tone.Filter"
			],
			"scope": "instance",
			"name": "filter",
			"lineno": "Tone/instrument/MonoSynth.js#L58"
		},
		{
			"description": "The filter envelope.",
			"type": [
				"Tone.FrequencyEnvelope"
			],
			"scope": "instance",
			"name": "filterEnvelope",
			"lineno": "Tone/instrument/MonoSynth.js#L64"
		},
		{
			"description": "The amplitude envelope.",
			"type": [
				"Tone.AmplitudeEnvelope"
			],
			"scope": "instance",
			"name": "envelope",
			"lineno": "Tone/instrument/MonoSynth.js#L70"
		},
		{
			"description": "The glide time between notes.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "portamento",
			"lineno": "Tone/instrument/Monophonic.js#L25",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"NoiseSynth": [
		{
			"description": "The noise source.",
			"type": [
				"Tone.Noise"
			],
			"examples": [
				"noiseSynth.set(\"noise.type\", \"brown\");"
			],
			"scope": "instance",
			"name": "noise",
			"lineno": "Tone/instrument/NoiseSynth.js#L33"
		},
		{
			"description": "The amplitude envelope.",
			"type": [
				"Tone.AmplitudeEnvelope"
			],
			"scope": "instance",
			"name": "envelope",
			"lineno": "Tone/instrument/NoiseSynth.js#L39"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"PluckSynth": [
		{
			"description": "The amount of noise at the attack. \n Nominal range of [0.1, 20]",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "attackNoise",
			"lineno": "Tone/instrument/PluckSynth.js#L33"
		},
		{
			"description": "The resonance control.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "resonance",
			"lineno": "Tone/instrument/PluckSynth.js#L50",
			"signal": true
		},
		{
			"description": "The dampening control. i.e. the lowpass filter frequency of the comb filter",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "dampening",
			"lineno": "Tone/instrument/PluckSynth.js#L57",
			"signal": true
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"PolySynth": [
		{
			"description": "the array of voices",
			"type": [
				"Array"
			],
			"scope": "instance",
			"name": "voices",
			"lineno": "Tone/instrument/PolySynth.js#L40"
		},
		{
			"description": "The detune in cents",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/instrument/PolySynth.js#L55",
			"signal": true
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"Sampler": [
		{
			"description": "The sample player.",
			"type": [
				"Tone.Player"
			],
			"scope": "instance",
			"name": "player",
			"lineno": "Tone/instrument/Sampler.js#L28"
		},
		{
			"description": "The amplitude envelope.",
			"type": [
				"Tone.AmplitudeEnvelope"
			],
			"scope": "instance",
			"name": "envelope",
			"lineno": "Tone/instrument/Sampler.js#L35"
		},
		{
			"description": "If the output sample should loop or not.",
			"type": [
				"number",
				"string"
			],
			"scope": "instance",
			"name": "loop",
			"lineno": "Tone/instrument/Sampler.js#L96"
		},
		{
			"description": "The direction the buffer should play in",
			"type": [
				"boolean"
			],
			"scope": "instance",
			"name": "reverse",
			"lineno": "Tone/instrument/Sampler.js#L111"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"Synth": [
		{
			"description": "The oscillator.",
			"type": [
				"Tone.OmniOscillator"
			],
			"scope": "instance",
			"name": "oscillator",
			"lineno": "Tone/instrument/Synth.js#L29"
		},
		{
			"description": "The frequency control.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/instrument/Synth.js#L36",
			"signal": true
		},
		{
			"description": "The detune control.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/instrument/Synth.js#L43",
			"signal": true
		},
		{
			"description": "The amplitude envelope.",
			"type": [
				"Tone.AmplitudeEnvelope"
			],
			"scope": "instance",
			"name": "envelope",
			"lineno": "Tone/instrument/Synth.js#L49"
		},
		{
			"description": "The glide time between notes.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "portamento",
			"lineno": "Tone/instrument/Monophonic.js#L25",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"Expr": [
		{
			"description": "The inputs. The length is determined by the expression.",
			"type": [
				"Array"
			],
			"scope": "instance",
			"name": "input",
			"lineno": "Tone/signal/Expr.js#L36"
		},
		{
			"description": "The output node is the result of the expression",
			"type": [
				"Tone"
			],
			"scope": "instance",
			"name": "output",
			"lineno": "Tone/signal/Expr.js#L58"
		}
	],
	"Modulo": [
		{
			"description": "The modulus value.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/signal/Modulo.js#L72"
		}
	],
	"Normalize": [
		{
			"description": "The minimum value the input signal will reach.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "min",
			"lineno": "Tone/signal/Normalize.js#L53"
		},
		{
			"description": "The maximum value the input signal will reach.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "max",
			"lineno": "Tone/signal/Normalize.js#L69"
		}
	],
	"Pow": [
		{
			"description": "The value of the exponent.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/signal/Pow.js#L35"
		}
	],
	"Scale": [
		{
			"description": "The minimum output value. This number is output when \nthe value input value is 0.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "min",
			"lineno": "Tone/signal/Scale.js#L54"
		},
		{
			"description": "The maximum output value. This number is output when \nthe value input value is 1.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "max",
			"lineno": "Tone/signal/Scale.js#L71"
		}
	],
	"ScaleExp": [
		{
			"description": "Instead of interpolating linearly between the <code>min</code> and \n<code>max</code> values, setting the exponent will interpolate between\nthe two values with an exponential curve.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "exponent",
			"lineno": "Tone/signal/ScaleExp.js#L39"
		},
		{
			"description": "The minimum output value. This number is output when \nthe value input value is 0.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "min",
			"lineno": "Tone/signal/ScaleExp.js#L56"
		},
		{
			"description": "The maximum output value. This number is output when \nthe value input value is 1.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "max",
			"lineno": "Tone/signal/ScaleExp.js#L72"
		}
	],
	"TimelineSignal": [
		{
			"description": "The current value of the signal.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/signal/TimelineSignal.js#L51"
		},
		{
			"description": "The units of the parameter",
			"type": [
				"Tone.Type"
			],
			"scope": "instance",
			"name": "units",
			"lineno": "Tone/core/Param.js#L30",
			"inherits": "Tone.Param"
		},
		{
			"description": "If the value should be converted or not",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "convert",
			"lineno": "Tone/core/Param.js#L36",
			"inherits": "Tone.Param"
		}
	],
	"WaveShaper": [
		{
			"description": "The array to set as the waveshaper curve. For linear curves\narray length does not make much difference, but for complex curves\nlonger arrays will provide smoother interpolation.",
			"type": [
				"Array"
			],
			"scope": "instance",
			"name": "curve",
			"lineno": "Tone/signal/WaveShaper.js#L80"
		},
		{
			"description": "Specifies what type of oversampling (if any) should be used when \napplying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "oversample",
			"lineno": "Tone/signal/WaveShaper.js#L98"
		}
	],
	"AMOscillator": [
		{
			"description": "The oscillator's frequency",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/source/AMOscillator.js#L36",
			"signal": true
		},
		{
			"description": "The detune control signal.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/source/AMOscillator.js#L43",
			"signal": true
		},
		{
			"description": "Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n A harmonicity of 1 gives both oscillators the same frequency. \n Harmonicity = 2 means a change of an octave.",
			"type": [
				"Positive"
			],
			"examples": [
				"//pitch the modulator an octave below carrier\nsynth.harmonicity.value = 0.5;"
			],
			"scope": "instance",
			"name": "harmonicity",
			"lineno": "Tone/source/AMOscillator.js#L70",
			"signal": true
		},
		{
			"description": "The type of the carrier oscillator",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/source/AMOscillator.js#L129"
		},
		{
			"description": "The type of the modulator oscillator",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "modulationType",
			"lineno": "Tone/source/AMOscillator.js#L144"
		},
		{
			"description": "The phase of the oscillator in degrees.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "phase",
			"lineno": "Tone/source/AMOscillator.js#L159"
		},
		{
			"description": "The partials of the carrier waveform. A partial represents \nthe amplitude at a harmonic. The first harmonic is the \nfundamental frequency, the second is the octave and so on\nfollowing the harmonic series. \nSetting this value will automatically set the type to \"custom\". \nThe value is an empty array when the type is not \"custom\".",
			"type": [
				"Array"
			],
			"examples": [
				"osc.partials = [1, 0.2, 0.01];"
			],
			"scope": "instance",
			"name": "partials",
			"lineno": "Tone/source/AMOscillator.js#L175"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105",
			"inherits": "Tone.Source"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118",
			"inherits": "Tone.Source"
		}
	],
	"BufferSource": [
		{
			"description": "The callback to invoke after the \n buffer source is done playing.",
			"type": [
				"function"
			],
			"scope": "instance",
			"name": "onended",
			"lineno": "Tone/source/BufferSource.js#L18"
		},
		{
			"description": "The playbackRate of the buffer",
			"type": [
				"AudioParam"
			],
			"scope": "instance",
			"name": "playbackRate",
			"lineno": "Tone/source/BufferSource.js#L47"
		},
		{
			"description": "The fadeIn time of the amplitude envelope.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "fadeIn",
			"lineno": "Tone/source/BufferSource.js#L53"
		},
		{
			"description": "The fadeOut time of the amplitude envelope.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "fadeOut",
			"lineno": "Tone/source/BufferSource.js#L59"
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/BufferSource.js#L89"
		},
		{
			"description": "If loop is true, the loop will start at this position.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "loopStart",
			"lineno": "Tone/source/BufferSource.js#L217"
		},
		{
			"description": "If loop is true, the loop will end at this position.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "loopEnd",
			"lineno": "Tone/source/BufferSource.js#L232"
		},
		{
			"description": "The audio buffer belonging to the player.",
			"type": [
				"AudioBuffer"
			],
			"scope": "instance",
			"name": "buffer",
			"lineno": "Tone/source/BufferSource.js#L247"
		},
		{
			"description": "If the buffer should loop once it's over.",
			"type": [
				"boolean"
			],
			"scope": "instance",
			"name": "loop",
			"lineno": "Tone/source/BufferSource.js#L266"
		}
	],
	"ExternalInput": [
		{
			"description": "If getUserMedia is supported by the browser.",
			"type": [
				"Boolean"
			],
			"readonly": true,
			"scope": "instance",
			"name": "supported",
			"lineno": "Tone/source/ExternalInput.js#L222"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105",
			"inherits": "Tone.Source"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118",
			"inherits": "Tone.Source"
		}
	],
	"FatOscillator": [
		{
			"description": "The oscillator's frequency",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/source/FatOscillator.js#L28",
			"signal": true
		},
		{
			"description": "The detune control signal.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/source/FatOscillator.js#L35",
			"signal": true
		},
		{
			"description": "The type of the carrier oscillator",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/source/FatOscillator.js#L130"
		},
		{
			"description": "The detune spread between the oscillators. If \"count\" is\nset to 3 oscillators and the \"spread\" is set to 40,\nthe three oscillators would be detuned like this: [-20, 0, 20]\nfor a total detune spread of 40 cents.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "spread",
			"lineno": "Tone/source/FatOscillator.js#L148"
		},
		{
			"description": "The number of detuned oscillators",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "count",
			"lineno": "Tone/source/FatOscillator.js#L173"
		},
		{
			"description": "The phase of the oscillator in degrees.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "phase",
			"lineno": "Tone/source/FatOscillator.js#L218"
		},
		{
			"description": "The partials of the carrier waveform. A partial represents \nthe amplitude at a harmonic. The first harmonic is the \nfundamental frequency, the second is the octave and so on\nfollowing the harmonic series. \nSetting this value will automatically set the type to \"custom\". \nThe value is an empty array when the type is not \"custom\".",
			"type": [
				"Array"
			],
			"examples": [
				"osc.partials = [1, 0.2, 0.01];"
			],
			"scope": "instance",
			"name": "partials",
			"lineno": "Tone/source/FatOscillator.js#L236"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105",
			"inherits": "Tone.Source"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118",
			"inherits": "Tone.Source"
		}
	],
	"FMOscillator": [
		{
			"description": "The oscillator's frequency",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/source/FMOscillator.js#L35",
			"signal": true
		},
		{
			"description": "The detune control signal.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/source/FMOscillator.js#L42",
			"signal": true
		},
		{
			"description": "The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n ratio of the frequency of the modulating signal (mf) to the amplitude of the \n modulating signal (ma) -- as in ma/mf.",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "modulationIndex",
			"lineno": "Tone/source/FMOscillator.js#L52",
			"signal": true
		},
		{
			"description": "Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n A harmonicity of 1 gives both oscillators the same frequency. \n Harmonicity = 2 means a change of an octave.",
			"type": [
				"Positive"
			],
			"examples": [
				"//pitch the modulator an octave below carrier\nsynth.harmonicity.value = 0.5;"
			],
			"scope": "instance",
			"name": "harmonicity",
			"lineno": "Tone/source/FMOscillator.js#L72",
			"signal": true
		},
		{
			"description": "The type of the carrier oscillator",
			"type": [
				"string"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/source/FMOscillator.js#L135"
		},
		{
			"description": "The type of the modulator oscillator",
			"type": [
				"String"
			],
			"scope": "instance",
			"name": "modulationType",
			"lineno": "Tone/source/FMOscillator.js#L150"
		},
		{
			"description": "The phase of the oscillator in degrees.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "phase",
			"lineno": "Tone/source/FMOscillator.js#L165"
		},
		{
			"description": "The partials of the carrier waveform. A partial represents \nthe amplitude at a harmonic. The first harmonic is the \nfundamental frequency, the second is the octave and so on\nfollowing the harmonic series. \nSetting this value will automatically set the type to \"custom\". \nThe value is an empty array when the type is not \"custom\".",
			"type": [
				"Array"
			],
			"examples": [
				"osc.partials = [1, 0.2, 0.01];"
			],
			"scope": "instance",
			"name": "partials",
			"lineno": "Tone/source/FMOscillator.js#L181"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105",
			"inherits": "Tone.Source"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118",
			"inherits": "Tone.Source"
		}
	],
	"GrainPlayer": [
		{
			"description": "The audio buffer belonging to the player.",
			"type": [
				"Tone.Buffer"
			],
			"scope": "instance",
			"name": "buffer",
			"lineno": "Tone/source/GrainPlayer.js#L23"
		},
		{
			"description": "Adjust the pitch independently of the playbackRate.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/source/GrainPlayer.js#L74"
		},
		{
			"description": "The amount of time randomly added\n or subtracted from the grain's offset",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "drift",
			"lineno": "Tone/source/GrainPlayer.js#L81"
		},
		{
			"description": "The playback rate of the sample",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "playbackRate",
			"lineno": "Tone/source/GrainPlayer.js#L207"
		},
		{
			"description": "The loop start time.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "loopStart",
			"lineno": "Tone/source/GrainPlayer.js#L223"
		},
		{
			"description": "The loop end time.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "loopEnd",
			"lineno": "Tone/source/GrainPlayer.js#L238"
		},
		{
			"description": "The direction the buffer should play in",
			"type": [
				"boolean"
			],
			"scope": "instance",
			"name": "reverse",
			"lineno": "Tone/source/GrainPlayer.js#L253"
		},
		{
			"description": "The size of each chunk of audio that the \nbuffer is chopped into and played back at.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "grainSize",
			"lineno": "Tone/source/GrainPlayer.js#L268"
		},
		{
			"description": "This is the duration of the cross-fade between \nsucessive grains.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "overlap",
			"lineno": "Tone/source/GrainPlayer.js#L285"
		}
	],
	"Microphone": [
		{
			"description": "If getUserMedia is supported by the browser.",
			"type": [
				"Boolean"
			],
			"readonly": true,
			"scope": "instance",
			"name": "supported",
			"lineno": "Tone/source/Microphone.js#L28"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105",
			"inherits": "Tone.Source"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118",
			"inherits": "Tone.Source"
		}
	],
	"MultiPlayer": [
		{
			"description": "All the buffers belonging to the player.",
			"type": [
				"Tone.Buffers"
			],
			"scope": "instance",
			"name": "buffers",
			"lineno": "Tone/source/MultiPlayer.js#L36"
		},
		{
			"description": "The fade in envelope which is applied\n to the beginning of the BufferSource",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "fadeIn",
			"lineno": "Tone/source/MultiPlayer.js#L53"
		},
		{
			"description": "The fade out envelope which is applied\n to the end of the BufferSource",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "fadeOut",
			"lineno": "Tone/source/MultiPlayer.js#L60"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/MultiPlayer.js#L76",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source. \"started\"\n if there are any buffers playing. \"stopped\" otherwise.",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/MultiPlayer.js#L195"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/MultiPlayer.js#L209"
		}
	],
	"Noise": [
		{
			"description": "The playback rate of the noise. Affects\n the \"frequency\" of the noise.",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "_playbackRate",
			"lineno": "Tone/source/Noise.js#L53",
			"signal": true
		},
		{
			"description": "The type of the noise. Can be \"white\", \"brown\", or \"pink\".",
			"type": [
				"string"
			],
			"examples": [
				"noise.type = \"white\";"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/source/Noise.js#L72"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105",
			"inherits": "Tone.Source"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118",
			"inherits": "Tone.Source"
		}
	],
	"OmniOscillator": [
		{
			"description": "The frequency control.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/source/OmniOscillator.js#L33",
			"signal": true
		},
		{
			"description": "The detune control",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/source/OmniOscillator.js#L40",
			"signal": true
		},
		{
			"description": "The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\nprefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\ntypes. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\noscillator's class are accessible when the oscillator is set to that type, but throws an error \nwhen it's not.",
			"type": [
				"String"
			],
			"examples": [
				"omniOsc.type = \"pwm\";\n//modulationFrequency is parameter which is available\n//only when the type is \"pwm\". \nomniOsc.modulationFrequency.value = 0.5;",
				"//an square wave frequency modulated by a sawtooth\nomniOsc.type = \"fmsquare\";\nomniOsc.modulationType = \"sawtooth\";"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/source/OmniOscillator.js#L109"
		},
		{
			"description": "The partials of the waveform. A partial represents \nthe amplitude at a harmonic. The first harmonic is the \nfundamental frequency, the second is the octave and so on\nfollowing the harmonic series. \nSetting this value will automatically set the type to \"custom\". \nThe value is an empty array when the type is not \"custom\". \nThis is not available on \"pwm\" and \"pulse\" oscillator types.",
			"type": [
				"Array"
			],
			"examples": [
				"osc.partials = [1, 0.2, 0.01];"
			],
			"scope": "instance",
			"name": "partials",
			"lineno": "Tone/source/OmniOscillator.js#L162"
		},
		{
			"description": "The phase of the oscillator in degrees.",
			"type": [
				"Degrees"
			],
			"scope": "instance",
			"name": "phase",
			"lineno": "Tone/source/OmniOscillator.js#L233"
		},
		{
			"description": "The width of the oscillator (only if the oscillator is set to \"pulse\")",
			"type": [
				"NormalRange"
			],
			"examples": [
				"var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n//can access the width attribute only if type === \"pulse\"\nomniOsc.width.value = 0.2; "
			],
			"scope": "instance",
			"name": "width",
			"lineno": "Tone/source/OmniOscillator.js#L248",
			"signal": true
		},
		{
			"description": "The number of detuned oscillators",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "count",
			"lineno": "Tone/source/OmniOscillator.js#L267"
		},
		{
			"description": "The detune spread between the oscillators. If \"count\" is\nset to 3 oscillators and the \"spread\" is set to 40,\nthe three oscillators would be detuned like this: [-20, 0, 20]\nfor a total detune spread of 40 cents. See Tone.FatOscillator\nfor more info.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "spread",
			"lineno": "Tone/source/OmniOscillator.js#L286"
		},
		{
			"description": "The type of the modulator oscillator. Only if the oscillator\nis set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\nfor more info.",
			"type": [
				"String"
			],
			"scope": "instance",
			"name": "modulationType",
			"lineno": "Tone/source/OmniOscillator.js#L309"
		},
		{
			"description": "Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n A harmonicity of 1 gives both oscillators the same frequency. \n Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n for more info.",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "harmonicity",
			"lineno": "Tone/source/OmniOscillator.js#L347",
			"signal": true
		},
		{
			"description": "The modulationFrequency Signal of the oscillator \n(only if the oscillator type is set to pwm). See \nTone.PWMOscillator for more info.",
			"type": [
				"Frequency"
			],
			"examples": [
				"var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n//can access the modulationFrequency attribute only if type === \"pwm\"\nomniOsc.modulationFrequency.value = 0.2; "
			],
			"scope": "instance",
			"name": "modulationFrequency",
			"lineno": "Tone/source/OmniOscillator.js#L365",
			"signal": true
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105",
			"inherits": "Tone.Source"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118",
			"inherits": "Tone.Source"
		}
	],
	"Oscillator": [
		{
			"description": "The frequency control.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/source/Oscillator.js#L36",
			"signal": true
		},
		{
			"description": "The detune control signal.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/source/Oscillator.js#L43",
			"signal": true
		},
		{
			"description": "The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\nsetting the first x number of partials of the oscillator. For example: \"sine4\" would\nset be the first 4 partials of the sine wave and \"triangle8\" would set the first\n8 partials of the triangle wave.\n<br><br> \nUses PeriodicWave internally even for native types so that it can set the phase. \nPeriodicWave equations are from the \n[Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).",
			"type": [
				"string"
			],
			"examples": [
				"//set it to a square wave\nosc.type = \"square\";",
				"//set the first 6 partials of a sawtooth wave\nosc.type = \"sawtooth6\";"
			],
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/source/Oscillator.js#L164"
		},
		{
			"description": "The partials of the waveform. A partial represents \nthe amplitude at a harmonic. The first harmonic is the \nfundamental frequency, the second is the octave and so on\nfollowing the harmonic series. \nSetting this value will automatically set the type to \"custom\". \nThe value is an empty array when the type is not \"custom\".",
			"type": [
				"Array"
			],
			"examples": [
				"osc.partials = [1, 0.2, 0.01];"
			],
			"scope": "instance",
			"name": "partials",
			"lineno": "Tone/source/Oscillator.js#L298"
		},
		{
			"description": "The phase of the oscillator in degrees.",
			"type": [
				"Degrees"
			],
			"examples": [
				"osc.phase = 180; //flips the phase of the oscillator"
			],
			"scope": "instance",
			"name": "phase",
			"lineno": "Tone/source/Oscillator.js#L325"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105",
			"inherits": "Tone.Source"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118",
			"inherits": "Tone.Source"
		}
	],
	"Player": [
		{
			"description": "If the file should play as soon\n as the buffer is loaded.",
			"type": [
				"boolean"
			],
			"examples": [
				"//will play as soon as it's loaded\nvar player = new Tone.Player({\n\t\"url\" : \"./path/to/sample.mp3\",\n\t\"autostart\" : true,\n}).toMaster();"
			],
			"scope": "instance",
			"name": "autostart",
			"lineno": "Tone/source/Player.js#L47"
		},
		{
			"description": "Enabling retrigger will allow a player to be restarted\n before the the previous 'start' is done playing. Otherwise, \n successive calls to Tone.Player.start will only start\n the sample if it had played all the way through.",
			"type": [
				"boolean"
			],
			"scope": "instance",
			"name": "retrigger",
			"lineno": "Tone/source/Player.js#L98"
		},
		{
			"description": "If loop is true, the loop will start at this position.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "loopStart",
			"lineno": "Tone/source/Player.js#L243"
		},
		{
			"description": "If loop is true, the loop will end at this position.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "loopEnd",
			"lineno": "Tone/source/Player.js#L261"
		},
		{
			"description": "The audio buffer belonging to the player.",
			"type": [
				"Tone.Buffer"
			],
			"scope": "instance",
			"name": "buffer",
			"lineno": "Tone/source/Player.js#L279"
		},
		{
			"description": "If the buffer should loop once it's over.",
			"type": [
				"boolean"
			],
			"scope": "instance",
			"name": "loop",
			"lineno": "Tone/source/Player.js#L294"
		},
		{
			"description": "The playback speed. 1 is normal speed. This is not a signal because\nSafari and iOS currently don't support playbackRate as a signal.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "playbackRate",
			"lineno": "Tone/source/Player.js#L312"
		},
		{
			"description": "The direction the buffer should play in",
			"type": [
				"boolean"
			],
			"scope": "instance",
			"name": "reverse",
			"lineno": "Tone/source/Player.js#L331"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105",
			"inherits": "Tone.Source"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118",
			"inherits": "Tone.Source"
		}
	],
	"PulseOscillator": [
		{
			"description": "The width of the pulse.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "width",
			"lineno": "Tone/source/PulseOscillator.js#L30",
			"signal": true
		},
		{
			"description": "The frequency control.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/source/PulseOscillator.js#L56",
			"signal": true
		},
		{
			"description": "The detune in cents.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/source/PulseOscillator.js#L63",
			"signal": true
		},
		{
			"description": "The phase of the oscillator in degrees.",
			"type": [
				"Degrees"
			],
			"scope": "instance",
			"name": "phase",
			"lineno": "Tone/source/PulseOscillator.js#L123"
		},
		{
			"description": "The type of the oscillator. Always returns \"pulse\".",
			"type": [
				"string"
			],
			"readonly": true,
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/source/PulseOscillator.js#L138"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105",
			"inherits": "Tone.Source"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118",
			"inherits": "Tone.Source"
		}
	],
	"PWMOscillator": [
		{
			"description": "The frequency control.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "frequency",
			"lineno": "Tone/source/PWMOscillator.js#L56",
			"signal": true
		},
		{
			"description": "The detune of the oscillator.",
			"type": [
				"Cents"
			],
			"scope": "instance",
			"name": "detune",
			"lineno": "Tone/source/PWMOscillator.js#L63",
			"signal": true
		},
		{
			"description": "The modulation rate of the oscillator.",
			"type": [
				"Frequency"
			],
			"scope": "instance",
			"name": "modulationFrequency",
			"lineno": "Tone/source/PWMOscillator.js#L70",
			"signal": true
		},
		{
			"description": "The type of the oscillator. Always returns \"pwm\".",
			"type": [
				"string"
			],
			"readonly": true,
			"scope": "instance",
			"name": "type",
			"lineno": "Tone/source/PWMOscillator.js#L115"
		},
		{
			"description": "The phase of the oscillator in degrees.",
			"type": [
				"number"
			],
			"scope": "instance",
			"name": "phase",
			"lineno": "Tone/source/PWMOscillator.js#L141"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"inherits": "Tone.Source",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105",
			"inherits": "Tone.Source"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118",
			"inherits": "Tone.Source"
		}
	],
	"Source": [
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/source/Source.js#L49",
			"signal": true
		},
		{
			"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
			"type": [
				"Tone.State"
			],
			"readonly": true,
			"scope": "instance",
			"name": "state",
			"lineno": "Tone/source/Source.js#L105"
		},
		{
			"description": "Mute the output.",
			"type": [
				"boolean"
			],
			"examples": [
				"//mute the output\nsource.mute = true;"
			],
			"scope": "instance",
			"name": "mute",
			"lineno": "Tone/source/Source.js#L118"
		}
	],
	"AmplitudeEnvelope": [
		{
			"description": "When triggerAttack is called, the attack time is the amount of\n time it takes for the envelope to reach it's maximum value.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "attack",
			"lineno": "Tone/component/Envelope.js#L42",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "After the attack portion of the envelope, the value will fall\n over the duration of the decay time to it's sustain value.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "decay",
			"lineno": "Tone/component/Envelope.js#L49",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "The sustain value is the value \n\twhich the envelope rests at after triggerAttack is\n\tcalled, but before triggerRelease is invoked.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "sustain",
			"lineno": "Tone/component/Envelope.js#L57",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "After triggerRelease is called, the envelope's\n value will fall to it's miminum value over the\n duration of the release time.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "release",
			"lineno": "Tone/component/Envelope.js#L65",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "Read the current value of the envelope. Useful for \nsyncronizing visual output to the envelope.",
			"type": [
				"Number"
			],
			"readonly": true,
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/component/Envelope.js#L110",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "The shape of the attack. \nCan be any of these strings:\n<ul>\n  <li>linear</li>\n  <li>exponential</li>\n  <li>sine</li>\n  <li>ease</li>\n  <li>bounce</li>\n  <li>ripple</li>\n  <li>step</li>\n</ul>\nCan also be an array which describes the curve. Values\nin the array are evenly subdivided and linearly\ninterpolated over the duration of the attack.",
			"type": [
				"String",
				"Array"
			],
			"examples": [
				"env.attackCurve = \"linear\";",
				"//can also be an array\nenv.attackCurve = [0, 0.2, 0.3, 0.4, 1]"
			],
			"scope": "instance",
			"name": "attackCurve",
			"lineno": "Tone/component/Envelope.js#L124",
			"inherits": "Tone.Envelope"
		},
		{
			"description": "The shape of the release. See the attack curve types.",
			"type": [
				"String",
				"Array"
			],
			"examples": [
				"env.releaseCurve = \"linear\";"
			],
			"scope": "instance",
			"name": "releaseCurve",
			"lineno": "Tone/component/Envelope.js#L180",
			"inherits": "Tone.Envelope"
		}
	],
	"TimelineState": [
		{
			"description": "The memory of the timeline, i.e.\n how many events in the past it will retain",
			"type": [
				"Positive"
			],
			"scope": "instance",
			"name": "memory",
			"lineno": "Tone/core/Timeline.js#L43",
			"inherits": "Tone.Timeline"
		},
		{
			"description": "The number of items in the timeline.",
			"type": [
				"Number"
			],
			"readonly": true,
			"scope": "instance",
			"name": "length",
			"lineno": "Tone/core/Timeline.js#L57",
			"inherits": "Tone.Timeline"
		}
	],
	"MidSideEffect": [
		{
			"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
			"type": [
				"NormalRange"
			],
			"scope": "instance",
			"name": "wet",
			"lineno": "Tone/effect/Effect.js#L35",
			"inherits": "Tone.Effect",
			"signal": true
		}
	],
	"SimpleSynth": [
		{
			"description": "The glide time between notes.",
			"type": [
				"Time"
			],
			"scope": "instance",
			"name": "portamento",
			"lineno": "Tone/instrument/Monophonic.js#L25",
			"inherits": "Tone.Monophonic"
		},
		{
			"description": "The volume of the output in decibels.",
			"type": [
				"Decibels"
			],
			"examples": [
				"source.volume.value = -6;"
			],
			"scope": "instance",
			"name": "volume",
			"lineno": "Tone/instrument/Instrument.js#L30",
			"inherits": "Tone.Instrument",
			"signal": true
		}
	],
	"Signal": [
		{
			"description": "The units of the parameter",
			"type": [
				"Tone.Type"
			],
			"scope": "instance",
			"name": "units",
			"lineno": "Tone/core/Param.js#L30",
			"inherits": "Tone.Param"
		},
		{
			"description": "If the value should be converted or not",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "convert",
			"lineno": "Tone/core/Param.js#L36",
			"inherits": "Tone.Param"
		},
		{
			"description": "The current value of the parameter.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/core/Param.js#L65",
			"inherits": "Tone.Param"
		}
	],
	"Add": [
		{
			"description": "The units of the parameter",
			"type": [
				"Tone.Type"
			],
			"scope": "instance",
			"name": "units",
			"lineno": "Tone/core/Param.js#L30",
			"inherits": "Tone.Param"
		},
		{
			"description": "If the value should be converted or not",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "convert",
			"lineno": "Tone/core/Param.js#L36",
			"inherits": "Tone.Param"
		},
		{
			"description": "The current value of the parameter.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/core/Param.js#L65",
			"inherits": "Tone.Param"
		}
	],
	"GreaterThan": [
		{
			"description": "The units of the parameter",
			"type": [
				"Tone.Type"
			],
			"scope": "instance",
			"name": "units",
			"lineno": "Tone/core/Param.js#L30",
			"inherits": "Tone.Param"
		},
		{
			"description": "If the value should be converted or not",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "convert",
			"lineno": "Tone/core/Param.js#L36",
			"inherits": "Tone.Param"
		},
		{
			"description": "The current value of the parameter.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/core/Param.js#L65",
			"inherits": "Tone.Param"
		}
	],
	"Multiply": [
		{
			"description": "The units of the parameter",
			"type": [
				"Tone.Type"
			],
			"scope": "instance",
			"name": "units",
			"lineno": "Tone/core/Param.js#L30",
			"inherits": "Tone.Param"
		},
		{
			"description": "If the value should be converted or not",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "convert",
			"lineno": "Tone/core/Param.js#L36",
			"inherits": "Tone.Param"
		},
		{
			"description": "The current value of the parameter.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/core/Param.js#L65",
			"inherits": "Tone.Param"
		}
	],
	"Subtract": [
		{
			"description": "The units of the parameter",
			"type": [
				"Tone.Type"
			],
			"scope": "instance",
			"name": "units",
			"lineno": "Tone/core/Param.js#L30",
			"inherits": "Tone.Param"
		},
		{
			"description": "If the value should be converted or not",
			"type": [
				"Boolean"
			],
			"scope": "instance",
			"name": "convert",
			"lineno": "Tone/core/Param.js#L36",
			"inherits": "Tone.Param"
		},
		{
			"description": "The current value of the parameter.",
			"type": [
				"Number"
			],
			"scope": "instance",
			"name": "value",
			"lineno": "Tone/core/Param.js#L65",
			"inherits": "Tone.Param"
		}
	]
}